{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MiyooCFW documentation pages","title":"Welcome to MiyooCFW documentation pages"},{"location":"#welcome-to-miyoocfw-documentation-pages","text":"","title":"Welcome to MiyooCFW documentation pages"},{"location":"Bug-Reporting/","text":"This list aims to let the users and developers a complete list of bugs and issues on the console, Stock FW and CFW. If you know a bug in a game please report on our Discord server, we will try to keep this updated. If you want to report something make your request here . Emulators Emulator Issue SMS SMS emulator button mixup when fire a missile in after burner. The volume changes SMS Take about 5 seconds back to 60fps GPSP GPSP savestates may break if turn off the console without exit the emulator before SDLPal Need to double click DOWN key when start the game Homebrews & Ports Game Issue Quake v1.09 Fall into the lava in front of the portal to hard (in lobby) Quake v1.09 Jump the water to the fourth episode(in lobby) ASCII Portal Not Loading Streets of Rage Remake Crashes after the Bomberman games logo Console Revision Issue All Screen tearing problem (Fast movements has lag or bad FPS) All Roms can't save ingame. Its only possible through menu save states All Console doesn't support the VRC7 sound chip 1 Installing CFW requires hardware modifications & soldering 1 - 2 Multi-Cart roms may cause issues on normal console functionallity 1 - 2 - 2.5 Ghost keys (Bad key pressing) when press more than 3 keys Stock Firmware Miyoo Game Compatibility The next list only applies to the 1st and 2nd revisions of the console. Playable Type Game Issue No GBC Shantae Flashing graphics and low fps No NES Lion King Screen flickering No NES Aladdin Freezes after the menu Yes NES Castlevania III Audio problems Yes GB Pok\u00e9mon Red & Blue Audio problems No NES Super Pang Doesn't start No NES Battletoads Freezes after start cutscene Yes GBC Infinity Doesn't sound quite correct Yes NES Lagrange Point Sound problems due inexistence of VRC7 chip Yes GBC Zelda Oracles Freezes when use lowercase in character creation Yes GBC Pok\u00e9mon Puzzle League Graphic glitches on some sprites Yes GBC Ghost n' Goblins Graphic glitches on some sprites","title":"Bug Reporting"},{"location":"Bug-Reporting/#emulators","text":"Emulator Issue SMS SMS emulator button mixup when fire a missile in after burner. The volume changes SMS Take about 5 seconds back to 60fps GPSP GPSP savestates may break if turn off the console without exit the emulator before SDLPal Need to double click DOWN key when start the game","title":"Emulators"},{"location":"Bug-Reporting/#homebrews-ports","text":"Game Issue Quake v1.09 Fall into the lava in front of the portal to hard (in lobby) Quake v1.09 Jump the water to the fourth episode(in lobby) ASCII Portal Not Loading Streets of Rage Remake Crashes after the Bomberman games logo","title":"Homebrews &amp; Ports"},{"location":"Bug-Reporting/#console","text":"Revision Issue All Screen tearing problem (Fast movements has lag or bad FPS) All Roms can't save ingame. Its only possible through menu save states All Console doesn't support the VRC7 sound chip 1 Installing CFW requires hardware modifications & soldering 1 - 2 Multi-Cart roms may cause issues on normal console functionallity 1 - 2 - 2.5 Ghost keys (Bad key pressing) when press more than 3 keys","title":"Console"},{"location":"Bug-Reporting/#stock-firmware-miyoo-game-compatibility","text":"The next list only applies to the 1st and 2nd revisions of the console. Playable Type Game Issue No GBC Shantae Flashing graphics and low fps No NES Lion King Screen flickering No NES Aladdin Freezes after the menu Yes NES Castlevania III Audio problems Yes GB Pok\u00e9mon Red & Blue Audio problems No NES Super Pang Doesn't start No NES Battletoads Freezes after start cutscene Yes GBC Infinity Doesn't sound quite correct Yes NES Lagrange Point Sound problems due inexistence of VRC7 chip Yes GBC Zelda Oracles Freezes when use lowercase in character creation Yes GBC Pok\u00e9mon Puzzle League Graphic glitches on some sprites Yes GBC Ghost n' Goblins Graphic glitches on some sprites","title":"Stock Firmware Miyoo Game Compatibility"},{"location":"Build-Image-and-SDK/","text":"Precondition for Ubuntu 22.04 sudo apt install -y wget unzip build-essential git bc swig libncurses-dev libpython3-dev libssl-dev cpio rsync subversion python3 mercurial imagemagick btrfs-progs Clone buildroot repo git clone https://github.com/MiyooCFW/buildroot.git cd buildroot You can build four types of source Shared uClibc Image and SDK Shared musl Image and SDK Static uClibc SDK only Static musl SDK only NOTE: You can build only one type of source, after each build you need to clean workspace by using make clean NOTE: Difference between static and shared: Static library Shared_library NOTE: You will also need at least 10GB of free space before you can proceed NOTE: This can take a long time! Build uClibc image and SDK shared make miyoo_uclibc_defconfig make sdk Build musl image and SDK shared make miyoo_musl_defconfig make sdk Build uClibc SDK static make miyoo_static_uclibc_defconfig make sdk Build musl SDK static make miyoo_static_musl_defconfig make sdk NOTE: If you have a multicore CPU, you can increase build speed with: make -j ${YOUR_CPU_COUNT} Install image Img will be in the output directory e.g. miyoo-cfw-2.0.0-67298a0_uclibc-BETAv2.img Install SDK SDK will be in the output directory arm-miyoo-linux-uclibcgnueabi_sdk-buildroot.tar.gz Unpack arm-miyoo-linux-uclibcgnueabi_sdk-buildroot.tar.gz to /opt/miyoo , additionally you can run relocate-sdk.sh in custom SDK path gzip -d arm-miyoo-linux-uclibcgnueabi_sdk-buildroot.tar.gz tar xvf arm-miyoo-linux-uclibcgnueabi_sdk-buildroot.tar mv arm-miyoo-linux-uclibcgnueabi_sdk-buildroot miyoo sudo cp -a miyoo /opt/ /opt/miyoo/relocate-sdk.sh Your SDK is ready to use","title":"Build Image and SDK"},{"location":"Build-Image-and-SDK/#precondition-for-ubuntu-2204","text":"sudo apt install -y wget unzip build-essential git bc swig libncurses-dev libpython3-dev libssl-dev cpio rsync subversion python3 mercurial imagemagick btrfs-progs","title":"Precondition for Ubuntu 22.04"},{"location":"Build-Image-and-SDK/#clone-buildroot-repo","text":"git clone https://github.com/MiyooCFW/buildroot.git cd buildroot","title":"Clone buildroot repo"},{"location":"Build-Image-and-SDK/#you-can-build-four-types-of-source","text":"Shared uClibc Image and SDK Shared musl Image and SDK Static uClibc SDK only Static musl SDK only NOTE: You can build only one type of source, after each build you need to clean workspace by using make clean NOTE: Difference between static and shared: Static library Shared_library NOTE: You will also need at least 10GB of free space before you can proceed NOTE: This can take a long time!","title":"You can build four types of source"},{"location":"Build-Image-and-SDK/#build-uclibc-image-and-sdk-shared","text":"make miyoo_uclibc_defconfig make sdk","title":"Build uClibc image and SDK shared"},{"location":"Build-Image-and-SDK/#build-musl-image-and-sdk-shared","text":"make miyoo_musl_defconfig make sdk","title":"Build musl image and SDK shared"},{"location":"Build-Image-and-SDK/#build-uclibc-sdk-static","text":"make miyoo_static_uclibc_defconfig make sdk","title":"Build uClibc SDK static"},{"location":"Build-Image-and-SDK/#build-musl-sdk-static","text":"make miyoo_static_musl_defconfig make sdk NOTE: If you have a multicore CPU, you can increase build speed with: make -j ${YOUR_CPU_COUNT}","title":"Build musl SDK static"},{"location":"Build-Image-and-SDK/#install-image","text":"Img will be in the output directory e.g. miyoo-cfw-2.0.0-67298a0_uclibc-BETAv2.img","title":"Install image"},{"location":"Build-Image-and-SDK/#install-sdk","text":"SDK will be in the output directory arm-miyoo-linux-uclibcgnueabi_sdk-buildroot.tar.gz Unpack arm-miyoo-linux-uclibcgnueabi_sdk-buildroot.tar.gz to /opt/miyoo , additionally you can run relocate-sdk.sh in custom SDK path gzip -d arm-miyoo-linux-uclibcgnueabi_sdk-buildroot.tar.gz tar xvf arm-miyoo-linux-uclibcgnueabi_sdk-buildroot.tar mv arm-miyoo-linux-uclibcgnueabi_sdk-buildroot miyoo sudo cp -a miyoo /opt/ /opt/miyoo/relocate-sdk.sh Your SDK is ready to use","title":"Install SDK"},{"location":"Build-Kernel/","text":"Clone kernel repo git clone https://github.com/MiyooCFW/kernel cd kernel Build kernel locally: You need to have SDK installed in /opt/miyoo directory set environment variables inline with SDK location: export PATH=$PATH:/opt/miyoo/bin export ARCH=arm export CROSS_COMPILE=arm-linux- build kernel make miyoo_defconfig make make dir-pkg Build kernel using docker with MiyooCFW Toolchain: docker run --volume ./:/src/ -it miyoocfw/toolchain-shared-uclibc:latest cd /src make miyoo_defconfig make make dir-pkg Install kernel on SD card copy arch/arm/boot/zImage to boot partition on the SD card Install modules on SD card copy tar-install/lib directory to rootfs partition on the SD card","title":"Build Kernel"},{"location":"Build-Kernel/#clone-kernel-repo","text":"git clone https://github.com/MiyooCFW/kernel cd kernel","title":"Clone kernel repo"},{"location":"Build-Kernel/#build-kernel-locally","text":"You need to have SDK installed in /opt/miyoo directory set environment variables inline with SDK location: export PATH=$PATH:/opt/miyoo/bin export ARCH=arm export CROSS_COMPILE=arm-linux- build kernel make miyoo_defconfig make make dir-pkg","title":"Build kernel locally:"},{"location":"Build-Kernel/#build-kernel-using-docker-with-miyoocfw-toolchain","text":"docker run --volume ./:/src/ -it miyoocfw/toolchain-shared-uclibc:latest cd /src make miyoo_defconfig make make dir-pkg","title":"Build kernel using docker with MiyooCFW Toolchain:"},{"location":"Build-Kernel/#install-kernel-on-sd-card","text":"copy arch/arm/boot/zImage to boot partition on the SD card","title":"Install kernel on SD card"},{"location":"Build-Kernel/#install-modules-on-sd-card","text":"copy tar-install/lib directory to rootfs partition on the SD card","title":"Install modules on SD card"},{"location":"Build-Source-DEPRECATED/","text":"version 1.3.3 - deprecated OpenDingux for Miyoo/Bittboy/PocketGo Handheld This guide was made by Steward and describes how to build all of source codes that include uboot, kernel and emulators Prepare environment Debian 9 (x64) Configure toolchain Extract toolchain.7z into /opt/miyoo Download form here NOTE: Is recommended to build your own toolchain due it has received many updates, see here Export command export PATH=$PATH:/opt/miyoo/bin Build UBoot Boot from SPI Flash make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- licheepi_nano_spiflash_defconfig && make ARCH=arm Boot from SDCard make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- miyoo_defconfig && make ARCH=arm Build Kernel (4bit sdcard - Hardware rev2 and later) vim arch/arm/boot/dts/suniv-f1c500s-miyoo.dts +55 bus-width = <4>; make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- miyoo_defconfig && make ARCH=arm zImage Build Kernel (1bit sdcard - Hardware rev1) vim arch/arm/boot/dts/suniv-f1c500s-miyoo.dts +55 bus-width = <1>; make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- miyoo_defconfig && make ARCH=arm zImage Build Boot.scr Create a file named boot.cmd and copy this: setenv bootargs console=tty0 console=ttyS1,115200 panic=5 rootwait root=/dev/mmcblk0p2 rw load mmc 0:1 0x80C00000 suniv-f1c500s-miyoo.dtb load mmc 0:1 0x80008000 zImage bootz 0x80008000 - 0x80C00000 Build the file with: mkimage -C none -A arm -T script -d boot.cmd boot.scr Prepare SDCard (>= 4GB) Partition 1: 256MB FAT32 (boot.scr, dtb and zImage) Partition 2: 256MB EXT4 (rootfs) Partition 3: 256MB SWAP Partition 4: FAT32 (GMenu2X, config files and emulators) Flash UBoot: Boot from SPI Flash (Hardware rev1 and rev2) Short SPI Pin1 and Pin2 Connect USB to PC Found device: usb 4-1.2.4.4: New USB device found, idVendor=1f3a, idProduct=efe8 Release SPI Pin1 and Pin2 Flash command: $ sudo sunxi-fel -p spiflash-write 0 u-boot-sunxi-with-spl.bin Boot from SDCard $ sudo dd if=u-boot-sunxi-with-spl.bin of=/dev/sdX bs=1024 seek=8 Flash Kernel Copy boot.scr into Partition 1 Copy zImage into Partition 1 Copy suniv-f1c500s-miyoo.dtb into Partition 1 Copy r61520fb.ko into kernel folder in Partition 2 Copy daemon into kernel folder in Partition 2 Build Rootfs You can use an already configured buildroot from https://github.com/MiyooCFW/buildroot See here: https://github.com/TriForceX/MiyooCFW/wiki/Making-Games#step-2 Or download buildroot-2018.02.9 from https://buildroot.org Use config_buildroot-2018.02.9 and then make it Toolchain location: /opt/miyoo Rootfs location: output/images/rootfs.tar Flash Rootfs Extract rootfs.tar into Partition 2 Author website You may find other resources and stuff for this (and the other guides) in https://github.com/steward-fu/miyoo/releases More reviews and details in https://steward-fu.github.io/website/handheld.htm","title":"Build Source-DEPRECATED"},{"location":"Build-Source-DEPRECATED/#version-133-deprecated","text":"","title":"version 1.3.3 - deprecated"},{"location":"Build-Source-DEPRECATED/#opendingux-for-miyoobittboypocketgo-handheld","text":"This guide was made by Steward and describes how to build all of source codes that include uboot, kernel and emulators","title":"OpenDingux for Miyoo/Bittboy/PocketGo Handheld"},{"location":"Build-Source-DEPRECATED/#prepare-environment","text":"Debian 9 (x64)","title":"Prepare environment"},{"location":"Build-Source-DEPRECATED/#configure-toolchain","text":"Extract toolchain.7z into /opt/miyoo Download form here NOTE: Is recommended to build your own toolchain due it has received many updates, see here Export command export PATH=$PATH:/opt/miyoo/bin","title":"Configure toolchain"},{"location":"Build-Source-DEPRECATED/#build-uboot","text":"Boot from SPI Flash make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- licheepi_nano_spiflash_defconfig && make ARCH=arm Boot from SDCard make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- miyoo_defconfig && make ARCH=arm","title":"Build UBoot"},{"location":"Build-Source-DEPRECATED/#build-kernel-4bit-sdcard-hardware-rev2-and-later","text":"vim arch/arm/boot/dts/suniv-f1c500s-miyoo.dts +55 bus-width = <4>; make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- miyoo_defconfig && make ARCH=arm zImage","title":"Build Kernel (4bit sdcard - Hardware rev2 and later)"},{"location":"Build-Source-DEPRECATED/#build-kernel-1bit-sdcard-hardware-rev1","text":"vim arch/arm/boot/dts/suniv-f1c500s-miyoo.dts +55 bus-width = <1>; make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- miyoo_defconfig && make ARCH=arm zImage","title":"Build Kernel (1bit sdcard - Hardware rev1)"},{"location":"Build-Source-DEPRECATED/#build-bootscr","text":"Create a file named boot.cmd and copy this: setenv bootargs console=tty0 console=ttyS1,115200 panic=5 rootwait root=/dev/mmcblk0p2 rw load mmc 0:1 0x80C00000 suniv-f1c500s-miyoo.dtb load mmc 0:1 0x80008000 zImage bootz 0x80008000 - 0x80C00000 Build the file with: mkimage -C none -A arm -T script -d boot.cmd boot.scr","title":"Build Boot.scr"},{"location":"Build-Source-DEPRECATED/#prepare-sdcard-4gb","text":"Partition 1: 256MB FAT32 (boot.scr, dtb and zImage) Partition 2: 256MB EXT4 (rootfs) Partition 3: 256MB SWAP Partition 4: FAT32 (GMenu2X, config files and emulators)","title":"Prepare SDCard (&gt;= 4GB)"},{"location":"Build-Source-DEPRECATED/#flash-uboot","text":"Boot from SPI Flash (Hardware rev1 and rev2) Short SPI Pin1 and Pin2 Connect USB to PC Found device: usb 4-1.2.4.4: New USB device found, idVendor=1f3a, idProduct=efe8 Release SPI Pin1 and Pin2 Flash command: $ sudo sunxi-fel -p spiflash-write 0 u-boot-sunxi-with-spl.bin Boot from SDCard $ sudo dd if=u-boot-sunxi-with-spl.bin of=/dev/sdX bs=1024 seek=8","title":"Flash UBoot:"},{"location":"Build-Source-DEPRECATED/#flash-kernel","text":"Copy boot.scr into Partition 1 Copy zImage into Partition 1 Copy suniv-f1c500s-miyoo.dtb into Partition 1 Copy r61520fb.ko into kernel folder in Partition 2 Copy daemon into kernel folder in Partition 2","title":"Flash Kernel"},{"location":"Build-Source-DEPRECATED/#build-rootfs","text":"You can use an already configured buildroot from https://github.com/MiyooCFW/buildroot See here: https://github.com/TriForceX/MiyooCFW/wiki/Making-Games#step-2 Or download buildroot-2018.02.9 from https://buildroot.org Use config_buildroot-2018.02.9 and then make it Toolchain location: /opt/miyoo Rootfs location: output/images/rootfs.tar","title":"Build Rootfs"},{"location":"Build-Source-DEPRECATED/#flash-rootfs","text":"Extract rootfs.tar into Partition 2","title":"Flash Rootfs"},{"location":"Build-Source-DEPRECATED/#author-website","text":"You may find other resources and stuff for this (and the other guides) in https://github.com/steward-fu/miyoo/releases More reviews and details in https://steward-fu.github.io/website/handheld.htm","title":"Author website"},{"location":"Build-uBoot/","text":"Clone uBoot repo git clone https://github.com/MiyooCFW/uboot.git cd uboot Build uBoot locally You need to have SDK installed in /opt/miyoo directory set environment variables inline with SDK location: export PATH=$PATH:/opt/miyoo/bin export ARCH=arm export CROSS_COMPILE=arm-linux- build uBoot make miyoo_defconfig make build uBoot using docker with MiyooCFW Toolchain: cd uboot docker run --volume ./:/src/ -it miyoocfw/toolchain-shared-uclibc:latest cd /src make miyoo_defconfig make install uboot on SD card dd if=./u-boot-sunxi-with-spl.bin of=/dev/mmcblk0 bs=1024 seek=8","title":"Build uBoot"},{"location":"Build-uBoot/#clone-uboot-repo","text":"git clone https://github.com/MiyooCFW/uboot.git cd uboot","title":"Clone uBoot repo"},{"location":"Build-uBoot/#build-uboot-locally","text":"You need to have SDK installed in /opt/miyoo directory set environment variables inline with SDK location: export PATH=$PATH:/opt/miyoo/bin export ARCH=arm export CROSS_COMPILE=arm-linux- build uBoot make miyoo_defconfig make","title":"Build uBoot locally"},{"location":"Build-uBoot/#build-uboot-using-docker-with-miyoocfw-toolchain","text":"cd uboot docker run --volume ./:/src/ -it miyoocfw/toolchain-shared-uclibc:latest cd /src make miyoo_defconfig make","title":"build uBoot using docker with MiyooCFW Toolchain:"},{"location":"Build-uBoot/#install-uboot-on-sd-card","text":"dd if=./u-boot-sunxi-with-spl.bin of=/dev/mmcblk0 bs=1024 seek=8","title":"install uboot on SD card"},{"location":"Console-Hotkeys/","text":"For MiyooCFW 2.0.0 release and above: Option Bittboy PocketGo PowKiddy Q90 & Q20 PowKiddy V90 XYC Q8 SUP M3 Brightness Up R + \u2192 Reset + \u2192 Rfunction + \u2192 Reset + \u2192 VOL + \u2192 HOME + \u2192 Brightness Down R + \u2190 Reset + \u2190 Rfunction + \u2190 Reset + \u2190 VOL + \u2190 HOME + \u2190 Volume Up R + \u2191 Reset + \u2191 Rfunction + \u2191 Reset + \u2191 VOL + \u2191 HOME + \u2191 Volume Down R + \u2193 Reset + \u2193 Rfunction + \u2193 Reset + \u2193 VOL + \u2193 HOME + \u2193 Screenshot R + Start Reset + Start Rfunction + Start Reset + Start VOL + A HOME + Start Force-close app R + Select Reset + Select Rfunction + Select Reset + Select VOL + B HOME + Select Soft-close app Reset + L2 Quick Shutdown Reset + R2 Simulated L1 R + B Simulated R1 R + A Simulated L2 R + TB Reset + L1 Rfunction + L1 VOL + L1 HOME + L1 Simulated R2 R + TA Reset + R1 Rfunction + R1 VOL + R1 HOME + R1 Simulated L3 Reset + Y Reset + L1 VOL + Y HOME + Y Simulated R3 Reset + X Rfunction + Lfunction Reset + R1 VOL + X HOME + X NOTES: - Lfunction is an extra left button on Q20 and \"-\" button on Q90 (acts as L3 key) - Rfunction is an extra right button on Q20 and \"+\" button on Q90 (acts as RESET/MENU key) - for 1.3.3 legacy image, the above Bittboy hotkeys layout is applied through out all consoles, with two exceptions: - RESET+SELECT acts as \"Quick Shutdown\" - Simulated L2/R2 hotkeys mimic in fact L3/R3 - Hold the select button when in the main menu, to come out of TV out mode.","title":"Console Hotkeys"},{"location":"Custom-Firmware-Setup/","text":"This guide may be outdated! Since Version 2.0.0 Beta was pre-released the following guide will change or be updated and the current one may be only for the old version 1.3.3. Be careful! The next guides are to install custom firmware 1.3.3 and below, download links are provide inside. If you need to take some stuff from older CFW file you may use this metod here . If you don't know your console version you can take a look on the console revision differences here . Note: Is highly recommended to not use the included SD card in the package due the bad quality of this causes data corruption in most of cases. Flashing on Mac --- **Steps to flash an SD card:** 1. Check the \"/dev/disk\" number of your SD card in Disk Utility. 2. Open the Terminal app 3. Unmount the card using this command in the Terminal: `diskutil unmountDisk \"/dev/DISK\"` (Where DISK is the disk# of your SD card.) 4. To write the disk image to the card: `sudo dd if=\"IMAGE.img\" of=\"/dev/DISK\"` (Where IMAGE is the full file path to the Miyoo CFW disk image you've downloaded, and DISK is the assigned disk# address of your SD card in Disk Utility.) You will need to enter your administrative password to confirm, and hit the Return/Enter key on your keyboard. _**Warning:**_ Make sure that you enter the correct disk number for your SD card, or you will be overwriting a different card/disk on your computer!! Double-check the number in Disk Utility, or run the `diskutil list` command in the Terminal, and look for your card and its assigned number by the size of the disk. Note: The disk# does **not** include the s# following it! The s# stands for sector (partition/volume) number in Mac OS. You need to write to the disk directly, not to a partition on the disk. If you write to a partition on the disk, you will need to re-flash, as the flashed SD card will not work/mount. Note: When you hit Return/Enter on the above write command, dd/Terminal will appear to do nothing. This is normal. Wait until dd finishes its work, and it will give you a summary of the successful write. This may take quite some time, so be patient. If you hold down CTRL and press T on your keyboard, it will show you how dd is working. **Steps to back up your whole SD card into a disk image file:** 1. Make sure you have enough space on your hard drive -- as much as the whole SD card is in size 2. Open the Terminal app 3. Unmount the card (see above) 4. Reverse the from/input (\"if\") and to/output (\"of\") values in the previous write command: `dd if=\"/dev/DISK\" of=\"IMAGE.img\"` (See what IMAGE and DISK stand for above.) 5. Wait until dd finishes and gives you the (successful) write summary **Steps to expand the size of the \"main\" partition on the card:** The easiest way to do this, if you have a CD/DVD drive, is to burn the GParted LiveCD ISO to an optical disc, and boot from it on your Mac by turning on the Mac and holding down the C key on your keyboard at the boot sound/chime. When successful, you'll be greeted with an old-type, Windows-like blue/system screen. Just leave all the settings as default and hit the Return/Enter until it loads up GParted. (Note: You'll likely need a wired mouse and keyboard for this, as your wireless/Bluetooth mice and keyboards will not work here! Paired, Bluetooth/wireless controllers don't work outside of the operating system.) > You can download the GParted LiveCD ISO here: https://gparted.org/download.php > Choose the \"amd64\" (64-bit) version, as all Intel Macs are 64-bit. (Only old PowerPC Macs are 32-bit.) ![image](https://user-images.githubusercontent.com/4543835/147808031-d88cca11-6b97-4c2c-a588-4ea2906f9d7a.png) 1. By default, GParted will load your Mac's hard drive first. Make sure you switch to your SD card using the top-right dropdown menu button! 2. Right-click the partition labelled \"main\" on your SD card, and choose the \"Resize/Move\" option. 3. In the resize window that pops up, drag the slider to the right, expanding the selection to the entire remaining space on the card, and hit the Resize (OK/confirm) button. 4. Now double-check that everything looks right (with only the \"main\" partition on the SD card expanded in size), and if everything looks correct, apply your changes by clicking the green tick button in the menu bar, or Edit > \"Apply All Operations\". You may need to confirm your changes -- check that they are correct and what you really want to do. At this point GParted will actually operate on your changed disk volumes and make the changes you've instructed it to make. 5. When done, close GParted and reboot your Mac. You've successfully resized your SD card, and your SD card is ready for use. Safely eject it from your Mac, and pop it into your Miyoo device. --- Pocket Go and PowKiddy Q90-V90-Q20 English Guide --- ## 1) Materials 1. SD card of 8GB or more 2. Lastest Community CFW v1.3.3 Image - PocketGo / PowKiddy Q20 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/pocketgo-cfw-v1.3.3.7z)) - PowKiddy Q90-V90 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/powkiddy-q90-v90-cfw-v1.3.3.7z)) 3. Install Partition Wizard [(Download)](https://www.partitionwizard.com/download.html) 4. Install Win32DiskImager [(Download)](https://win32diskimager.org) 5. Install 7zip [(Download)](https://www.7-zip.org/download.html) 6. Optional Install SD Card Formatter [(Download)](https://www.sdcard.org/downloads/formatter) ## 2) Setup 1. You need to remove all partitions of SD card using: **Partition Wizard** or **SD Card Formatter**. 2. If the CFW file is compressed on **.7zip** just extract using **7zip** before proceed. 3. Execute **Win32DiskImager**, select SD card, load the **.IMG** file and press **Write** button to proceed. 4. Once the image is burned on the SD card, open **Partition Wizard** and choose **Disk Management**. 5. Then right click on the **\"main\"** partition and choose **extend** (Set it to the maximum) and apply. 6. Insert the SD into your console and turn it on. If it boots it is a success. **Notes:** - The SD card need to be in **FAT 32** format. - If you have problems to access the **\"main\"** partition on Windows 7 or 8 please read [here](https://github.com/TriForceX/MiyooCFW/wiki/Miyoo-CFW#alternative-to-access-the-main-partition-on-windows-7-or-8) --- Korean Guide --- ## 1) \uc900\ube44\ubb3c 1. 8\uae30\uac00 \uc774\uc0c1\uc758 SD\uce74\ub4dc 2. \ucd5c\uc2e0 Community CFW v1.3.3 \uc774\ubbf8\uc9c0 - PocketGo / PowKiddy Q20 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/pocketgo-cfw-v1.3.3.7z)) - PowKiddy Q90-V90 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/powkiddy-q90-v90-cfw-v1.3.3.7z)) 3. Partition Wizard [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.partitionwizard.com/download.html) 4. Win32diskimager [(\ub2e4\uc6b4\ub85c\ub4dc)](https://win32diskimager.org) 5. 7zip [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.7-zip.org/download.html) 6. \uc120\ud0dd\uc801 \uc124\uce58 SD Card Formatter [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.sdcard.org/downloads/formatter) ## 2) \uc124\uce58 1. **Partition Wizard** \ub610\ub294 **SD Card Formatter** \ub97c \uc0ac\uc6a9\ud558\uc5ec SD \uce74\ub4dc\uc758 \ubaa8\ub4e0 \ud30c\ud2f0\uc158\uc744 \uc81c\uac70\ud574\uc57c\ud569\ub2c8\ub2e4. 2. CFW \ud30c\uc77c\uc774 ** .7zip ** \uc555\ucd95 \ub41c \uacbd\uc6b0 \uc9c4\ud589\ud558\uae30 \uc804\uc5d0 _7zip_\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc555\ucd95\uc744 \ud480\uba74\ub429\ub2c8\ub2e4. 3. _win32diskimager_\ub97c \uc2e4\ud589\ud558\uace0, SD \uce74\ub4dc\ub97c \uc120\ud0dd\ud558\uace0, **. IMG ** \ud30c\uc77c\uc744\ub85c\ub4dc \ud55c \ub2e4\uc74c ** \uc4f0\uae30 ** \ubc84\ud2bc\uc744 \ub20c\ub7ec \uacc4\uc18d \uc9c4\ud589\ud558\uc2ed\uc2dc\uc624. 4. \uc774\ubbf8\uc9c0\uac00 SD \uce74\ub4dc\uc5d0 \uad6c\uc6cc\uc9c0\uba74 \ud30c\ud2f0\uc158 \ub9c8\ubc95\uc0ac\ub97c \uc5f4\uace0 \ub514\uc2a4\ud06c \uad00\ub9ac\ub97c \uc120\ud0dd\ud558\uc2ed\uc2dc\uc624. 5. _main_ \ud30c\ud2f0\uc158\uc744 \ub9c8\uc6b0\uc2a4 \uc624\ub978\ucabd \ub2e8\ucd94\ub85c \ud074\ub9ad\ud558\uace0 extend (\ucd5c\ub300\ub85c \uc124\uc815)\ub97c \uc120\ud0dd\ud558\uace0 \uc801\uc6a9\ud558\uc2ed\uc2dc\uc624. 6. SD\ub97c \uc0c8 Bittboy\uc5d0 \ub123\uace0 \ucf2d\ub2c8\ub2e4. \ubd80\ud305\ud558\uba74 \uc131\uacf5\ud569\ub2c8\ub2e4. **\ub178\ud2b8:** - SD \uce74\ub4dc\ub294 _FAT 32_ \ud615\uc2dd\uc774\uc5b4\uc57c\ud569\ub2c8\ub2e4. - Windows 7 \ub610\ub294 8\uc758 \"\uae30\ubcf8\"\ud30c\ud2f0\uc158\uc5d0 \uc561\uc138\uc2a4\ud558\ub294 \ub370 \ubb38\uc81c\uac00\uc788\ub294 \uacbd\uc6b0 [\uc5ec\uae30\ub97c \ud074\ub9ad\ud558\uc2ed\uc2dc\uc624](https://github.com/TriForceX/MiyooCFW/wiki/Miyoo-CFW#alternative-to-access-the-main-partition-on-windows-7-or-8) --- New BittBoy v3 and v3.5 English Guide --- ## 1) Materials 1. SD card of 8GB or more 2. Lastest Community CFW v1.3.3 Image - BittBoy rev3 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/bittboy-v3-cfw-v1.3.3.7z)) - BittBoy rev3.5 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/bittboy-v3.5-cfw-v1.3.3.7z)) 3. Install Partition Wizard [(Download)](https://www.partitionwizard.com/download.html) 4. Install win32diskimager [(Download)](https://win32diskimager.org) 5. Install 7zip [(Download)](https://www.7-zip.org/download.html) 6. Optional Install SD Card Formatter [(Download)](https://www.sdcard.org/downloads/formatter) ## 2) Setup 1. You need to remove all partitions of SD card using: **Partition Wizard** or **SD Card Formatter**. 2. If the CFW file is compressed on **.7zip** just extract using **7zip** before proceed. 3. Execute **Win32DiskImager**, select SD card, load the **.IMG** file and press **Write** button to proceed. 4. Once the image is burned on the SD card, open **Partition Wizard** and choose **Disk Management**. 5. Then right click on the **\"main\"** partition and choose **extend** (Set it to the maximum) and apply. 6. Insert the SD into your console and turn it on. If it boots it is a success. **Notes:** - The SD card need to be in **FAT 32** format. - If you have problems to access the **\"main\"** partition on Windows 7 or 8 please read [here](https://github.com/TriForceX/MiyooCFW/wiki/Miyoo-CFW#alternative-to-access-the-main-partition-on-windows-7-or-8) --- Korean Guide --- ## 1) \uc900\ube44\ubb3c 1. 8\uae30\uac00 \uc774\uc0c1\uc758 SD\uce74\ub4dc 2. \ucd5c\uc2e0 Community CFW v1.3.3 \uc774\ubbf8\uc9c0 - BittBoy rev3 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/bittboy-v3-cfw-v1.3.3.7z)) - BittBoy rev3.5 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/bittboy-v3.5-cfw-v1.3.3.7z)) 3. Partition Wizard [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.partitionwizard.com/download.html) 4. Win32diskimager [(\ub2e4\uc6b4\ub85c\ub4dc)](https://win32diskimager.org) 5. 7zip [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.7-zip.org/download.html) 6. \uc120\ud0dd\uc801 \uc124\uce58 SD Card Formatter [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.sdcard.org/downloads/formatter) ## 2) \uc124\uce58 1. **Partition Wizard** \ub610\ub294 **SD Card Formatter** \ub97c \uc0ac\uc6a9\ud558\uc5ec SD \uce74\ub4dc\uc758 \ubaa8\ub4e0 \ud30c\ud2f0\uc158\uc744 \uc81c\uac70\ud574\uc57c\ud569\ub2c8\ub2e4. 2. CFW \ud30c\uc77c\uc774 ** .7zip ** \uc555\ucd95 \ub41c \uacbd\uc6b0 \uc9c4\ud589\ud558\uae30 \uc804\uc5d0 _7zip_\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc555\ucd95\uc744 \ud480\uba74\ub429\ub2c8\ub2e4. 3. _win32diskimager_\ub97c \uc2e4\ud589\ud558\uace0, SD \uce74\ub4dc\ub97c \uc120\ud0dd\ud558\uace0, **. IMG ** \ud30c\uc77c\uc744\ub85c\ub4dc \ud55c \ub2e4\uc74c ** \uc4f0\uae30 ** \ubc84\ud2bc\uc744 \ub20c\ub7ec \uacc4\uc18d \uc9c4\ud589\ud558\uc2ed\uc2dc\uc624. 4. \uc774\ubbf8\uc9c0\uac00 SD \uce74\ub4dc\uc5d0 \uad6c\uc6cc\uc9c0\uba74 \ud30c\ud2f0\uc158 \ub9c8\ubc95\uc0ac\ub97c \uc5f4\uace0 \ub514\uc2a4\ud06c \uad00\ub9ac\ub97c \uc120\ud0dd\ud558\uc2ed\uc2dc\uc624. 5. _main_ \ud30c\ud2f0\uc158\uc744 \ub9c8\uc6b0\uc2a4 \uc624\ub978\ucabd \ub2e8\ucd94\ub85c \ud074\ub9ad\ud558\uace0 extend (\ucd5c\ub300\ub85c \uc124\uc815)\ub97c \uc120\ud0dd\ud558\uace0 \uc801\uc6a9\ud558\uc2ed\uc2dc\uc624. 6. SD\ub97c \uc0c8 Bittboy\uc5d0 \ub123\uace0 \ucf2d\ub2c8\ub2e4. \ubd80\ud305\ud558\uba74 \uc131\uacf5\ud569\ub2c8\ub2e4. **\ub178\ud2b8:** - SD \uce74\ub4dc\ub294 _FAT 32_ \ud615\uc2dd\uc774\uc5b4\uc57c\ud569\ub2c8\ub2e4. - Windows 7 \ub610\ub294 8\uc758 \"\uae30\ubcf8\"\ud30c\ud2f0\uc158\uc5d0 \uc561\uc138\uc2a4\ud558\ub294 \ub370 \ubb38\uc81c\uac00\uc788\ub294 \uacbd\uc6b0 [\uc5ec\uae30\ub97c \ud074\ub9ad\ud558\uc2ed\uc2dc\uc624](https://github.com/TriForceX/MiyooCFW/wiki/Miyoo-CFW#alternative-to-access-the-main-partition-on-windows-7-or-8) --- New BittBoy v2 and v2.5 English Guide --- ## 1) Materials 1. SD card of 8GB or more 2. Lastest Community CFW v1.3.3 Image ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/bittboy-v2-v2.5-cfw-v1.3.3.7z)) 3. Install Partition Wizard [(Download)](https://www.partitionwizard.com/download.html) 4. Install win32diskimager [(Download)](https://win32diskimager.org) 5. Install 7zip [(Download)](https://www.7-zip.org/download.html) 6. Optional Install SD Card Formatter [(Download)](https://www.sdcard.org/downloads/formatter) ## 2) Setup 1. You need to remove all partitions of SD card using: **Partition Wizard** or **SD Card Formatter**. 2. If the CFW file is compressed on **.7zip** just extract using **7zip** before proceed. 3. Execute **Win32DiskImager**, select SD card, load the **.IMG** file and press **Write** button to proceed. 4. Once the image is burned on the SD card, open **Partition Wizard** and choose **Disk Management**. 5. Then right click on the **\"main\"** partition and choose **extend** (Set it to the maximum) and apply. 6. Insert the SD into your console and turn it on. If it boots it is a success. **Notes:** - The SD card need to be in **FAT 32** format. - If you have problems to access the **\"main\"** partition on Windows 7 or 8 please read [here](https://github.com/TriForceX/MiyooCFW/wiki/Miyoo-CFW#alternative-to-access-the-main-partition-on-windows-7-or-8) --- Korean Guide --- ## 1) \uc900\ube44\ubb3c 1. 8\uae30\uac00 \uc774\uc0c1\uc758 SD\uce74\ub4dc 2. \ucd5c\uc2e0 Community CFW v1.3.3 \uc774\ubbf8\uc9c0 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/bittboy-v2-v2.5-cfw-v1.3.3.7z)) 3. Partition Wizard [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.partitionwizard.com/download.html) 4. Win32diskimager [(\ub2e4\uc6b4\ub85c\ub4dc)](https://win32diskimager.org) 5. 7zip [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.7-zip.org/download.html) 6. \uc120\ud0dd\uc801 \uc124\uce58 SD Card Formatter [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.sdcard.org/downloads/formatter) ## 2) \uc124\uce58 1. **Partition Wizard** \ub610\ub294 **SD Card Formatter** \ub97c \uc0ac\uc6a9\ud558\uc5ec SD \uce74\ub4dc\uc758 \ubaa8\ub4e0 \ud30c\ud2f0\uc158\uc744 \uc81c\uac70\ud574\uc57c\ud569\ub2c8\ub2e4. 2. CFW \ud30c\uc77c\uc774 ** .7zip ** \uc555\ucd95 \ub41c \uacbd\uc6b0 \uc9c4\ud589\ud558\uae30 \uc804\uc5d0 _7zip_\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc555\ucd95\uc744 \ud480\uba74\ub429\ub2c8\ub2e4. 3. _win32diskimager_\ub97c \uc2e4\ud589\ud558\uace0, SD \uce74\ub4dc\ub97c \uc120\ud0dd\ud558\uace0, **. IMG ** \ud30c\uc77c\uc744\ub85c\ub4dc \ud55c \ub2e4\uc74c ** \uc4f0\uae30 ** \ubc84\ud2bc\uc744 \ub20c\ub7ec \uacc4\uc18d \uc9c4\ud589\ud558\uc2ed\uc2dc\uc624. 4. \uc774\ubbf8\uc9c0\uac00 SD \uce74\ub4dc\uc5d0 \uad6c\uc6cc\uc9c0\uba74 \ud30c\ud2f0\uc158 \ub9c8\ubc95\uc0ac\ub97c \uc5f4\uace0 \ub514\uc2a4\ud06c \uad00\ub9ac\ub97c \uc120\ud0dd\ud558\uc2ed\uc2dc\uc624. 5. _main_ \ud30c\ud2f0\uc158\uc744 \ub9c8\uc6b0\uc2a4 \uc624\ub978\ucabd \ub2e8\ucd94\ub85c \ud074\ub9ad\ud558\uace0 extend (\ucd5c\ub300\ub85c \uc124\uc815)\ub97c \uc120\ud0dd\ud558\uace0 \uc801\uc6a9\ud558\uc2ed\uc2dc\uc624. 6. SD\ub97c \uc0c8 Bittboy\uc5d0 \ub123\uace0 \ucf2d\ub2c8\ub2e4. \ubd80\ud305\ud558\uba74 \uc131\uacf5\ud569\ub2c8\ub2e4. **\ub178\ud2b8:** - SD \uce74\ub4dc\ub294 _FAT 32_ \ud615\uc2dd\uc774\uc5b4\uc57c\ud569\ub2c8\ub2e4. - Windows 7 \ub610\ub294 8\uc758 \"\uae30\ubcf8\"\ud30c\ud2f0\uc158\uc5d0 \uc561\uc138\uc2a4\ud558\ub294 \ub370 \ubb38\uc81c\uac00\uc788\ub294 \uacbd\uc6b0 [\uc5ec\uae30\ub97c \ud074\ub9ad\ud558\uc2ed\uc2dc\uc624](https://github.com/TriForceX/MiyooCFW/wiki/Miyoo-CFW#alternative-to-access-the-main-partition-on-windows-7-or-8) --- New BittBoy v1 English Guide --- [![click here](https://user-images.githubusercontent.com/16083854/65471957-9d067080-de47-11e9-8ff7-ae0f43aee093.png)](https://www.youtube.com/watch?v=FjQquL3W99U) ## 1) Materials 1. New Bittboy - rev1 (early version) 2. SD card of 8GB or more 3. Knapping supplies (ironing, silverware) 4. Jumper cable (thin cable recommended) 5. Debian or Ubuntu environment computer ## 2) Work Order 1. Hardware mode (hwmod) 2. Building SPI flashing environment 3. SPI flashing 3. Burn image to SD card ## 3.1) Hardware Mod (hwmod) 1. Unscrew the 6 screws to release the case.\\ ![image1](https://user-images.githubusercontent.com/16083854/65471949-9bd54380-de47-11e9-879b-01f39a192205.png) 2. Check the display area. If the LCD connector is not on the display, it is Rev2.\\ ![image2](https://user-images.githubusercontent.com/16083854/65471950-9c6dda00-de47-11e9-9e80-6268b10f22dc.png) 3. Remove resistors R75, R76, R78. 4. DM, DP solder joint (lead to ground).\\ ![image3](https://user-images.githubusercontent.com/16083854/65471951-9c6dda00-de47-11e9-9cfc-f927d244e173.png) - before work\\ ![image4](https://user-images.githubusercontent.com/16083854/65471952-9c6dda00-de47-11e9-8680-0062a4c8f20b.png) - After work 5. Ground the jumper wire on the 2nd pin of the SPI IC chip.\\ ![image5](https://user-images.githubusercontent.com/16083854/65471953-9c6dda00-de47-11e9-81a6-e5f229a2bc8c.png) ## 3.2) Building SPI Flashing Environment 1. Install Debian or Ubuntu on your PC. 2. Run the terminal using an account with root privileges. 3. Enter in the following order: ``` sudo apt-get install git-core ``` 4. When the installation is complete, type in the following order: ``` git clone https://github.com/MiyooCFW/f1c100s_sunxi-tools cd f1c100s_sunxi-tools make clean && make ``` **Note:** If says you have invalid permissions use `sudo make install` ## 3.3) SPI Flashing 1. Connect New BittBoy to PC with USB. 2. Turn on the power while holding the jumper wire as shown in the picture. 3. Download the latest spi image from Steward-fu's github. https://github.com/MiyooCFW/miyoo_rel ``` SPI Image File Name Example > miyoo_spi_hwmod_1bit_ghostkey_20190216.bin ``` 4. Move downloaded SPI image to home. 5. Run the terminal. 6. Type the following: ``` sudo sunxi-fel -p spiflash-write 0 SPI image .bin ex> sudo ./sunxi-fel -p spiflash-write 0 miyoo_spi_hwmod_1bit_ghostkey_20190216.bin ``` 7. Wait until 100% is completed. 8. Disconnect the New BittBoy from the PC and turn off the power. 9. Assemble the New Bittboy main body and turn on the power. 10. If the following screen is displayed, it is success.\\ ![image6](https://user-images.githubusercontent.com/16083854/65471954-9c6dda00-de47-11e9-80f1-d2d3799d8587.png) # 3.4) Burning an Image to an SD Card 1. Download the latest MiOS image from Steward-fu's github. https://github.com/MiyooCFW/miyoo_rel ``` MiOS image file name example > MiOS_v1.0_20190203.zip, MiOS_v1.0_20190203.z01, MiOS_v1.0_20190203.z02 ... ``` **Note:** You can get an alternative more updated image/kernel from Christian Haitian repository [here](https://github.com/christianhaitian/BittBoyV1). 2. Remove all partitions of SD card and format it with FAT32 etc. (I used Windows Disk Management) 3. Download `win32diskimager` and install it. https://win32diskimager.org/ 4. Execute `win32diskimager`, select SD driver, load MiOS image and press **\"Write\"** button to proceed.\\ ![image7](https://user-images.githubusercontent.com/16083854/65471955-9c6dda00-de47-11e9-818f-3aac0e6989e2.png) 5. Once the image is burned, insert SD into New Bittboy and turn it on. If it boots like below, it is a success.\\ ![image8](https://user-images.githubusercontent.com/16083854/65471956-9d067080-de47-11e9-84c6-9a166f4f6eeb.png) --- Korean Guide --- [![click here](https://user-images.githubusercontent.com/16083854/65471957-9d067080-de47-11e9-8ff7-ae0f43aee093.png)](https://www.youtube.com/watch?v=FjQquL3W99U) ## 1) \uc900\ube44\ubb3c 1. New Bittboy - rev1(\ucd08\uae30 \ubc84\uc804) 2. 8\uae30\uac00 \uc774\uc0c1\uc758 SD\uce74\ub4dc 3. \ub0a9\ub5cc \uc6a9\ud488 (\uc778\ub450\uae30, \uc740\ub0a9) 4. \uc810\ud37c\ucf00\uc774\ube14(\uc587\uc740 \ucf00\uc774\ube14 \ucd94\ucc9c) 5. \ub370\ube44\uc548 or \uc6b0\ubd84\ud22c \ud658\uacbd\uc758 \ucef4\ud4e8\ud130 ## 2)\uc791\uc5c5 \uc21c\uc11c 1. \ud558\ub4dc\uc6e8\uc5b4 \ubaa8\ub4dc(hwmod) 2. SPI\ud50c\ub808\uc2f1 \ud658\uacbd \uad6c\ucd95 3. SPI\ud50c\ub808\uc2f1 3. SD \uce74\ub4dc\uc5d0 \uc774\ubbf8\uc9c0 \uad7d\uae30 ## 3.1 \ud558\ub4dc\uc6e8\uc5b4 \ubaa8\ub4dc(hwmod) 1. \ub098\uc0ac\ub97c \ud480\uc5b4 \ucf00\uc774\uc2a4\ub97c \ub54c\uc5b4\ub0c5\ub2c8\ub2e4.\\ ![image1](https://user-images.githubusercontent.com/16083854/65471949-9bd54380-de47-11e9-879b-01f39a192205.png) 2. \ud45c\uc2dc \ubd80\ubd84\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. LCD\ucee4\ub125\ud130\uac00 \ud45c\uc2dc\ubd80\ubd84\uc5d0 \uc5c6\ub2e4\uba74, Rev2\uc785\ub2c8\ub2e4.(\uac04\ub2e8\ud788 \uad6c\ubd84\ubc29\ubc95)\\ ![image2](https://user-images.githubusercontent.com/16083854/65471950-9c6dda00-de47-11e9-9e80-6268b10f22dc.png) 3. \uc800\ud56d R75, R76, R78\uc744 \uc81c\uac70\ud569\ub2c8\ub2e4. 4. DM, DP \uc194\ub354 \uc870\uc778\ud2b8\ud569\ub2c8\ub2e4.(\ub0a9\uc73c\ub85c \uc811\uc9c0\ud569\ub2c8\ub2e4.)\\ ![image3](https://user-images.githubusercontent.com/16083854/65471951-9c6dda00-de47-11e9-9cfc-f927d244e173.png) - -\uc218\uc815\uc804\\ ![image4](https://user-images.githubusercontent.com/16083854/65471952-9c6dda00-de47-11e9-8680-0062a4c8f20b.png) - -\uc218\uc815\ud6c4 5. SPI IC\uce69\uc758 2\ubc88\uc5d0 \uc810\ud37c\uc120\uc744 \uc811\uc9c0\ud569\ub2c8\ub2e4.\\ ![image5](https://user-images.githubusercontent.com/16083854/65471953-9c6dda00-de47-11e9-81a6-e5f229a2bc8c.png) ## 3.2) SPI\ud50c\ub808\uc2f1 \ud658\uacbd \uad6c\ucd95 1. PC\uc5d0 \ub370\ube44\uc548 or \uc6b0\ubd84\ud22c\ub97c \uc124\uce58\ud569\ub2c8\ub2e4. 2. root\uad8c\ud55c\uc774 \uc788\ub294 \uacc4\uc815\uc73c\ub85c \ud130\ubbf8\ub110\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. 3. \ub2e4\uc74c\uacfc \uac19\uc740 \uc21c\uc11c\ub300\ub85c \uc785\ub825\ud569\ub2c8\ub2e4. ``` sudo apt-get install git-core ``` 4. \uc124\uce58\uac00 \uc644\ub8cc\ub418\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \uc21c\uc11c\ub300\ub85c \uc785\ub825\ud569\ub2c8\ub2e4. ``` git clone https://github.com/MiyooCFW/f1c100s_sunxi-tools cd f1c100s_sunxi-tools make clean && make ``` **\ucc38\uace0**: \uc798\ubabb\ub41c \uc0ac\uc6a9 \uad8c\ud55c\uc774 \uc788\ub2e4\uace0 \ud45c\uc2dc\ub418\ub294 \uacbd\uc6b0 `sudo make install` ## 3.3) SPI\ud50c\ub808\uc2f1 1. USB\ub85c \ub274 \ube44\ud2b8\ubcf4\uc774(New Bittboy)\uc640 PC\ub97c \uc5f0\uacb0\ud569\ub2c8\ub2e4. 2. \uc0ac\uc9c4\uacfc \uac19\uc774 \uc810\ud37c\uc120\uc744 \uc811\ucd09\uc2dc\ud0a8 \uc0c1\ud0dc\uc5d0\uc11c \uc804\uc6d0\uc744 \ucf2d\ub2c8\ub2e4. 3. Steward-fu\uc758 github\uc5d0\uc11c \ucd5c\uc2e0 spi\uc774\ubbf8\uc9c0\ub97c \ub2e4\uc6b4\ub85c\ub4dc \ud569\ub2c8\ub2e4. https://github.com/MiyooCFW/miyoo_rel ``` SPI\uc774\ubbf8\uc9c0 \ud30c\uc77c\uba85 \uc608\uc2dc >miyoo_spi_hwmod_1bit_ghostkey_20190216.bin ``` 4. \ub2e4\uc6b4\ubc1b\uc740 SPI\uc774\ubbf8\uc9c0\ub97c \ud648\uc73c\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4. 5. \ud130\ubbf8\ub110\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. 6. \ub2e4\uc74c\uacfc \uac19\uc774 \uc785\ub825\ud569\ub2c8\ub2e4. ``` sudo sunxi-fel -p spiflash-write 0 SPI\uc774\ubbf8\uc9c0.bin ex>sudo sunxi-fel -p spiflash-write 0 miyoo_spi_hwmod_1bit_ghostkey_20190216.bin ``` 7. 100% \uc644\ub8cc\ub420\ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9bd\ub2c8\ub2e4. 8. \ub274 \ube44\ud2b8\ubcf4\uc774(New Bittboy)\uc640 PC\ub97c \uc5f0\uacb0 \ud574\uc81c\ud558\uace0 \uc804\uc6d0\uc744 \ub055\ub2c8\ub2e4. 9. \ub274 \ube44\ud2b8\ubcf4\uc774(New Bittboy) \ubcf8\uccb4\ub97c \uc870\ub9bd\ud558\uace0 \uc804\uc6d0\uc744 \ud0b5\ub2c8\ub2e4. 10. \ub2e4\uc74c\uacfc \uac19\uc740 \ud654\uba74\uc774 \ucd9c\ub825\ub418\uba74 \uc131\uacf5\uc785\ub2c8\ub2e4.\\ ![image6](https://user-images.githubusercontent.com/16083854/65471954-9c6dda00-de47-11e9-80f1-d2d3799d8587.png) ## 3.4) SD \uce74\ub4dc\uc5d0 \uc774\ubbf8\uc9c0 \uad7d\uae30 1. Steward-fu\uc758 github\uc5d0\uc11c \ucd5c\uc2e0 MiOS\uc774\ubbf8\uc9c0\ub97c \ub2e4\uc6b4\ub85c\ub4dc \ud569\ub2c8\ub2e4. https://github.com/MiyooCFW/miyoo_rel ``` MiOS\uc774\ubbf8\uc9c0 \ud30c\uc77c\uba85 \uc608\uc2dc >MiOS_v1.0_20190203.zip, MiOS_v1.0_20190203.z01, MiOS_v1.0_20190203.z02 ... ``` **\ucc38\uace0**: Christian Haitian \uc800\uc7a5\uc18c\uc5d0\uc11c \ub300\uccb4 \uc774\ubbf8\uc9c0 / \ucee4\ub110\uc744 \uc5c5\ub370\uc774\ud2b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 [\uc5ec\uae30\uc5d0](https://github.com/christianhaitian/BittBoyV1). 2. SD\uce74\ub4dc\uc758 \ud30c\ud2f0\uc158\uc744 \ubaa8\ub450 \uc81c\uac70\ud558\uace0 FAT32\ub4f1\uc73c\ub85c \ud3ec\ub9f7\ud569\ub2c8\ub2e4..(\ud544\uc790\ub294 \uc708\ub3c4\uc6b0 \ub514\uc2a4\ud06c\uad00\ub9ac\ub97c \uc774\uc6a9\ud588\uc2b5\ub2c8\ub2e4.) 3. `win32diskimager`\ub97c \ub2e4\uc6b4\ubc1b\uace0 \uc124\uce58\ud569\ub2c8\ub2e4. https://win32diskimager.org/ 4. `win32diskimager`\ub97c \uc2e4\ud589\ud558\uace0 SD\ub4dc\ub77c\uc774\ubc84\ub97c \uc120\ud0dd \ud6c4 MiOS\uc774\ubbf8\uc9c0\ub97c \ubd88\ub7ec\uc628 \ud6c4 \"Write\"\ubc84\ud2bc\uc744 \ub20c\ub7ec \uc9c4\ud589\ud569\ub2c8\ub2e4.\\ ![image7](https://user-images.githubusercontent.com/16083854/65471955-9c6dda00-de47-11e9-818f-3aac0e6989e2.png) 5. \uc774\ubbf8\uc9c0\uac00 \ub2e4 \uad6c\uc6cc\uc9c0\uba74 \ub274 \ube44\ud2b8\ubcf4\uc774(New Bittboy)\uc5d0 SD\ub97c \uc0bd\uc785\ud558\uace0 \uc804\uc6d0\uc744 \ud0b5\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc774 \ubd80\ud305\ub418\uba74 \uc131\uacf5\uc785\ub2c8\ub2e4.\\ ![image8](https://user-images.githubusercontent.com/16083854/65471956-9d067080-de47-11e9-84c6-9a166f4f6eeb.png) ---","title":"Custom Firmware Setup"},{"location":"Custom-Firmware-Setup/#this-guide-may-be-outdated","text":"Since Version 2.0.0 Beta was pre-released the following guide will change or be updated and the current one may be only for the old version 1.3.3. Be careful! The next guides are to install custom firmware 1.3.3 and below, download links are provide inside. If you need to take some stuff from older CFW file you may use this metod here . If you don't know your console version you can take a look on the console revision differences here . Note: Is highly recommended to not use the included SD card in the package due the bad quality of this causes data corruption in most of cases. Flashing on Mac --- **Steps to flash an SD card:** 1. Check the \"/dev/disk\" number of your SD card in Disk Utility. 2. Open the Terminal app 3. Unmount the card using this command in the Terminal: `diskutil unmountDisk \"/dev/DISK\"` (Where DISK is the disk# of your SD card.) 4. To write the disk image to the card: `sudo dd if=\"IMAGE.img\" of=\"/dev/DISK\"` (Where IMAGE is the full file path to the Miyoo CFW disk image you've downloaded, and DISK is the assigned disk# address of your SD card in Disk Utility.) You will need to enter your administrative password to confirm, and hit the Return/Enter key on your keyboard. _**Warning:**_ Make sure that you enter the correct disk number for your SD card, or you will be overwriting a different card/disk on your computer!! Double-check the number in Disk Utility, or run the `diskutil list` command in the Terminal, and look for your card and its assigned number by the size of the disk. Note: The disk# does **not** include the s# following it! The s# stands for sector (partition/volume) number in Mac OS. You need to write to the disk directly, not to a partition on the disk. If you write to a partition on the disk, you will need to re-flash, as the flashed SD card will not work/mount. Note: When you hit Return/Enter on the above write command, dd/Terminal will appear to do nothing. This is normal. Wait until dd finishes its work, and it will give you a summary of the successful write. This may take quite some time, so be patient. If you hold down CTRL and press T on your keyboard, it will show you how dd is working. **Steps to back up your whole SD card into a disk image file:** 1. Make sure you have enough space on your hard drive -- as much as the whole SD card is in size 2. Open the Terminal app 3. Unmount the card (see above) 4. Reverse the from/input (\"if\") and to/output (\"of\") values in the previous write command: `dd if=\"/dev/DISK\" of=\"IMAGE.img\"` (See what IMAGE and DISK stand for above.) 5. Wait until dd finishes and gives you the (successful) write summary **Steps to expand the size of the \"main\" partition on the card:** The easiest way to do this, if you have a CD/DVD drive, is to burn the GParted LiveCD ISO to an optical disc, and boot from it on your Mac by turning on the Mac and holding down the C key on your keyboard at the boot sound/chime. When successful, you'll be greeted with an old-type, Windows-like blue/system screen. Just leave all the settings as default and hit the Return/Enter until it loads up GParted. (Note: You'll likely need a wired mouse and keyboard for this, as your wireless/Bluetooth mice and keyboards will not work here! Paired, Bluetooth/wireless controllers don't work outside of the operating system.) > You can download the GParted LiveCD ISO here: https://gparted.org/download.php > Choose the \"amd64\" (64-bit) version, as all Intel Macs are 64-bit. (Only old PowerPC Macs are 32-bit.) ![image](https://user-images.githubusercontent.com/4543835/147808031-d88cca11-6b97-4c2c-a588-4ea2906f9d7a.png) 1. By default, GParted will load your Mac's hard drive first. Make sure you switch to your SD card using the top-right dropdown menu button! 2. Right-click the partition labelled \"main\" on your SD card, and choose the \"Resize/Move\" option. 3. In the resize window that pops up, drag the slider to the right, expanding the selection to the entire remaining space on the card, and hit the Resize (OK/confirm) button. 4. Now double-check that everything looks right (with only the \"main\" partition on the SD card expanded in size), and if everything looks correct, apply your changes by clicking the green tick button in the menu bar, or Edit > \"Apply All Operations\". You may need to confirm your changes -- check that they are correct and what you really want to do. At this point GParted will actually operate on your changed disk volumes and make the changes you've instructed it to make. 5. When done, close GParted and reboot your Mac. You've successfully resized your SD card, and your SD card is ready for use. Safely eject it from your Mac, and pop it into your Miyoo device. ---","title":"This guide may be outdated!"},{"location":"Custom-Firmware-Setup/#pocket-go-and-powkiddy-q90-v90-q20","text":"English Guide --- ## 1) Materials 1. SD card of 8GB or more 2. Lastest Community CFW v1.3.3 Image - PocketGo / PowKiddy Q20 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/pocketgo-cfw-v1.3.3.7z)) - PowKiddy Q90-V90 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/powkiddy-q90-v90-cfw-v1.3.3.7z)) 3. Install Partition Wizard [(Download)](https://www.partitionwizard.com/download.html) 4. Install Win32DiskImager [(Download)](https://win32diskimager.org) 5. Install 7zip [(Download)](https://www.7-zip.org/download.html) 6. Optional Install SD Card Formatter [(Download)](https://www.sdcard.org/downloads/formatter) ## 2) Setup 1. You need to remove all partitions of SD card using: **Partition Wizard** or **SD Card Formatter**. 2. If the CFW file is compressed on **.7zip** just extract using **7zip** before proceed. 3. Execute **Win32DiskImager**, select SD card, load the **.IMG** file and press **Write** button to proceed. 4. Once the image is burned on the SD card, open **Partition Wizard** and choose **Disk Management**. 5. Then right click on the **\"main\"** partition and choose **extend** (Set it to the maximum) and apply. 6. Insert the SD into your console and turn it on. If it boots it is a success. **Notes:** - The SD card need to be in **FAT 32** format. - If you have problems to access the **\"main\"** partition on Windows 7 or 8 please read [here](https://github.com/TriForceX/MiyooCFW/wiki/Miyoo-CFW#alternative-to-access-the-main-partition-on-windows-7-or-8) --- Korean Guide --- ## 1) \uc900\ube44\ubb3c 1. 8\uae30\uac00 \uc774\uc0c1\uc758 SD\uce74\ub4dc 2. \ucd5c\uc2e0 Community CFW v1.3.3 \uc774\ubbf8\uc9c0 - PocketGo / PowKiddy Q20 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/pocketgo-cfw-v1.3.3.7z)) - PowKiddy Q90-V90 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/powkiddy-q90-v90-cfw-v1.3.3.7z)) 3. Partition Wizard [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.partitionwizard.com/download.html) 4. Win32diskimager [(\ub2e4\uc6b4\ub85c\ub4dc)](https://win32diskimager.org) 5. 7zip [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.7-zip.org/download.html) 6. \uc120\ud0dd\uc801 \uc124\uce58 SD Card Formatter [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.sdcard.org/downloads/formatter) ## 2) \uc124\uce58 1. **Partition Wizard** \ub610\ub294 **SD Card Formatter** \ub97c \uc0ac\uc6a9\ud558\uc5ec SD \uce74\ub4dc\uc758 \ubaa8\ub4e0 \ud30c\ud2f0\uc158\uc744 \uc81c\uac70\ud574\uc57c\ud569\ub2c8\ub2e4. 2. CFW \ud30c\uc77c\uc774 ** .7zip ** \uc555\ucd95 \ub41c \uacbd\uc6b0 \uc9c4\ud589\ud558\uae30 \uc804\uc5d0 _7zip_\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc555\ucd95\uc744 \ud480\uba74\ub429\ub2c8\ub2e4. 3. _win32diskimager_\ub97c \uc2e4\ud589\ud558\uace0, SD \uce74\ub4dc\ub97c \uc120\ud0dd\ud558\uace0, **. IMG ** \ud30c\uc77c\uc744\ub85c\ub4dc \ud55c \ub2e4\uc74c ** \uc4f0\uae30 ** \ubc84\ud2bc\uc744 \ub20c\ub7ec \uacc4\uc18d \uc9c4\ud589\ud558\uc2ed\uc2dc\uc624. 4. \uc774\ubbf8\uc9c0\uac00 SD \uce74\ub4dc\uc5d0 \uad6c\uc6cc\uc9c0\uba74 \ud30c\ud2f0\uc158 \ub9c8\ubc95\uc0ac\ub97c \uc5f4\uace0 \ub514\uc2a4\ud06c \uad00\ub9ac\ub97c \uc120\ud0dd\ud558\uc2ed\uc2dc\uc624. 5. _main_ \ud30c\ud2f0\uc158\uc744 \ub9c8\uc6b0\uc2a4 \uc624\ub978\ucabd \ub2e8\ucd94\ub85c \ud074\ub9ad\ud558\uace0 extend (\ucd5c\ub300\ub85c \uc124\uc815)\ub97c \uc120\ud0dd\ud558\uace0 \uc801\uc6a9\ud558\uc2ed\uc2dc\uc624. 6. SD\ub97c \uc0c8 Bittboy\uc5d0 \ub123\uace0 \ucf2d\ub2c8\ub2e4. \ubd80\ud305\ud558\uba74 \uc131\uacf5\ud569\ub2c8\ub2e4. **\ub178\ud2b8:** - SD \uce74\ub4dc\ub294 _FAT 32_ \ud615\uc2dd\uc774\uc5b4\uc57c\ud569\ub2c8\ub2e4. - Windows 7 \ub610\ub294 8\uc758 \"\uae30\ubcf8\"\ud30c\ud2f0\uc158\uc5d0 \uc561\uc138\uc2a4\ud558\ub294 \ub370 \ubb38\uc81c\uac00\uc788\ub294 \uacbd\uc6b0 [\uc5ec\uae30\ub97c \ud074\ub9ad\ud558\uc2ed\uc2dc\uc624](https://github.com/TriForceX/MiyooCFW/wiki/Miyoo-CFW#alternative-to-access-the-main-partition-on-windows-7-or-8) ---","title":"Pocket Go and PowKiddy Q90-V90-Q20"},{"location":"Custom-Firmware-Setup/#new-bittboy-v3-and-v35","text":"English Guide --- ## 1) Materials 1. SD card of 8GB or more 2. Lastest Community CFW v1.3.3 Image - BittBoy rev3 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/bittboy-v3-cfw-v1.3.3.7z)) - BittBoy rev3.5 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/bittboy-v3.5-cfw-v1.3.3.7z)) 3. Install Partition Wizard [(Download)](https://www.partitionwizard.com/download.html) 4. Install win32diskimager [(Download)](https://win32diskimager.org) 5. Install 7zip [(Download)](https://www.7-zip.org/download.html) 6. Optional Install SD Card Formatter [(Download)](https://www.sdcard.org/downloads/formatter) ## 2) Setup 1. You need to remove all partitions of SD card using: **Partition Wizard** or **SD Card Formatter**. 2. If the CFW file is compressed on **.7zip** just extract using **7zip** before proceed. 3. Execute **Win32DiskImager**, select SD card, load the **.IMG** file and press **Write** button to proceed. 4. Once the image is burned on the SD card, open **Partition Wizard** and choose **Disk Management**. 5. Then right click on the **\"main\"** partition and choose **extend** (Set it to the maximum) and apply. 6. Insert the SD into your console and turn it on. If it boots it is a success. **Notes:** - The SD card need to be in **FAT 32** format. - If you have problems to access the **\"main\"** partition on Windows 7 or 8 please read [here](https://github.com/TriForceX/MiyooCFW/wiki/Miyoo-CFW#alternative-to-access-the-main-partition-on-windows-7-or-8) --- Korean Guide --- ## 1) \uc900\ube44\ubb3c 1. 8\uae30\uac00 \uc774\uc0c1\uc758 SD\uce74\ub4dc 2. \ucd5c\uc2e0 Community CFW v1.3.3 \uc774\ubbf8\uc9c0 - BittBoy rev3 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/bittboy-v3-cfw-v1.3.3.7z)) - BittBoy rev3.5 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/bittboy-v3.5-cfw-v1.3.3.7z)) 3. Partition Wizard [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.partitionwizard.com/download.html) 4. Win32diskimager [(\ub2e4\uc6b4\ub85c\ub4dc)](https://win32diskimager.org) 5. 7zip [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.7-zip.org/download.html) 6. \uc120\ud0dd\uc801 \uc124\uce58 SD Card Formatter [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.sdcard.org/downloads/formatter) ## 2) \uc124\uce58 1. **Partition Wizard** \ub610\ub294 **SD Card Formatter** \ub97c \uc0ac\uc6a9\ud558\uc5ec SD \uce74\ub4dc\uc758 \ubaa8\ub4e0 \ud30c\ud2f0\uc158\uc744 \uc81c\uac70\ud574\uc57c\ud569\ub2c8\ub2e4. 2. CFW \ud30c\uc77c\uc774 ** .7zip ** \uc555\ucd95 \ub41c \uacbd\uc6b0 \uc9c4\ud589\ud558\uae30 \uc804\uc5d0 _7zip_\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc555\ucd95\uc744 \ud480\uba74\ub429\ub2c8\ub2e4. 3. _win32diskimager_\ub97c \uc2e4\ud589\ud558\uace0, SD \uce74\ub4dc\ub97c \uc120\ud0dd\ud558\uace0, **. IMG ** \ud30c\uc77c\uc744\ub85c\ub4dc \ud55c \ub2e4\uc74c ** \uc4f0\uae30 ** \ubc84\ud2bc\uc744 \ub20c\ub7ec \uacc4\uc18d \uc9c4\ud589\ud558\uc2ed\uc2dc\uc624. 4. \uc774\ubbf8\uc9c0\uac00 SD \uce74\ub4dc\uc5d0 \uad6c\uc6cc\uc9c0\uba74 \ud30c\ud2f0\uc158 \ub9c8\ubc95\uc0ac\ub97c \uc5f4\uace0 \ub514\uc2a4\ud06c \uad00\ub9ac\ub97c \uc120\ud0dd\ud558\uc2ed\uc2dc\uc624. 5. _main_ \ud30c\ud2f0\uc158\uc744 \ub9c8\uc6b0\uc2a4 \uc624\ub978\ucabd \ub2e8\ucd94\ub85c \ud074\ub9ad\ud558\uace0 extend (\ucd5c\ub300\ub85c \uc124\uc815)\ub97c \uc120\ud0dd\ud558\uace0 \uc801\uc6a9\ud558\uc2ed\uc2dc\uc624. 6. SD\ub97c \uc0c8 Bittboy\uc5d0 \ub123\uace0 \ucf2d\ub2c8\ub2e4. \ubd80\ud305\ud558\uba74 \uc131\uacf5\ud569\ub2c8\ub2e4. **\ub178\ud2b8:** - SD \uce74\ub4dc\ub294 _FAT 32_ \ud615\uc2dd\uc774\uc5b4\uc57c\ud569\ub2c8\ub2e4. - Windows 7 \ub610\ub294 8\uc758 \"\uae30\ubcf8\"\ud30c\ud2f0\uc158\uc5d0 \uc561\uc138\uc2a4\ud558\ub294 \ub370 \ubb38\uc81c\uac00\uc788\ub294 \uacbd\uc6b0 [\uc5ec\uae30\ub97c \ud074\ub9ad\ud558\uc2ed\uc2dc\uc624](https://github.com/TriForceX/MiyooCFW/wiki/Miyoo-CFW#alternative-to-access-the-main-partition-on-windows-7-or-8) ---","title":"New BittBoy v3 and v3.5"},{"location":"Custom-Firmware-Setup/#new-bittboy-v2-and-v25","text":"English Guide --- ## 1) Materials 1. SD card of 8GB or more 2. Lastest Community CFW v1.3.3 Image ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/bittboy-v2-v2.5-cfw-v1.3.3.7z)) 3. Install Partition Wizard [(Download)](https://www.partitionwizard.com/download.html) 4. Install win32diskimager [(Download)](https://win32diskimager.org) 5. Install 7zip [(Download)](https://www.7-zip.org/download.html) 6. Optional Install SD Card Formatter [(Download)](https://www.sdcard.org/downloads/formatter) ## 2) Setup 1. You need to remove all partitions of SD card using: **Partition Wizard** or **SD Card Formatter**. 2. If the CFW file is compressed on **.7zip** just extract using **7zip** before proceed. 3. Execute **Win32DiskImager**, select SD card, load the **.IMG** file and press **Write** button to proceed. 4. Once the image is burned on the SD card, open **Partition Wizard** and choose **Disk Management**. 5. Then right click on the **\"main\"** partition and choose **extend** (Set it to the maximum) and apply. 6. Insert the SD into your console and turn it on. If it boots it is a success. **Notes:** - The SD card need to be in **FAT 32** format. - If you have problems to access the **\"main\"** partition on Windows 7 or 8 please read [here](https://github.com/TriForceX/MiyooCFW/wiki/Miyoo-CFW#alternative-to-access-the-main-partition-on-windows-7-or-8) --- Korean Guide --- ## 1) \uc900\ube44\ubb3c 1. 8\uae30\uac00 \uc774\uc0c1\uc758 SD\uce74\ub4dc 2. \ucd5c\uc2e0 Community CFW v1.3.3 \uc774\ubbf8\uc9c0 ([Download](https://github.com/TriForceX/MiyooCFW/releases/download/1.3.3/bittboy-v2-v2.5-cfw-v1.3.3.7z)) 3. Partition Wizard [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.partitionwizard.com/download.html) 4. Win32diskimager [(\ub2e4\uc6b4\ub85c\ub4dc)](https://win32diskimager.org) 5. 7zip [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.7-zip.org/download.html) 6. \uc120\ud0dd\uc801 \uc124\uce58 SD Card Formatter [(\ub2e4\uc6b4\ub85c\ub4dc)](https://www.sdcard.org/downloads/formatter) ## 2) \uc124\uce58 1. **Partition Wizard** \ub610\ub294 **SD Card Formatter** \ub97c \uc0ac\uc6a9\ud558\uc5ec SD \uce74\ub4dc\uc758 \ubaa8\ub4e0 \ud30c\ud2f0\uc158\uc744 \uc81c\uac70\ud574\uc57c\ud569\ub2c8\ub2e4. 2. CFW \ud30c\uc77c\uc774 ** .7zip ** \uc555\ucd95 \ub41c \uacbd\uc6b0 \uc9c4\ud589\ud558\uae30 \uc804\uc5d0 _7zip_\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc555\ucd95\uc744 \ud480\uba74\ub429\ub2c8\ub2e4. 3. _win32diskimager_\ub97c \uc2e4\ud589\ud558\uace0, SD \uce74\ub4dc\ub97c \uc120\ud0dd\ud558\uace0, **. IMG ** \ud30c\uc77c\uc744\ub85c\ub4dc \ud55c \ub2e4\uc74c ** \uc4f0\uae30 ** \ubc84\ud2bc\uc744 \ub20c\ub7ec \uacc4\uc18d \uc9c4\ud589\ud558\uc2ed\uc2dc\uc624. 4. \uc774\ubbf8\uc9c0\uac00 SD \uce74\ub4dc\uc5d0 \uad6c\uc6cc\uc9c0\uba74 \ud30c\ud2f0\uc158 \ub9c8\ubc95\uc0ac\ub97c \uc5f4\uace0 \ub514\uc2a4\ud06c \uad00\ub9ac\ub97c \uc120\ud0dd\ud558\uc2ed\uc2dc\uc624. 5. _main_ \ud30c\ud2f0\uc158\uc744 \ub9c8\uc6b0\uc2a4 \uc624\ub978\ucabd \ub2e8\ucd94\ub85c \ud074\ub9ad\ud558\uace0 extend (\ucd5c\ub300\ub85c \uc124\uc815)\ub97c \uc120\ud0dd\ud558\uace0 \uc801\uc6a9\ud558\uc2ed\uc2dc\uc624. 6. SD\ub97c \uc0c8 Bittboy\uc5d0 \ub123\uace0 \ucf2d\ub2c8\ub2e4. \ubd80\ud305\ud558\uba74 \uc131\uacf5\ud569\ub2c8\ub2e4. **\ub178\ud2b8:** - SD \uce74\ub4dc\ub294 _FAT 32_ \ud615\uc2dd\uc774\uc5b4\uc57c\ud569\ub2c8\ub2e4. - Windows 7 \ub610\ub294 8\uc758 \"\uae30\ubcf8\"\ud30c\ud2f0\uc158\uc5d0 \uc561\uc138\uc2a4\ud558\ub294 \ub370 \ubb38\uc81c\uac00\uc788\ub294 \uacbd\uc6b0 [\uc5ec\uae30\ub97c \ud074\ub9ad\ud558\uc2ed\uc2dc\uc624](https://github.com/TriForceX/MiyooCFW/wiki/Miyoo-CFW#alternative-to-access-the-main-partition-on-windows-7-or-8) ---","title":"New BittBoy v2 and v2.5"},{"location":"Custom-Firmware-Setup/#new-bittboy-v1","text":"English Guide --- [![click here](https://user-images.githubusercontent.com/16083854/65471957-9d067080-de47-11e9-8ff7-ae0f43aee093.png)](https://www.youtube.com/watch?v=FjQquL3W99U) ## 1) Materials 1. New Bittboy - rev1 (early version) 2. SD card of 8GB or more 3. Knapping supplies (ironing, silverware) 4. Jumper cable (thin cable recommended) 5. Debian or Ubuntu environment computer ## 2) Work Order 1. Hardware mode (hwmod) 2. Building SPI flashing environment 3. SPI flashing 3. Burn image to SD card ## 3.1) Hardware Mod (hwmod) 1. Unscrew the 6 screws to release the case.\\ ![image1](https://user-images.githubusercontent.com/16083854/65471949-9bd54380-de47-11e9-879b-01f39a192205.png) 2. Check the display area. If the LCD connector is not on the display, it is Rev2.\\ ![image2](https://user-images.githubusercontent.com/16083854/65471950-9c6dda00-de47-11e9-9e80-6268b10f22dc.png) 3. Remove resistors R75, R76, R78. 4. DM, DP solder joint (lead to ground).\\ ![image3](https://user-images.githubusercontent.com/16083854/65471951-9c6dda00-de47-11e9-9cfc-f927d244e173.png) - before work\\ ![image4](https://user-images.githubusercontent.com/16083854/65471952-9c6dda00-de47-11e9-8680-0062a4c8f20b.png) - After work 5. Ground the jumper wire on the 2nd pin of the SPI IC chip.\\ ![image5](https://user-images.githubusercontent.com/16083854/65471953-9c6dda00-de47-11e9-81a6-e5f229a2bc8c.png) ## 3.2) Building SPI Flashing Environment 1. Install Debian or Ubuntu on your PC. 2. Run the terminal using an account with root privileges. 3. Enter in the following order: ``` sudo apt-get install git-core ``` 4. When the installation is complete, type in the following order: ``` git clone https://github.com/MiyooCFW/f1c100s_sunxi-tools cd f1c100s_sunxi-tools make clean && make ``` **Note:** If says you have invalid permissions use `sudo make install` ## 3.3) SPI Flashing 1. Connect New BittBoy to PC with USB. 2. Turn on the power while holding the jumper wire as shown in the picture. 3. Download the latest spi image from Steward-fu's github. https://github.com/MiyooCFW/miyoo_rel ``` SPI Image File Name Example > miyoo_spi_hwmod_1bit_ghostkey_20190216.bin ``` 4. Move downloaded SPI image to home. 5. Run the terminal. 6. Type the following: ``` sudo sunxi-fel -p spiflash-write 0 SPI image .bin ex> sudo ./sunxi-fel -p spiflash-write 0 miyoo_spi_hwmod_1bit_ghostkey_20190216.bin ``` 7. Wait until 100% is completed. 8. Disconnect the New BittBoy from the PC and turn off the power. 9. Assemble the New Bittboy main body and turn on the power. 10. If the following screen is displayed, it is success.\\ ![image6](https://user-images.githubusercontent.com/16083854/65471954-9c6dda00-de47-11e9-80f1-d2d3799d8587.png) # 3.4) Burning an Image to an SD Card 1. Download the latest MiOS image from Steward-fu's github. https://github.com/MiyooCFW/miyoo_rel ``` MiOS image file name example > MiOS_v1.0_20190203.zip, MiOS_v1.0_20190203.z01, MiOS_v1.0_20190203.z02 ... ``` **Note:** You can get an alternative more updated image/kernel from Christian Haitian repository [here](https://github.com/christianhaitian/BittBoyV1). 2. Remove all partitions of SD card and format it with FAT32 etc. (I used Windows Disk Management) 3. Download `win32diskimager` and install it. https://win32diskimager.org/ 4. Execute `win32diskimager`, select SD driver, load MiOS image and press **\"Write\"** button to proceed.\\ ![image7](https://user-images.githubusercontent.com/16083854/65471955-9c6dda00-de47-11e9-818f-3aac0e6989e2.png) 5. Once the image is burned, insert SD into New Bittboy and turn it on. If it boots like below, it is a success.\\ ![image8](https://user-images.githubusercontent.com/16083854/65471956-9d067080-de47-11e9-84c6-9a166f4f6eeb.png) --- Korean Guide --- [![click here](https://user-images.githubusercontent.com/16083854/65471957-9d067080-de47-11e9-8ff7-ae0f43aee093.png)](https://www.youtube.com/watch?v=FjQquL3W99U) ## 1) \uc900\ube44\ubb3c 1. New Bittboy - rev1(\ucd08\uae30 \ubc84\uc804) 2. 8\uae30\uac00 \uc774\uc0c1\uc758 SD\uce74\ub4dc 3. \ub0a9\ub5cc \uc6a9\ud488 (\uc778\ub450\uae30, \uc740\ub0a9) 4. \uc810\ud37c\ucf00\uc774\ube14(\uc587\uc740 \ucf00\uc774\ube14 \ucd94\ucc9c) 5. \ub370\ube44\uc548 or \uc6b0\ubd84\ud22c \ud658\uacbd\uc758 \ucef4\ud4e8\ud130 ## 2)\uc791\uc5c5 \uc21c\uc11c 1. \ud558\ub4dc\uc6e8\uc5b4 \ubaa8\ub4dc(hwmod) 2. SPI\ud50c\ub808\uc2f1 \ud658\uacbd \uad6c\ucd95 3. SPI\ud50c\ub808\uc2f1 3. SD \uce74\ub4dc\uc5d0 \uc774\ubbf8\uc9c0 \uad7d\uae30 ## 3.1 \ud558\ub4dc\uc6e8\uc5b4 \ubaa8\ub4dc(hwmod) 1. \ub098\uc0ac\ub97c \ud480\uc5b4 \ucf00\uc774\uc2a4\ub97c \ub54c\uc5b4\ub0c5\ub2c8\ub2e4.\\ ![image1](https://user-images.githubusercontent.com/16083854/65471949-9bd54380-de47-11e9-879b-01f39a192205.png) 2. \ud45c\uc2dc \ubd80\ubd84\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. LCD\ucee4\ub125\ud130\uac00 \ud45c\uc2dc\ubd80\ubd84\uc5d0 \uc5c6\ub2e4\uba74, Rev2\uc785\ub2c8\ub2e4.(\uac04\ub2e8\ud788 \uad6c\ubd84\ubc29\ubc95)\\ ![image2](https://user-images.githubusercontent.com/16083854/65471950-9c6dda00-de47-11e9-9e80-6268b10f22dc.png) 3. \uc800\ud56d R75, R76, R78\uc744 \uc81c\uac70\ud569\ub2c8\ub2e4. 4. DM, DP \uc194\ub354 \uc870\uc778\ud2b8\ud569\ub2c8\ub2e4.(\ub0a9\uc73c\ub85c \uc811\uc9c0\ud569\ub2c8\ub2e4.)\\ ![image3](https://user-images.githubusercontent.com/16083854/65471951-9c6dda00-de47-11e9-9cfc-f927d244e173.png) - -\uc218\uc815\uc804\\ ![image4](https://user-images.githubusercontent.com/16083854/65471952-9c6dda00-de47-11e9-8680-0062a4c8f20b.png) - -\uc218\uc815\ud6c4 5. SPI IC\uce69\uc758 2\ubc88\uc5d0 \uc810\ud37c\uc120\uc744 \uc811\uc9c0\ud569\ub2c8\ub2e4.\\ ![image5](https://user-images.githubusercontent.com/16083854/65471953-9c6dda00-de47-11e9-81a6-e5f229a2bc8c.png) ## 3.2) SPI\ud50c\ub808\uc2f1 \ud658\uacbd \uad6c\ucd95 1. PC\uc5d0 \ub370\ube44\uc548 or \uc6b0\ubd84\ud22c\ub97c \uc124\uce58\ud569\ub2c8\ub2e4. 2. root\uad8c\ud55c\uc774 \uc788\ub294 \uacc4\uc815\uc73c\ub85c \ud130\ubbf8\ub110\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. 3. \ub2e4\uc74c\uacfc \uac19\uc740 \uc21c\uc11c\ub300\ub85c \uc785\ub825\ud569\ub2c8\ub2e4. ``` sudo apt-get install git-core ``` 4. \uc124\uce58\uac00 \uc644\ub8cc\ub418\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \uc21c\uc11c\ub300\ub85c \uc785\ub825\ud569\ub2c8\ub2e4. ``` git clone https://github.com/MiyooCFW/f1c100s_sunxi-tools cd f1c100s_sunxi-tools make clean && make ``` **\ucc38\uace0**: \uc798\ubabb\ub41c \uc0ac\uc6a9 \uad8c\ud55c\uc774 \uc788\ub2e4\uace0 \ud45c\uc2dc\ub418\ub294 \uacbd\uc6b0 `sudo make install` ## 3.3) SPI\ud50c\ub808\uc2f1 1. USB\ub85c \ub274 \ube44\ud2b8\ubcf4\uc774(New Bittboy)\uc640 PC\ub97c \uc5f0\uacb0\ud569\ub2c8\ub2e4. 2. \uc0ac\uc9c4\uacfc \uac19\uc774 \uc810\ud37c\uc120\uc744 \uc811\ucd09\uc2dc\ud0a8 \uc0c1\ud0dc\uc5d0\uc11c \uc804\uc6d0\uc744 \ucf2d\ub2c8\ub2e4. 3. Steward-fu\uc758 github\uc5d0\uc11c \ucd5c\uc2e0 spi\uc774\ubbf8\uc9c0\ub97c \ub2e4\uc6b4\ub85c\ub4dc \ud569\ub2c8\ub2e4. https://github.com/MiyooCFW/miyoo_rel ``` SPI\uc774\ubbf8\uc9c0 \ud30c\uc77c\uba85 \uc608\uc2dc >miyoo_spi_hwmod_1bit_ghostkey_20190216.bin ``` 4. \ub2e4\uc6b4\ubc1b\uc740 SPI\uc774\ubbf8\uc9c0\ub97c \ud648\uc73c\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4. 5. \ud130\ubbf8\ub110\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. 6. \ub2e4\uc74c\uacfc \uac19\uc774 \uc785\ub825\ud569\ub2c8\ub2e4. ``` sudo sunxi-fel -p spiflash-write 0 SPI\uc774\ubbf8\uc9c0.bin ex>sudo sunxi-fel -p spiflash-write 0 miyoo_spi_hwmod_1bit_ghostkey_20190216.bin ``` 7. 100% \uc644\ub8cc\ub420\ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9bd\ub2c8\ub2e4. 8. \ub274 \ube44\ud2b8\ubcf4\uc774(New Bittboy)\uc640 PC\ub97c \uc5f0\uacb0 \ud574\uc81c\ud558\uace0 \uc804\uc6d0\uc744 \ub055\ub2c8\ub2e4. 9. \ub274 \ube44\ud2b8\ubcf4\uc774(New Bittboy) \ubcf8\uccb4\ub97c \uc870\ub9bd\ud558\uace0 \uc804\uc6d0\uc744 \ud0b5\ub2c8\ub2e4. 10. \ub2e4\uc74c\uacfc \uac19\uc740 \ud654\uba74\uc774 \ucd9c\ub825\ub418\uba74 \uc131\uacf5\uc785\ub2c8\ub2e4.\\ ![image6](https://user-images.githubusercontent.com/16083854/65471954-9c6dda00-de47-11e9-80f1-d2d3799d8587.png) ## 3.4) SD \uce74\ub4dc\uc5d0 \uc774\ubbf8\uc9c0 \uad7d\uae30 1. Steward-fu\uc758 github\uc5d0\uc11c \ucd5c\uc2e0 MiOS\uc774\ubbf8\uc9c0\ub97c \ub2e4\uc6b4\ub85c\ub4dc \ud569\ub2c8\ub2e4. https://github.com/MiyooCFW/miyoo_rel ``` MiOS\uc774\ubbf8\uc9c0 \ud30c\uc77c\uba85 \uc608\uc2dc >MiOS_v1.0_20190203.zip, MiOS_v1.0_20190203.z01, MiOS_v1.0_20190203.z02 ... ``` **\ucc38\uace0**: Christian Haitian \uc800\uc7a5\uc18c\uc5d0\uc11c \ub300\uccb4 \uc774\ubbf8\uc9c0 / \ucee4\ub110\uc744 \uc5c5\ub370\uc774\ud2b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 [\uc5ec\uae30\uc5d0](https://github.com/christianhaitian/BittBoyV1). 2. SD\uce74\ub4dc\uc758 \ud30c\ud2f0\uc158\uc744 \ubaa8\ub450 \uc81c\uac70\ud558\uace0 FAT32\ub4f1\uc73c\ub85c \ud3ec\ub9f7\ud569\ub2c8\ub2e4..(\ud544\uc790\ub294 \uc708\ub3c4\uc6b0 \ub514\uc2a4\ud06c\uad00\ub9ac\ub97c \uc774\uc6a9\ud588\uc2b5\ub2c8\ub2e4.) 3. `win32diskimager`\ub97c \ub2e4\uc6b4\ubc1b\uace0 \uc124\uce58\ud569\ub2c8\ub2e4. https://win32diskimager.org/ 4. `win32diskimager`\ub97c \uc2e4\ud589\ud558\uace0 SD\ub4dc\ub77c\uc774\ubc84\ub97c \uc120\ud0dd \ud6c4 MiOS\uc774\ubbf8\uc9c0\ub97c \ubd88\ub7ec\uc628 \ud6c4 \"Write\"\ubc84\ud2bc\uc744 \ub20c\ub7ec \uc9c4\ud589\ud569\ub2c8\ub2e4.\\ ![image7](https://user-images.githubusercontent.com/16083854/65471955-9c6dda00-de47-11e9-818f-3aac0e6989e2.png) 5. \uc774\ubbf8\uc9c0\uac00 \ub2e4 \uad6c\uc6cc\uc9c0\uba74 \ub274 \ube44\ud2b8\ubcf4\uc774(New Bittboy)\uc5d0 SD\ub97c \uc0bd\uc785\ud558\uace0 \uc804\uc6d0\uc744 \ud0b5\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc774 \ubd80\ud305\ub418\uba74 \uc131\uacf5\uc785\ub2c8\ub2e4.\\ ![image8](https://user-images.githubusercontent.com/16083854/65471956-9d067080-de47-11e9-84c6-9a166f4f6eeb.png) ---","title":"New BittBoy v1"},{"location":"Custom-Firmware-Update/","text":"This guide may be outdated! Since Version 2.0.0 Beta was pre-released the following guide will change or be updated and the current one may be only for the old version 1.3.3. Be careful! This guide is to update manually the version of an already installed Custom Firmware. Before start make sure you have installed 7-Zip Tool. (You can download here ) English Guide --- ## 1) First step (Main partition) 1. Download CFW image for Bittboy or Pocket Go [(here)](https://github.com/TriForceX/NewBittboyCFW#setup) 2. Extract the content of the zip file. 3. Right click on the **.img** file and then > 7-Zip > Open Archive. ![image 1](https://i.imgur.com/Z0V3nlk.jpg) 4. Left click on the file **\"3.fat\"** Then > Open. ![image 2](https://i.imgur.com/XS7mu45.jpg) 5. Select all the files (Except the \"roms\" folder or any other with a custom configuration. Check carefully as the save files are usually stored in each folder inside \"Roms\", but in some cases they are saved in some folders of the emulators. In the other hand, new games for DOS may come, so you must check and copy them manually). ![image 3](https://i.imgur.com/mAIGkef.jpg) 6. Copy all the files on the **\"main\"** partition of the SD. ![image 4](https://i.imgur.com/Zyc2EWR.jpg) ![image 5](https://i.imgur.com/9Xp74zn.jpg) ## 2) Final step (Boot partition) 1. Repeat the same process as above but now with the \"boot\" partition 2. Left click on the file **\"0.fat\"** Then > Open. 3. Copy all the files on the **\"boot\"** partition of the SD. ## 3) Notes - If the system ask if you want to replace, select **yes for all**. - Close windows then insert SD on your console. --- Korean Guide --- \uc774 \uc548\ub0b4\uc11c\ub294 \uc774\ubbf8 \uc124\uce58\ub41c \uc0ac\uc6a9\uc790 \uc815\uc758 \ud38c\uc6e8\uc5b4 \ubc84\uc804\uc744 \uc5c5\ub370\uc774\ud2b8\ud558\uae30\uc704\ud55c \uac83\uc785\ub2c8\ub2e4. **\ucc38\uace0 :** \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \"7-Zip\" \uc720\ud2f8\ub9ac\ud2f0\ub97c \uc124\uce58\ud574\uc57c \ud569\ub2c8\ub2e4. (\uc5ec\uae30\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc \ud560 \uc218 [\uc788\uc2b5\ub2c8\ub2e4](https://www.7-zip.org/download.html)) ## 1) \uccab \ub2e8\uacc4 (Main \ud30c\ud2f0\uc158) 1. Bittboy \ub610\ub294 Pocket Go \uc6a9 CFW \uc774\ubbf8\uc9c0 \ub2e4\uc6b4\ub85c\ub4dc [(\ubc14\ub85c \uc5ec\uae30\uc5d0)](https://github.com/TriForceX/NewBittboyCFW#setup) 2. .7z \ud30c\uc77c\uc744 \uc555\ucd95 \ud480\uc5b4\uc90d\ub2c8\ub2e4. 3. **.img** \ud30c\uc77c\uc744 \ub9c8\uc6b0\uc2a4 \uc624\ub978\ucabd \ubc84\ud2bc\uc73c\ub85c \ud074\ub9ad \ud55c \ub2e4\uc74c > 7-Zip > \"\uc555\ucd95\ud30c\uc77c \uc5f4\uae30\"\ub97c \ud074\ub9ad\ud569\ub2c8\ub2e4. ![image 1](https://i.imgur.com/Z0V3nlk.jpg) 4. **\"3.fat\"** \ud30c\uc77c\uc744 \ub354\ube14\ud074\ub9ad \ud558\uac70\ub098 \ub9c8\uc6b0\uc2a4 \uc624\ub978\ucabd \ubc84\ud2bc\uc744 \ub204\ub978 \ub2e4\uc74c \"\uc5f4\uae30(O)\"\ub97c \ud074\ub9ad\ub2c8\ub2e4. ![image 2](https://i.imgur.com/XS7mu45.jpg) 5. \ubaa8\ub4e0 \ud30c\uc77c\uc744 \uc120\ud0dd\ud558\uc2ed\uc2dc\uc624 (\"roms\"\ud3f4\ub354 \ub610\ub294 \uae30\ud0c0 \uc0ac\uc6a9\uc790 \uc815\uc758 \uad6c\uc131 \uc81c\uc678. \uc800\uc7a5 \ud30c\uc77c\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \"Roms\"\ub0b4\uc758 \uac01 \ud3f4\ub354\uc5d0 \uc800\uc7a5\ub418\ubbc0\ub85c\uc8fc\uc758\ud558\uc5ec \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \uadf8\ub7ec\ub098 \uacbd\uc6b0\uc5d0 \ub530\ub77c \uc5d0\ubbac\ub808\uc774\ud130\uc758 \uc77c\ubd80 \ud3f4\ub354\uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4. \ubc18\uba74\uc5d0 DOS \uc6a9 \uc0c8 \uac8c\uc784\uc774 \ucd9c\uc2dc \ub420 \uc218 \uc788\uc73c\ubbc0\ub85c \uc9c1\uc811 \uac80\ud1a0\ud558\uace0 \ubcf5\uc0ac\ud574\uc57c\ud569\ub2c8\ub2e4). ![image 3](https://i.imgur.com/mAIGkef.jpg) 6. SD\uc758 ** \"mainX\"** \ud30c\ud2f0\uc158\uc5d0\uc788\ub294 \ubaa8\ub4e0 \ud30c\uc77c\uc744 \ubcf5\uc0ac\ud558\uc2ed\uc2dc\uc624. ![image 4](https://i.imgur.com/Zyc2EWR.jpg) ![image 5](https://i.imgur.com/9Xp74zn.jpg) ## 2) \ub9c8\uc9c0\ub9c9 \ub2e8\uacc4 (Boot \ud30c\ud2f0\uc158) 1. \uc704\uc640 \ub3d9\uc77c\ud55c \uacfc\uc815\uc744 \ubc18\ubcf5\ud558\uc9c0\ub9cc \uc9c0\uae08\uc740 \"boot\" \ud30c\ud2f0\uc158\uc73c\ub85c. 2. ** \"0.fat\"** \ud30c\uc77c\uc744 \ub9c8\uc6b0\uc2a4 \uc67c\ucabd \ubc84\ud2bc\uc73c\ub85c \ud074\ub9ad \ud55c \ub2e4\uc74c> \uc5f4\uae30\ub97c \ud074\ub9ad\ud558\uc2ed\uc2dc\uc624. 3. SD\uc758 ** \"\ubd80\ud2b8\"** \ud30c\ud2f0\uc158\uc5d0\uc788\ub294 \ubaa8\ub4e0 \ud30c\uc77c\uc744 \ubcf5\uc0ac\ud569\ub2c8\ub2e4. ## 3) \ub178\ud2b8 - \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uad50\uccb4 \uc5ec\ubd80\ub97c \ubb3b\ub294 \uacbd\uc6b0 ** \ubaa8\ub450 ** \uc608\ub97c \uc120\ud0dd\ud558\uc2ed\uc2dc\uc624. - \ucc3d\uc744 \ub2eb\uace0 \ucf58\uc194\uc5d0 SD\ub97c \uc0bd\uc785\ud558\uc2ed\uc2dc\uc624. --- Spanish Guide --- Esta guia es para actualizar la version de un Custom Firmware ya instalado. **Nota:** Antes de empezar aseg\u00farate de tener instalado _7-Zip_. _(Puedes descargarlo [aqu\u00ed](https://www.7-zip.org/download.html))_ ## 1) Paso inicial (Partici\u00f3n Main) 1. Descarga la imagen de CFW para Bittboy o Pocket Go [(here)](https://github.com/TriForceX/NewBittboyCFW#setup) 2. Extrae los contenidos del archivo zip. 3. Haz click izquierdo en el archivo **.img** luego elije Abrir con > 7-Zip. ![image 1](https://i.imgur.com/Z0V3nlk.jpg) 4. Haz click izquierdo en **\"3.fat\"** y elije > Abrir. ![image 2](https://i.imgur.com/XS7mu45.jpg) 5. Selecciona todos los archivos (Excepto la carpeta \"Roms\" o cualquier otra con una config. editada. Revisa cuidadosamente ya que eneralmente los archivos de guardado son almacenados en cada carpeta dentro de \"Roms\", pero en algunos casos se guardan en algunas carpetas de los emuladores. Por otro lado puede que vengan nuevos juegos para DOS, por lo que debes revisar y copiarlos manualmente-). ![image 3](https://i.imgur.com/mAIGkef.jpg) 6. Copia todos los archivos en la particion **\"main\"** de la tarjeta SD ![image 4](https://i.imgur.com/Zyc2EWR.jpg) ![image 5](https://i.imgur.com/9Xp74zn.jpg) ## 2) Paso final (Partici\u00f3n Boot) 1. Repite el mismo proceso anterior pero ahora con la partici\u00f3n \"boot\". 2. Haz click izquierdo en **\"3.fat\"** y el\u00edje > Abrir. 3. Copia todos los archivos en la partici\u00f3n **\"boot\"** de la tarjeta SD. ## 3) Notas - Si el sistema te pregunta si deseas reemplazar, elije **si a todo**. - Cierra las ventanas y pon la tarjeta SD en tu consola. ---","title":"This guide may be outdated!"},{"location":"Custom-Firmware-Update/#this-guide-may-be-outdated","text":"Since Version 2.0.0 Beta was pre-released the following guide will change or be updated and the current one may be only for the old version 1.3.3. Be careful! This guide is to update manually the version of an already installed Custom Firmware. Before start make sure you have installed 7-Zip Tool. (You can download here ) English Guide --- ## 1) First step (Main partition) 1. Download CFW image for Bittboy or Pocket Go [(here)](https://github.com/TriForceX/NewBittboyCFW#setup) 2. Extract the content of the zip file. 3. Right click on the **.img** file and then > 7-Zip > Open Archive. ![image 1](https://i.imgur.com/Z0V3nlk.jpg) 4. Left click on the file **\"3.fat\"** Then > Open. ![image 2](https://i.imgur.com/XS7mu45.jpg) 5. Select all the files (Except the \"roms\" folder or any other with a custom configuration. Check carefully as the save files are usually stored in each folder inside \"Roms\", but in some cases they are saved in some folders of the emulators. In the other hand, new games for DOS may come, so you must check and copy them manually). ![image 3](https://i.imgur.com/mAIGkef.jpg) 6. Copy all the files on the **\"main\"** partition of the SD. ![image 4](https://i.imgur.com/Zyc2EWR.jpg) ![image 5](https://i.imgur.com/9Xp74zn.jpg) ## 2) Final step (Boot partition) 1. Repeat the same process as above but now with the \"boot\" partition 2. Left click on the file **\"0.fat\"** Then > Open. 3. Copy all the files on the **\"boot\"** partition of the SD. ## 3) Notes - If the system ask if you want to replace, select **yes for all**. - Close windows then insert SD on your console. --- Korean Guide --- \uc774 \uc548\ub0b4\uc11c\ub294 \uc774\ubbf8 \uc124\uce58\ub41c \uc0ac\uc6a9\uc790 \uc815\uc758 \ud38c\uc6e8\uc5b4 \ubc84\uc804\uc744 \uc5c5\ub370\uc774\ud2b8\ud558\uae30\uc704\ud55c \uac83\uc785\ub2c8\ub2e4. **\ucc38\uace0 :** \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \"7-Zip\" \uc720\ud2f8\ub9ac\ud2f0\ub97c \uc124\uce58\ud574\uc57c \ud569\ub2c8\ub2e4. (\uc5ec\uae30\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc \ud560 \uc218 [\uc788\uc2b5\ub2c8\ub2e4](https://www.7-zip.org/download.html)) ## 1) \uccab \ub2e8\uacc4 (Main \ud30c\ud2f0\uc158) 1. Bittboy \ub610\ub294 Pocket Go \uc6a9 CFW \uc774\ubbf8\uc9c0 \ub2e4\uc6b4\ub85c\ub4dc [(\ubc14\ub85c \uc5ec\uae30\uc5d0)](https://github.com/TriForceX/NewBittboyCFW#setup) 2. .7z \ud30c\uc77c\uc744 \uc555\ucd95 \ud480\uc5b4\uc90d\ub2c8\ub2e4. 3. **.img** \ud30c\uc77c\uc744 \ub9c8\uc6b0\uc2a4 \uc624\ub978\ucabd \ubc84\ud2bc\uc73c\ub85c \ud074\ub9ad \ud55c \ub2e4\uc74c > 7-Zip > \"\uc555\ucd95\ud30c\uc77c \uc5f4\uae30\"\ub97c \ud074\ub9ad\ud569\ub2c8\ub2e4. ![image 1](https://i.imgur.com/Z0V3nlk.jpg) 4. **\"3.fat\"** \ud30c\uc77c\uc744 \ub354\ube14\ud074\ub9ad \ud558\uac70\ub098 \ub9c8\uc6b0\uc2a4 \uc624\ub978\ucabd \ubc84\ud2bc\uc744 \ub204\ub978 \ub2e4\uc74c \"\uc5f4\uae30(O)\"\ub97c \ud074\ub9ad\ub2c8\ub2e4. ![image 2](https://i.imgur.com/XS7mu45.jpg) 5. \ubaa8\ub4e0 \ud30c\uc77c\uc744 \uc120\ud0dd\ud558\uc2ed\uc2dc\uc624 (\"roms\"\ud3f4\ub354 \ub610\ub294 \uae30\ud0c0 \uc0ac\uc6a9\uc790 \uc815\uc758 \uad6c\uc131 \uc81c\uc678. \uc800\uc7a5 \ud30c\uc77c\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \"Roms\"\ub0b4\uc758 \uac01 \ud3f4\ub354\uc5d0 \uc800\uc7a5\ub418\ubbc0\ub85c\uc8fc\uc758\ud558\uc5ec \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \uadf8\ub7ec\ub098 \uacbd\uc6b0\uc5d0 \ub530\ub77c \uc5d0\ubbac\ub808\uc774\ud130\uc758 \uc77c\ubd80 \ud3f4\ub354\uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4. \ubc18\uba74\uc5d0 DOS \uc6a9 \uc0c8 \uac8c\uc784\uc774 \ucd9c\uc2dc \ub420 \uc218 \uc788\uc73c\ubbc0\ub85c \uc9c1\uc811 \uac80\ud1a0\ud558\uace0 \ubcf5\uc0ac\ud574\uc57c\ud569\ub2c8\ub2e4). ![image 3](https://i.imgur.com/mAIGkef.jpg) 6. SD\uc758 ** \"mainX\"** \ud30c\ud2f0\uc158\uc5d0\uc788\ub294 \ubaa8\ub4e0 \ud30c\uc77c\uc744 \ubcf5\uc0ac\ud558\uc2ed\uc2dc\uc624. ![image 4](https://i.imgur.com/Zyc2EWR.jpg) ![image 5](https://i.imgur.com/9Xp74zn.jpg) ## 2) \ub9c8\uc9c0\ub9c9 \ub2e8\uacc4 (Boot \ud30c\ud2f0\uc158) 1. \uc704\uc640 \ub3d9\uc77c\ud55c \uacfc\uc815\uc744 \ubc18\ubcf5\ud558\uc9c0\ub9cc \uc9c0\uae08\uc740 \"boot\" \ud30c\ud2f0\uc158\uc73c\ub85c. 2. ** \"0.fat\"** \ud30c\uc77c\uc744 \ub9c8\uc6b0\uc2a4 \uc67c\ucabd \ubc84\ud2bc\uc73c\ub85c \ud074\ub9ad \ud55c \ub2e4\uc74c> \uc5f4\uae30\ub97c \ud074\ub9ad\ud558\uc2ed\uc2dc\uc624. 3. SD\uc758 ** \"\ubd80\ud2b8\"** \ud30c\ud2f0\uc158\uc5d0\uc788\ub294 \ubaa8\ub4e0 \ud30c\uc77c\uc744 \ubcf5\uc0ac\ud569\ub2c8\ub2e4. ## 3) \ub178\ud2b8 - \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uad50\uccb4 \uc5ec\ubd80\ub97c \ubb3b\ub294 \uacbd\uc6b0 ** \ubaa8\ub450 ** \uc608\ub97c \uc120\ud0dd\ud558\uc2ed\uc2dc\uc624. - \ucc3d\uc744 \ub2eb\uace0 \ucf58\uc194\uc5d0 SD\ub97c \uc0bd\uc785\ud558\uc2ed\uc2dc\uc624. --- Spanish Guide --- Esta guia es para actualizar la version de un Custom Firmware ya instalado. **Nota:** Antes de empezar aseg\u00farate de tener instalado _7-Zip_. _(Puedes descargarlo [aqu\u00ed](https://www.7-zip.org/download.html))_ ## 1) Paso inicial (Partici\u00f3n Main) 1. Descarga la imagen de CFW para Bittboy o Pocket Go [(here)](https://github.com/TriForceX/NewBittboyCFW#setup) 2. Extrae los contenidos del archivo zip. 3. Haz click izquierdo en el archivo **.img** luego elije Abrir con > 7-Zip. ![image 1](https://i.imgur.com/Z0V3nlk.jpg) 4. Haz click izquierdo en **\"3.fat\"** y elije > Abrir. ![image 2](https://i.imgur.com/XS7mu45.jpg) 5. Selecciona todos los archivos (Excepto la carpeta \"Roms\" o cualquier otra con una config. editada. Revisa cuidadosamente ya que eneralmente los archivos de guardado son almacenados en cada carpeta dentro de \"Roms\", pero en algunos casos se guardan en algunas carpetas de los emuladores. Por otro lado puede que vengan nuevos juegos para DOS, por lo que debes revisar y copiarlos manualmente-). ![image 3](https://i.imgur.com/mAIGkef.jpg) 6. Copia todos los archivos en la particion **\"main\"** de la tarjeta SD ![image 4](https://i.imgur.com/Zyc2EWR.jpg) ![image 5](https://i.imgur.com/9Xp74zn.jpg) ## 2) Paso final (Partici\u00f3n Boot) 1. Repite el mismo proceso anterior pero ahora con la partici\u00f3n \"boot\". 2. Haz click izquierdo en **\"3.fat\"** y el\u00edje > Abrir. 3. Copia todos los archivos en la partici\u00f3n **\"boot\"** de la tarjeta SD. ## 3) Notas - Si el sistema te pregunta si deseas reemplazar, elije **si a todo**. - Cierra las ventanas y pon la tarjeta SD en tu consola. ---","title":"This guide may be outdated!"},{"location":"DosBox-Setup/","text":"Important note You can find an alternative setup for DOSBox on Miyoo and see some further information on setting up MS-DOS software in this thread . DOSBox boots to the menu system 'LaunchBox for MS-DOS SE 2.0' To play the included game (Shareware Commander Keen Episode 1 \"Marooned on Mars\") Press 'start' Controls: - The keys to launch, quit and play are mapped - Bittboy buttons map as: PocketGo: Bittboy: Key: Up Up Up Down Down Down Left Left Left Right Right Right A TA LALT B A LCTRL X TB LSHIFT Y B Space Start Start RETURN Select Select ESCAPE Reset R RCTRL When another key needs to be pressed (eg to quit the game) the On Screen Keyboard (OSK) must be used Opening (or closing) the OSK: Bittboy: Press Start+B at the same time PocketGo: L trigger To hold 2 or more keys you just need to press B once on the desired key, that will hold the key (a green border will appear), then you press the other key with A. To remove the old just press B again. Exiting from DOSbox: 1. First Quit Commander Keen: - Press select. Use the OSK when prompted to press a key to quit 2. Then Exit the LaunchBox menu: - Press 'TA' ('A' on pocket-go) to select the 'File' menu, press start to accept. Use the dpad to choose 'Exit', press start to accept Adding new DOS games: - DOSBOX uses '\\roms\\PC\\DOS' as 'C:\\' - DOSBOX configuration file location: '\\emus\\dosbox\\dosbox.conf' - Place the new game folder within '\\roms\\PC\\DOS' - Edit '\\roms\\PC\\DOS\\LAUNCHBX\\LAUNCHBX.TXT' to add the new game to the LaunchBox menu - See example file 'LAUNCHBX - Example.TXT' in the same location","title":"DosBox Setup"},{"location":"DosBox-Setup/#important-note","text":"You can find an alternative setup for DOSBox on Miyoo and see some further information on setting up MS-DOS software in this thread . DOSBox boots to the menu system 'LaunchBox for MS-DOS SE 2.0' To play the included game (Shareware Commander Keen Episode 1 \"Marooned on Mars\") Press 'start' Controls: - The keys to launch, quit and play are mapped - Bittboy buttons map as: PocketGo: Bittboy: Key: Up Up Up Down Down Down Left Left Left Right Right Right A TA LALT B A LCTRL X TB LSHIFT Y B Space Start Start RETURN Select Select ESCAPE Reset R RCTRL When another key needs to be pressed (eg to quit the game) the On Screen Keyboard (OSK) must be used Opening (or closing) the OSK: Bittboy: Press Start+B at the same time PocketGo: L trigger To hold 2 or more keys you just need to press B once on the desired key, that will hold the key (a green border will appear), then you press the other key with A. To remove the old just press B again. Exiting from DOSbox: 1. First Quit Commander Keen: - Press select. Use the OSK when prompted to press a key to quit 2. Then Exit the LaunchBox menu: - Press 'TA' ('A' on pocket-go) to select the 'File' menu, press start to accept. Use the dpad to choose 'Exit', press start to accept Adding new DOS games: - DOSBOX uses '\\roms\\PC\\DOS' as 'C:\\' - DOSBOX configuration file location: '\\emus\\dosbox\\dosbox.conf' - Place the new game folder within '\\roms\\PC\\DOS' - Edit '\\roms\\PC\\DOS\\LAUNCHBX\\LAUNCHBX.TXT' to add the new game to the LaunchBox menu - See example file 'LAUNCHBX - Example.TXT' in the same location","title":"Important note"},{"location":"Emulator-Info/","text":"This guide may be outdated! Since Version 2.0.0 Beta was pre-released the following guide will change or be updated and the current one may be only for the old version 1.3.3. Be careful! Notes: - ROM selector location can be changed for each emulator by pressing select, choosing edit, then changing 'selector path' - The 'Icon Name' is the png image file name required for the emulator when creating themes (located in gmenu2x\\skins\\ \\icons) Emulator Title: Emulator: Supported Systems: ROM Location (default): Zipped ROM support? Save Location: BIOS: Notes: GameBoy Gambatte-Current version (20190621) Gameboy, Gameboy Color /roms/GB/ Yes /.gambatte/saves/ /.gambatte/bios/BIOS Filenames: \u2018gb_bios.bin\u2019, \u2018gbc_bios.bin\u2019-Only required to allow you to enable the gameboy boot \u2018splash screen\u2019 within gambatte settings GBA GPSP Gameboy Advance /roms/GBA/ Yes /emus/gpsp_gameblabla/gba_bios.bin NES FCEUX Nintendeo Entertainment System, FDS /roms/NES/ Yes Saves: /.fceux/sav/States: /.fceux/fcs/ /.fceux/disksys.rom-Only required for FDS SNES SNES9x4d Super Nintendo /roms/SNES/ Yes /.snes9x4d/-Older versions use /.snes96_snapshots/ SMS/GG SMS Plus GX Sega Master System, Game Gear /roms/SMS/ Yes Saves: /.smsplus/sram/States: /.smsplus/state/ /emus/smsplusgx/bios/BIOS.col MEGADRIVE Picodrive Megadrive (Genesis), Mega-CD (Sega-CD), Sega Master System /roms/SMD/ Yes (for Megadrive and SMS only, not Mega-CD) States: /.picodrive/mds/ /.picodrive/ Filenames for MegaCD (Sega-CD): \u2018bios_CD_E.bin\u2019, \u2018bios_CD_J.bin\u2019, \u2018bios_CD_U.bin\u2019. For non-MSU CD game you need: \u2018us_scd1_9210.bin\u2019, \u2018us_scd2_9306.bin\u2019, \u2018SegaCDBIOS9303.bin\u2019, \u2018eu_mcd1_9210.bin\u2019, \u2018eu_mcd2_9303.bin\u2019, \u2018eu_mcd2_9306.bin\u2019, \u2018jp_mcd1_9112.bin\u2019, \u2018jp_mcd1_9111.bin\u2019 Mega-CD (Sega-CD) games should be in .bin/.cue format 2600 Stella Atari 2600 /roms/2600/ Yes LYNX Handy Atari Lynx /roms/LYNX/ Yes /.handy/ PC ENGINE Temper PC Engine (Turbogfx-16) /roms/PCE/ No States: /.temper/save_states/ /.temper/syscards/syscard3.pce-Only required for CD based games ARCADE MAME4All Arcade \u2013 Mame2000 (0.37b5) Set /roms/MAME/ Yes N/A Uses the Internal MAME ROM selector NEOGEO GNGeo NEOGEO MVS / AES /roms/NEOGEO/ Yes /.gngeo/ /roms/NEOGEO/NEOGEO.zip-NEOGEO.zip from FBA 0.2.97.39 works DOS DOSBox DOS (PC) N/A No Uses '/roms/PC/DOS/' as 'C:\\' POKEMINI Pokemini Pokemon Mini /roms/POKEMINI/ Yes WSWAN Oswan WonderSwan /roms/WSWAN/ No PS1 PCSX ReARMed Playstation 1 /roms/PS1/ No /emus/pcsx_rearmed/bios/SCPH1001.BIN-Without a BIOS file HLE is used (slower, less compatible)-To enable the BIOS within the emulator: Options [BIOS/Plugins] GB(RUMBLE) Gambatte -Older version, rumble support Gameboy, Gameboy Color /roms/GB/ Yes Rumble support, less other features.Main 'gameboy' emulator is recommended GB(OHBOY) Ohboy Gameboy, Gameboy Color /roms/GB/ Yes /.ohboy/saves/ Alternative Gameboy/Gameboy Color emulator GBA(RUMBLE) GPSP-Older version, rumble support Gameboy Advance /roms/GBA/ Yes /emus/gpsp/gba_bios.bin Rumble support, less other features.Main 'GBA' emulator is recommended VECTREX Vecxemu GCE Vectrex /roms/VECTREX/ No States: /.vecxemu/sstates/ /.vecxemu/rom.dat","title":"Emulator Info"},{"location":"Emulator-Info/#this-guide-may-be-outdated","text":"Since Version 2.0.0 Beta was pre-released the following guide will change or be updated and the current one may be only for the old version 1.3.3. Be careful! Notes: - ROM selector location can be changed for each emulator by pressing select, choosing edit, then changing 'selector path' - The 'Icon Name' is the png image file name required for the emulator when creating themes (located in gmenu2x\\skins\\ \\icons) Emulator Title: Emulator: Supported Systems: ROM Location (default): Zipped ROM support? Save Location: BIOS: Notes: GameBoy Gambatte-Current version (20190621) Gameboy, Gameboy Color /roms/GB/ Yes /.gambatte/saves/ /.gambatte/bios/BIOS Filenames: \u2018gb_bios.bin\u2019, \u2018gbc_bios.bin\u2019-Only required to allow you to enable the gameboy boot \u2018splash screen\u2019 within gambatte settings GBA GPSP Gameboy Advance /roms/GBA/ Yes /emus/gpsp_gameblabla/gba_bios.bin NES FCEUX Nintendeo Entertainment System, FDS /roms/NES/ Yes Saves: /.fceux/sav/States: /.fceux/fcs/ /.fceux/disksys.rom-Only required for FDS SNES SNES9x4d Super Nintendo /roms/SNES/ Yes /.snes9x4d/-Older versions use /.snes96_snapshots/ SMS/GG SMS Plus GX Sega Master System, Game Gear /roms/SMS/ Yes Saves: /.smsplus/sram/States: /.smsplus/state/ /emus/smsplusgx/bios/BIOS.col MEGADRIVE Picodrive Megadrive (Genesis), Mega-CD (Sega-CD), Sega Master System /roms/SMD/ Yes (for Megadrive and SMS only, not Mega-CD) States: /.picodrive/mds/ /.picodrive/ Filenames for MegaCD (Sega-CD): \u2018bios_CD_E.bin\u2019, \u2018bios_CD_J.bin\u2019, \u2018bios_CD_U.bin\u2019. For non-MSU CD game you need: \u2018us_scd1_9210.bin\u2019, \u2018us_scd2_9306.bin\u2019, \u2018SegaCDBIOS9303.bin\u2019, \u2018eu_mcd1_9210.bin\u2019, \u2018eu_mcd2_9303.bin\u2019, \u2018eu_mcd2_9306.bin\u2019, \u2018jp_mcd1_9112.bin\u2019, \u2018jp_mcd1_9111.bin\u2019 Mega-CD (Sega-CD) games should be in .bin/.cue format 2600 Stella Atari 2600 /roms/2600/ Yes LYNX Handy Atari Lynx /roms/LYNX/ Yes /.handy/ PC ENGINE Temper PC Engine (Turbogfx-16) /roms/PCE/ No States: /.temper/save_states/ /.temper/syscards/syscard3.pce-Only required for CD based games ARCADE MAME4All Arcade \u2013 Mame2000 (0.37b5) Set /roms/MAME/ Yes N/A Uses the Internal MAME ROM selector NEOGEO GNGeo NEOGEO MVS / AES /roms/NEOGEO/ Yes /.gngeo/ /roms/NEOGEO/NEOGEO.zip-NEOGEO.zip from FBA 0.2.97.39 works DOS DOSBox DOS (PC) N/A No Uses '/roms/PC/DOS/' as 'C:\\' POKEMINI Pokemini Pokemon Mini /roms/POKEMINI/ Yes WSWAN Oswan WonderSwan /roms/WSWAN/ No PS1 PCSX ReARMed Playstation 1 /roms/PS1/ No /emus/pcsx_rearmed/bios/SCPH1001.BIN-Without a BIOS file HLE is used (slower, less compatible)-To enable the BIOS within the emulator: Options [BIOS/Plugins] GB(RUMBLE) Gambatte -Older version, rumble support Gameboy, Gameboy Color /roms/GB/ Yes Rumble support, less other features.Main 'gameboy' emulator is recommended GB(OHBOY) Ohboy Gameboy, Gameboy Color /roms/GB/ Yes /.ohboy/saves/ Alternative Gameboy/Gameboy Color emulator GBA(RUMBLE) GPSP-Older version, rumble support Gameboy Advance /roms/GBA/ Yes /emus/gpsp/gba_bios.bin Rumble support, less other features.Main 'GBA' emulator is recommended VECTREX Vecxemu GCE Vectrex /roms/VECTREX/ No States: /.vecxemu/sstates/ /.vecxemu/rom.dat","title":"This guide may be outdated!"},{"location":"FBA-A320/","text":"This emulator uses 0.2.96.86 FBA romset Standard keymapping: D-PAD - D-PAD SELECT - Coin1 START - Start1 SELECT+START - Start2 A - Fire1 B - Fire2 X - Fire3 Y - Fire4 L - Fire5 R - Fire6 L+R+Y - Show/hide fps L+R+A - Quick state load L+R+B - Quick state save L+R+SELECT - Service menu L+R+START - FBA menu (key config and load/save states)","title":"FBA-A320"},{"location":"Fontixel/","text":"Skin pack made by Fontes for the RetroFW firmware that goes on some emulator handhelds. However, it will work on just about anything that runs the GMenu2x/GMenuNX frontend, minus a few minor iconography inconsistencies. Some of the handhelds this will work on include: - LDK - RS97 Retrogame - Bittboy V2 You can download the Skin Pack here To install simply copy the files in the same order as the .zip contents.","title":"Fontixel"},{"location":"GPSP/","text":"GPSP Game Boy Advance Emulator Note: This list may not be 100% accurate, some games may crash at certain point, if you have an update for this list tell us on our Discord server here or in this thread . Games Performance Notes Mario Kart Super Circuit (USA) V.1 Good SpongeBob Square Pants Super Sponge (USA) V.1 Good Sonic Advance (Europe) V.1 Good Small audio glitches (When you enter in a door) Super Mario Advance: Super Mario Bros 2 (USA) V.1 Good Small graphical glitches (In some text boxes - switch palace and BONUS entering screen, the \"distortion effect\" during the intro of a level is not present) Super Mario Advance 2: Super Mario World (USA) V.1 Good Small graphical glitches (During the Level intro the screen is blue instead of black) Super Mario Advance 4: Super Mario Bros 3 (USA, E-Reader Patch) V.1.1 Good Pok\u00e9mon Sapphire (USA) V.1 Good Missing graphic effects and small audio glitches when your HP is low (The distortion effect when your pokemon gets poisoned is not present) Pok\u00e9mon Pinball (Europe) V.1 Good Rayman 3 (USA) V.1 Good Text in text boxes are completely gone Crash Bandicoot The Huge Adventure V.1 Good Golden Sun Good Crashes after defeat the boss Kraken The Legend of Zelda - The Minish Cap Good Crashes while playing the last dungeon Mario Golf - Advance Tour Good Crashes while you are creating a new character Mario Tennis - Power Tour Good Crashes while you are creating a new character Banjo-Kazooie - Grunty's Revenge Good Crashes after the title screen Castlevania - Harmony of Dissonance Good Crashes in the final battle against Dracula Batman Begins Good Crashes just after the fire scene on the first level Teen Titans Good Has graphical rendering issues right at the start (in the intro and game menu)","title":"gpSP"},{"location":"GPSP/#gpsp-game-boy-advance-emulator","text":"Note: This list may not be 100% accurate, some games may crash at certain point, if you have an update for this list tell us on our Discord server here or in this thread . Games Performance Notes Mario Kart Super Circuit (USA) V.1 Good SpongeBob Square Pants Super Sponge (USA) V.1 Good Sonic Advance (Europe) V.1 Good Small audio glitches (When you enter in a door) Super Mario Advance: Super Mario Bros 2 (USA) V.1 Good Small graphical glitches (In some text boxes - switch palace and BONUS entering screen, the \"distortion effect\" during the intro of a level is not present) Super Mario Advance 2: Super Mario World (USA) V.1 Good Small graphical glitches (During the Level intro the screen is blue instead of black) Super Mario Advance 4: Super Mario Bros 3 (USA, E-Reader Patch) V.1.1 Good Pok\u00e9mon Sapphire (USA) V.1 Good Missing graphic effects and small audio glitches when your HP is low (The distortion effect when your pokemon gets poisoned is not present) Pok\u00e9mon Pinball (Europe) V.1 Good Rayman 3 (USA) V.1 Good Text in text boxes are completely gone Crash Bandicoot The Huge Adventure V.1 Good Golden Sun Good Crashes after defeat the boss Kraken The Legend of Zelda - The Minish Cap Good Crashes while playing the last dungeon Mario Golf - Advance Tour Good Crashes while you are creating a new character Mario Tennis - Power Tour Good Crashes while you are creating a new character Banjo-Kazooie - Grunty's Revenge Good Crashes after the title screen Castlevania - Harmony of Dissonance Good Crashes in the final battle against Dracula Batman Begins Good Crashes just after the fire scene on the first level Teen Titans Good Has graphical rendering issues right at the start (in the intro and game menu)","title":"GPSP Game Boy Advance Emulator"},{"location":"GamBatte/","text":"About The next list are some features (pros/cons) of this emulator. Better Audio (Voice Samples, etc.) More Palettes (more than Ohboy) Better Border Support (no conversion) Can preview Borders, Filters, Palettes Scales to Borders Bilinear Filtering or Sharp Pixels Simpler UI Can easily preview Save/Load States Cheats support Boots Bios (authentic Gamboy boot up) Now with Two different Control Schemes Simulated Ghosting per device Less Screen tearing/ Better Framerate Mono audio only Colors are off (like Color Correction baked in) Missing 2 Scalers existing in ohBoy No GBA Enhanced Support (can hack it in tho) Only a few filters (needs conversion) Thanks to da1writer for this list. Custom Palettes This tutorial will help you install custom palettes for the bittboy emulator GamBatte . You can download here: - Version 2 (Lastest) here - Version 1 (Old) here . Note: If you already have the version 1 we highly recommend you to make a clean install and DO NOT copy over the old files. If you has favorites from the previous version just hold onto them to make sure it's in the new one. Notes 1. OhBoy and GamBatte palettes arent interchangeable. You need the palettes for the correct emulator. 2. The .BMP Image Files are previews and can be added to the folder with out messing up the emulator. 3. If you dont have the said .ohboy or .gambatte folders you have to run the bittboy first so it creates the directory. 4. Alternatively on Windows you can open command prompt and type [mkdir .gambatte] This will create the folder in the C:\\Users\\myuser\\.gambatte Auto Palette selection - The Gambatte emulator now (since version 20190621) supports automatic loading of palettes on a per-game basis - This feature can be enabled from the gambatte settings menu (settings | mono palette | auto) - The Palette file (.pal) in '.gambatte\\palettes' with a filename matching the loaded ROM will be automatically used - EG for ROM 'gameA.gb', the palette file '.gambatte\\palettes\\gameA.pal' will be used - Palette files used by original GBC/GBA consoles (when playing monochrome GB games) can be found in '.gambatte\\palettes\\GBC & SGB Palettes\\GBC Assigned Palettes\\'. - See 'GB on GBC Assigned Palette Guide.txt' in this same location for information on which games use which palette - Copy the desired palette to '.gambatte\\palettes' and rename to match the game ROM How to install 1. Plug in your Micro SD card to your Computer with the Bittboy CFW already installed. 2. Open the Main drive of the Micro SD card. 3. Create or find the .gambatte folder in the main drive. 4. Create or find the palettes folder in the .gambatte folder 5. Drag and drop all the .pal files into this folder. Directory main/.gambatte/palettes/<.pal files> Developer Notes This set of 30 custom palettes was made by 2TMAU5 so you can pick and choose what you like since there are preview images. It also is intended to have all the palettes so it will be fun to choose from. Also included in another folder is Hi-Ban Sample Palettes, these were for the GCW port so I made preview images so you can choose what to include from there as well. Requests If you have any personal requests we can make a second pack. Just message 2TMAU5#9723 on Discord.","title":"GamBatte"},{"location":"GamBatte/#about","text":"The next list are some features (pros/cons) of this emulator. Better Audio (Voice Samples, etc.) More Palettes (more than Ohboy) Better Border Support (no conversion) Can preview Borders, Filters, Palettes Scales to Borders Bilinear Filtering or Sharp Pixels Simpler UI Can easily preview Save/Load States Cheats support Boots Bios (authentic Gamboy boot up) Now with Two different Control Schemes Simulated Ghosting per device Less Screen tearing/ Better Framerate Mono audio only Colors are off (like Color Correction baked in) Missing 2 Scalers existing in ohBoy No GBA Enhanced Support (can hack it in tho) Only a few filters (needs conversion) Thanks to da1writer for this list.","title":"About"},{"location":"GamBatte/#custom-palettes","text":"This tutorial will help you install custom palettes for the bittboy emulator GamBatte . You can download here: - Version 2 (Lastest) here - Version 1 (Old) here . Note: If you already have the version 1 we highly recommend you to make a clean install and DO NOT copy over the old files. If you has favorites from the previous version just hold onto them to make sure it's in the new one. Notes 1. OhBoy and GamBatte palettes arent interchangeable. You need the palettes for the correct emulator. 2. The .BMP Image Files are previews and can be added to the folder with out messing up the emulator. 3. If you dont have the said .ohboy or .gambatte folders you have to run the bittboy first so it creates the directory. 4. Alternatively on Windows you can open command prompt and type [mkdir .gambatte] This will create the folder in the C:\\Users\\myuser\\.gambatte Auto Palette selection - The Gambatte emulator now (since version 20190621) supports automatic loading of palettes on a per-game basis - This feature can be enabled from the gambatte settings menu (settings | mono palette | auto) - The Palette file (.pal) in '.gambatte\\palettes' with a filename matching the loaded ROM will be automatically used - EG for ROM 'gameA.gb', the palette file '.gambatte\\palettes\\gameA.pal' will be used - Palette files used by original GBC/GBA consoles (when playing monochrome GB games) can be found in '.gambatte\\palettes\\GBC & SGB Palettes\\GBC Assigned Palettes\\'. - See 'GB on GBC Assigned Palette Guide.txt' in this same location for information on which games use which palette - Copy the desired palette to '.gambatte\\palettes' and rename to match the game ROM How to install 1. Plug in your Micro SD card to your Computer with the Bittboy CFW already installed. 2. Open the Main drive of the Micro SD card. 3. Create or find the .gambatte folder in the main drive. 4. Create or find the palettes folder in the .gambatte folder 5. Drag and drop all the .pal files into this folder. Directory main/.gambatte/palettes/<.pal files> Developer Notes This set of 30 custom palettes was made by 2TMAU5 so you can pick and choose what you like since there are preview images. It also is intended to have all the palettes so it will be fun to choose from. Also included in another folder is Hi-Ban Sample Palettes, these were for the GCW port so I made preview images so you can choose what to include from there as well. Requests If you have any personal requests we can make a second pack. Just message 2TMAU5#9723 on Discord.","title":"Custom Palettes"},{"location":"Get-the-prebuilt-SDK-from-GH-actions/","text":"Download the prebuilt toolchain from GH action artifacts Precondition You have to be logged on GitHub Go to https://github.com/MiyooCFW/buildroot/actions and select the latest action From the artifacts section download SDKs Once you have downloaded it, extract it gzip -d arm-miyoo-linux-uclibcgnueabi_sdk-buildroot.tar.gz tar xvf arm-miyoo-linux-uclibcgnueabi_sdk-buildroot.tar mv arm-miyoo-linux-uclibcgnueabi_sdk-buildroot miyoo sudo cp -a miyoo /opt/ /opt/miyoo/relocate-sdk.sh Your SDK is ready to use","title":"Get the prebuilt SDK from GH actions"},{"location":"Get-the-prebuilt-SDK-from-GH-actions/#download-the-prebuilt-toolchain-from-gh-action-artifacts","text":"","title":"Download the prebuilt toolchain from GH action artifacts"},{"location":"Get-the-prebuilt-SDK-from-GH-actions/#precondition","text":"You have to be logged on GitHub Go to https://github.com/MiyooCFW/buildroot/actions and select the latest action From the artifacts section download SDKs Once you have downloaded it, extract it gzip -d arm-miyoo-linux-uclibcgnueabi_sdk-buildroot.tar.gz tar xvf arm-miyoo-linux-uclibcgnueabi_sdk-buildroot.tar mv arm-miyoo-linux-uclibcgnueabi_sdk-buildroot miyoo sudo cp -a miyoo /opt/ /opt/miyoo/relocate-sdk.sh Your SDK is ready to use","title":"Precondition"},{"location":"Ghost-Key-Fix/","text":"This operation requires soldering and was made to work on 2nd console revisions. One mistake can destroy the board forever. Only those who have knowledge of soldering are encouraged to work. Thanks to Augen(\ud788\ud79b\ub9c8\uc2a4\ud130) for this guide. Warning: \\ The PCB v1 method of modification will operate normally immediately after booting, but soon the TA will be pressed. 1) Rear PCB (Cut red lines) 2) Front PCB (Cut red lines) 3) Operational Test You can watch the proof of concept in the next video:","title":"Ghost Key Fix"},{"location":"Ghost-Key-Fix/#1-rear-pcb-cut-red-lines","text":"","title":"1) Rear PCB (Cut red lines)"},{"location":"Ghost-Key-Fix/#2-front-pcb-cut-red-lines","text":"","title":"2) Front PCB (Cut red lines)"},{"location":"Ghost-Key-Fix/#3-operational-test","text":"You can watch the proof of concept in the next video:","title":"3) Operational Test"},{"location":"GnGeo/","text":"Place BIOS file neogeo.zip (around 820kb) in '/mnt/roms/NEOGEO' along with games. Romset/games need to be the from MAME 0.128 or FBA 2012 romset.","title":"GnGeo"},{"location":"Home/","text":"![miyoo-cfw](https://github.com/TriForceX/MiyooCFW/assets/16083854/51119d94-24a5-47b7-8bbd-f93b997c36c1) > The definitive custom firmware for **BittBoy**, **PocketGo**, **PowKiddy V90-Q90-Q20** _(and 3rd party consoles)_ allows you unlock the potential of the hardware and use software from a wide variety of consoles and computers thanks to the availability of numerous emulators and native ports of several games! --- ![miyoo-consoles](https://user-images.githubusercontent.com/16083854/221029395-26b04557-dccf-40bd-a059-b9928553ee4f.png) Compatible Consoles BittBoy v1, v2, v2.5, v3, v3.5 Pocket Go PowKiddy Q90 PowKiddy V90 PowKiddy Q20 Mini Sup M3 v1, v2 (See notes) XYC Q8 RS-77 (Not confirmed) Powkiddy X7 (Not confirmed) Notes: Only devices with Allwinner F1C100S or F1C500S SOC are supported and even these can come with not fully compatible components (e.g. unfamiliar LCD display). There were reports of console revisions with \"updated\" SOC - F1E200 or V100 . The Not confirmed consoles are not supported yet, these consoles are under revision and may not be on the final compatibility list. General Information SD Card Is highly recommended to NOT use the SD card included in the package with the console or unbranded ones, it can be corrupted easily without reason due its bad quality. We recommend to use the common brands, 2GB minimum and class 10 for faster install process. Shutting down the console Version 2.0.0 uses the BTRFS file system to prevent data corruption during an unsafe shutdown. This system automatically writes data every 5 seconds, so if you save a game and immediately turn off the console, the save may be lost. Therefore, it is safe to wait at least 5 seconds before shutting down the system or to perform a proper shutdown procedure. To safely shut down the console from GMenu2X: Exit from the emulator or game you are playing to return to the main menu (gmenu) Press the R/Reset(HOME) button to open the Power Menu Press A to shut down Alternatively, you can go to the settings section and use the \"Shutdown\" icon or use the Quick Shutdown Hotkey When the screen turns black, flick the power switch Screen timeout/sleep mode (GMenu2X) This only applies while in the menu: - Holding the Start button button will put the device into sleep/suspend mode - Press R/Reset(HOME) or Start again to wake it up - The default screen timeout is 30 seconds, after this the screen will go black (the device will go to sleep) - Power timeout is disabled by default Screen tearing fix The screen tearing fix is disabled by default for compatibility reasons. You can enable the screen tearing fix feature in GMenu2X in two ways: 1. Globally: - Go to GMenu2X settings and set the TEfix method to 1, 2, or 3 2. Per app: - For a specific app, press \"Select,\" choose \"Edit,\" and set the TEfix method to 1, 2, or 3 NOTE: Choose the best TEfix method for your particular handheld's LCD panel. Some methods may not work correctly for you. Additionally, there may be a small FPS drop when TEfix is enabled IPK Support Miyoo supports installing IPK packages for apps, emulators, and games. To install an IPK, simply copy the IPK file (e.g., drpocketsnes.ipk ) to the main partition. Then, run the GMenu2X explorer, select the IPK file, and install it. Autostart To enable the Autostart feature, go to GMenu2X settings and set Autostart to ON . Next, choose the app you want to autostart. When you quit the app, the handheld will shut down. After rebooting, the selected app will autostart. NOTE: To disable Autostart, quickly press the Y button when the GMenu2X hint box appears on the screen. TV-out mode To enable TV-out, run \"TVout ON/OFF\" from the Apps section. The handheld will reboot and start working in TV-out mode NOTE: To quickly exit TV-out mode, hold the select button after fully booting into GMenu2x Supported USB modes USB HID Turn your handheld into USB gamepad for PC/Android - Connect handheld to PC via USB - Run this USB HID app - Now you should be able to control PC/phone via handheld buttons - Press RESET button to leave USB HID mode USB Host Allows to connect external device (keyboard, mouse, gamepad) to the handheld - You need the USB OTG \"Y\" cable (male type C, see pic) to supply power from the charger to the external device since handheld doesn't provide it, as well for the USB bus to be active. - Connect the external device to the handheld with external power NOTE: Host mode also allows connection to the network using Android USB tethering - Connect Android phone and enable USB tethering - Start DHCP client app - Check the assigned IP in the show IP addr app USB MTP Allows to transfer files between a handheld and a PC using a USB connection USB Network Enable network on the handheld - IP address of handheld: 192.168.137.1 - After enabling this mode you can start FTP server app or SSH server app or play multiplayer (netplay) in Retroarch USB Serial console Allows connection to a handheld terminal using a serial port (COM port) Alternative to access the \"main\" BTRFS partition on Windows (SD card) BTRFS driver for windows Additional settings On the main partition, there is a file options.cfg that can be used to configure the following additional settings: MODULES_CUSTOM=0 - set 1 if you want to load custom modules defined in file modules.custom.sh on boot partition FAT_CHECK=1 - set 0 to disable fsck boot partition BOOT_LOGO=1 - set 0 to disable boot logo FLIP=0 - Set to 1 to rotate the screen by 180 degrees INVERT=0 - Set to 1 to invert colors on the screen TVMODE=0 - Set to 1 to use PAL mode for TV output, otherwise use NTSC HOTKEY_CUSTOM=1 - Set 1 to enable custom hotkey bindings see here","title":"Home"},{"location":"Home/#compatible-consoles","text":"BittBoy v1, v2, v2.5, v3, v3.5 Pocket Go PowKiddy Q90 PowKiddy V90 PowKiddy Q20 Mini Sup M3 v1, v2 (See notes) XYC Q8 RS-77 (Not confirmed) Powkiddy X7 (Not confirmed) Notes: Only devices with Allwinner F1C100S or F1C500S SOC are supported and even these can come with not fully compatible components (e.g. unfamiliar LCD display). There were reports of console revisions with \"updated\" SOC - F1E200 or V100 . The Not confirmed consoles are not supported yet, these consoles are under revision and may not be on the final compatibility list.","title":"Compatible Consoles"},{"location":"Home/#general-information","text":"","title":"General Information"},{"location":"Home/#sd-card","text":"Is highly recommended to NOT use the SD card included in the package with the console or unbranded ones, it can be corrupted easily without reason due its bad quality. We recommend to use the common brands, 2GB minimum and class 10 for faster install process.","title":"SD Card"},{"location":"Home/#shutting-down-the-console","text":"Version 2.0.0 uses the BTRFS file system to prevent data corruption during an unsafe shutdown. This system automatically writes data every 5 seconds, so if you save a game and immediately turn off the console, the save may be lost. Therefore, it is safe to wait at least 5 seconds before shutting down the system or to perform a proper shutdown procedure. To safely shut down the console from GMenu2X: Exit from the emulator or game you are playing to return to the main menu (gmenu) Press the R/Reset(HOME) button to open the Power Menu Press A to shut down Alternatively, you can go to the settings section and use the \"Shutdown\" icon or use the Quick Shutdown Hotkey When the screen turns black, flick the power switch","title":"Shutting down the console"},{"location":"Home/#screen-timeoutsleep-mode-gmenu2x","text":"This only applies while in the menu: - Holding the Start button button will put the device into sleep/suspend mode - Press R/Reset(HOME) or Start again to wake it up - The default screen timeout is 30 seconds, after this the screen will go black (the device will go to sleep) - Power timeout is disabled by default","title":"Screen timeout/sleep mode (GMenu2X)"},{"location":"Home/#screen-tearing-fix","text":"The screen tearing fix is disabled by default for compatibility reasons. You can enable the screen tearing fix feature in GMenu2X in two ways: 1. Globally: - Go to GMenu2X settings and set the TEfix method to 1, 2, or 3 2. Per app: - For a specific app, press \"Select,\" choose \"Edit,\" and set the TEfix method to 1, 2, or 3 NOTE: Choose the best TEfix method for your particular handheld's LCD panel. Some methods may not work correctly for you. Additionally, there may be a small FPS drop when TEfix is enabled","title":"Screen tearing fix"},{"location":"Home/#ipk-support","text":"Miyoo supports installing IPK packages for apps, emulators, and games. To install an IPK, simply copy the IPK file (e.g., drpocketsnes.ipk ) to the main partition. Then, run the GMenu2X explorer, select the IPK file, and install it.","title":"IPK Support"},{"location":"Home/#autostart","text":"To enable the Autostart feature, go to GMenu2X settings and set Autostart to ON . Next, choose the app you want to autostart. When you quit the app, the handheld will shut down. After rebooting, the selected app will autostart. NOTE: To disable Autostart, quickly press the Y button when the GMenu2X hint box appears on the screen.","title":"Autostart"},{"location":"Home/#tv-out-mode","text":"To enable TV-out, run \"TVout ON/OFF\" from the Apps section. The handheld will reboot and start working in TV-out mode NOTE: To quickly exit TV-out mode, hold the select button after fully booting into GMenu2x","title":"TV-out mode"},{"location":"Home/#supported-usb-modes","text":"","title":"Supported USB modes"},{"location":"Home/#usb-hid","text":"Turn your handheld into USB gamepad for PC/Android - Connect handheld to PC via USB - Run this USB HID app - Now you should be able to control PC/phone via handheld buttons - Press RESET button to leave USB HID mode","title":"USB HID"},{"location":"Home/#usb-host","text":"Allows to connect external device (keyboard, mouse, gamepad) to the handheld - You need the USB OTG \"Y\" cable (male type C, see pic) to supply power from the charger to the external device since handheld doesn't provide it, as well for the USB bus to be active. - Connect the external device to the handheld with external power NOTE: Host mode also allows connection to the network using Android USB tethering - Connect Android phone and enable USB tethering - Start DHCP client app - Check the assigned IP in the show IP addr app","title":"USB Host"},{"location":"Home/#usb-mtp","text":"Allows to transfer files between a handheld and a PC using a USB connection","title":"USB MTP"},{"location":"Home/#usb-network","text":"Enable network on the handheld - IP address of handheld: 192.168.137.1 - After enabling this mode you can start FTP server app or SSH server app or play multiplayer (netplay) in Retroarch","title":"USB Network"},{"location":"Home/#usb-serial-console","text":"Allows connection to a handheld terminal using a serial port (COM port)","title":"USB Serial console"},{"location":"Home/#alternative-to-access-the-main-btrfs-partition-on-windows-sd-card","text":"BTRFS driver for windows","title":"Alternative to access the \"main\" BTRFS partition on Windows (SD card)"},{"location":"Home/#additional-settings","text":"On the main partition, there is a file options.cfg that can be used to configure the following additional settings: MODULES_CUSTOM=0 - set 1 if you want to load custom modules defined in file modules.custom.sh on boot partition FAT_CHECK=1 - set 0 to disable fsck boot partition BOOT_LOGO=1 - set 0 to disable boot logo FLIP=0 - Set to 1 to rotate the screen by 180 degrees INVERT=0 - Set to 1 to invert colors on the screen TVMODE=0 - Set to 1 to use PAL mode for TV output, otherwise use NTSC HOTKEY_CUSTOM=1 - Set 1 to enable custom hotkey bindings see here","title":"Additional settings"},{"location":"Homebrew-Info/","text":"This guide may be outdated! Since Version 2.0.0 Beta was pre-released the following guide will change or be updated and the current one may be only for the old version 1.3.3. Be careful! List of ports installed with CFW and its links. (Thanks to dElAvA ) Name Status Hydra Castle Labyrinth Runs Homing Fever Runs calculator Runs asciiportal Not Loading cannonball Works with OutRun Revision B ROMs cavestory Runs chocolate-doom Works with doom1.wad cdogs Long delay to load, runs slow digger Runs hheriticsdl Works with heritic1.wad hhexen-sdl Works with hexen.wad liero Runs mrdrillux Runs OpeenBoR Runs\\Needs Game Mods Opentyrian Runs pang Runs Quake Runs Quake2 Runs rott Needs Data Files kof Runs sdlpal Runs sdlpal2 sod Needs Data Files Ports and Homebrews Calculator (By vamastah) A simple calculator made for Bittboy handheld. It supports elementary arithmetic operations. You can download here Just place the file in a folder named 'calc' in the 'apps' folder on your SD card CANNONBALL (Outrun Arcade): Place Outrun datafiles in '.cannonball\\roms' See '.cannonball\\roms\\Place outrun ROM files here.txt' for information on required files 'R' Button ('Reset' on pocket-go) changes gear DOOM: Shareware WAD file is included To play other WADs, copy them to '\\roms\\PC\\DOOM' HERETIC: Shareware datafile is included To play the full version, copy the retail HERTIC.WAD to 'games\\hheretic\\' HEXEN: Shareware datafile is included To play the full version, copy the retail HEXEN.WAD to 'games\\hhexen\\' SOD: Shareware datafiles are included To play the retail/full version of Spear of Destiny: Copy the retail SOD datafiles (all .SOD files other than config.SOD) to 'games\\sod\\' In the same folder: Delete (or rename) the file 'sod' Rename the file 'sod-Retail' to 'sod' The SOD icon on the games tab of your bittboy will now load the full game instead of the shareware version. STRIFE: Only the full version datafile (STRIFE1.WAD) is supported To play strife: Copy the 'STRIFE1.WAD' datafile from a full copy of the game to 'games\\ccdoom' Wolf3D: Shareware datafiles are included To play the retail/full version of Wolfenstein 3D: Copy the retail Wolf3D datafiles (all .WL6 files other than config.WL6) to 'games\\wolf3d\\' In the same folder: Delete (or rename) the file 'wolf3d' Rename the file 'wolf3d-Retail' to 'wolf3d' The Wolf3D icon on the games tab of your bittboy will now load the full game instead of the shareware version. MPLAYER How to add videos to your Miyoo device. Standard video files generally wont work on the Miyoo, the video player is kinda trash and wont be able to downscale or work with formats that its not familiar with. download the free open source video encoder Handbrake https://handbrake.fr/ Import your video and set the file format to .mkv, resolution to 320x240 (v90's native screen size). select MPEG-2 as your video codec, set constant quality of 3, frame rate same as source and select constant frame rate. for audio, set the bitrate to 64kpbs, set to mono (or stero if you plan to exclusively use headphones). throw the video in your SD card and navigate to it when using the mplayer app. you will get slight black bars on the top and bottom of the screen due to the square screen of the device. IMPORTANT: The video player will always remember the last place you left it if you swap to another app AND if you finish playing the video. it saves this state as a .resume file. Once the video has finished playing IT WILL NOT PLAY FROM THE BEGINNING AGAIN. you will either need to rewind the video using the L1/L2 buttons OR delete the .resume file via the file manager app","title":"Homebrew Info"},{"location":"Homebrew-Info/#this-guide-may-be-outdated","text":"Since Version 2.0.0 Beta was pre-released the following guide will change or be updated and the current one may be only for the old version 1.3.3. Be careful! List of ports installed with CFW and its links. (Thanks to dElAvA ) Name Status Hydra Castle Labyrinth Runs Homing Fever Runs calculator Runs asciiportal Not Loading cannonball Works with OutRun Revision B ROMs cavestory Runs chocolate-doom Works with doom1.wad cdogs Long delay to load, runs slow digger Runs hheriticsdl Works with heritic1.wad hhexen-sdl Works with hexen.wad liero Runs mrdrillux Runs OpeenBoR Runs\\Needs Game Mods Opentyrian Runs pang Runs Quake Runs Quake2 Runs rott Needs Data Files kof Runs sdlpal Runs sdlpal2 sod Needs Data Files","title":"This guide may be outdated!"},{"location":"Homebrew-Info/#ports-and-homebrews","text":"","title":"Ports and Homebrews"},{"location":"Homebrew-Info/#calculator-by-vamastah","text":"A simple calculator made for Bittboy handheld. It supports elementary arithmetic operations. You can download here Just place the file in a folder named 'calc' in the 'apps' folder on your SD card","title":"Calculator (By vamastah)"},{"location":"Homebrew-Info/#cannonball-outrun-arcade","text":"Place Outrun datafiles in '.cannonball\\roms' See '.cannonball\\roms\\Place outrun ROM files here.txt' for information on required files 'R' Button ('Reset' on pocket-go) changes gear","title":"CANNONBALL (Outrun Arcade):"},{"location":"Homebrew-Info/#doom","text":"Shareware WAD file is included To play other WADs, copy them to '\\roms\\PC\\DOOM'","title":"DOOM:"},{"location":"Homebrew-Info/#heretic","text":"Shareware datafile is included To play the full version, copy the retail HERTIC.WAD to 'games\\hheretic\\'","title":"HERETIC:"},{"location":"Homebrew-Info/#hexen","text":"Shareware datafile is included To play the full version, copy the retail HEXEN.WAD to 'games\\hhexen\\'","title":"HEXEN:"},{"location":"Homebrew-Info/#sod","text":"Shareware datafiles are included To play the retail/full version of Spear of Destiny: Copy the retail SOD datafiles (all .SOD files other than config.SOD) to 'games\\sod\\' In the same folder: Delete (or rename) the file 'sod' Rename the file 'sod-Retail' to 'sod' The SOD icon on the games tab of your bittboy will now load the full game instead of the shareware version.","title":"SOD:"},{"location":"Homebrew-Info/#strife","text":"Only the full version datafile (STRIFE1.WAD) is supported To play strife: Copy the 'STRIFE1.WAD' datafile from a full copy of the game to 'games\\ccdoom'","title":"STRIFE:"},{"location":"Homebrew-Info/#wolf3d","text":"Shareware datafiles are included To play the retail/full version of Wolfenstein 3D: Copy the retail Wolf3D datafiles (all .WL6 files other than config.WL6) to 'games\\wolf3d\\' In the same folder: Delete (or rename) the file 'wolf3d' Rename the file 'wolf3d-Retail' to 'wolf3d' The Wolf3D icon on the games tab of your bittboy will now load the full game instead of the shareware version.","title":"Wolf3D:"},{"location":"Homebrew-Info/#mplayer","text":"How to add videos to your Miyoo device. Standard video files generally wont work on the Miyoo, the video player is kinda trash and wont be able to downscale or work with formats that its not familiar with. download the free open source video encoder Handbrake https://handbrake.fr/ Import your video and set the file format to .mkv, resolution to 320x240 (v90's native screen size). select MPEG-2 as your video codec, set constant quality of 3, frame rate same as source and select constant frame rate. for audio, set the bitrate to 64kpbs, set to mono (or stero if you plan to exclusively use headphones). throw the video in your SD card and navigate to it when using the mplayer app. you will get slight black bars on the top and bottom of the screen due to the square screen of the device. IMPORTANT: The video player will always remember the last place you left it if you swap to another app AND if you finish playing the video. it saves this state as a .resume file. Once the video has finished playing IT WILL NOT PLAY FROM THE BEGINNING AGAIN. you will either need to rewind the video using the L1/L2 buttons OR delete the .resume file via the file manager app","title":"MPLAYER"},{"location":"Improve-Directional-Pad/","text":"To improve the directional pad and membrane for Bittboy and PocketGo you can take one of a Game Boy DMG and it will fit perfectly. Thanks to WenTao for this tips. This is how it looks on PocketGo Also you can use another membrane to improve the key-press feeling. For example the one of a RS-97 console. (You just need to take out the circles) Here you have an example: \\","title":"Improve Directional Pad"},{"location":"Light-Bleed-Fix/","text":"Bittboy and PocketGo has some serious light bleed from the top and side of the LCD screen. It can be fixed simply with some black electrical tape. You need to cover the edges of the screen where the light can clean out. That's it! Steps: Disassemble the Pocket Go Cut some thin strips of black electrical tape Stick the strips directly to the LCD panel's glass and plastic frame around the edges, ONLY on the FRONT, not hanging over the sides of the frame Also cover the ribbon cables on the left side of the screen (lightly, like a \"flap\" of tape that's attached to the LCD frame but just laying over the cables Fit the LCD back into the front of the case Reassemble and enjoy some games with no extra light!","title":"Light Bleed Fix"},{"location":"MAME4All/","text":"If MAME ROMs don't work in MAME4All MAME4All uses a much older version of MAME. The ROMs need to be from the MAME 2000 / MAME 0.37b5 romset. Missing sounds: For anyone noticing that there are some sounds missing from some classic arcade games, it's because MAME can't produce those sounds via emulation, so it needs these sound file packages for the sound to work: https://samples.mameworld.info/ (Check both the \"Older Samples\" and \"Current Samples\" list/archive.) These ZIP files are complementary to the ROMs, and need to be placed in \"emus/mame4all/samples/\". After that the full audio for these games will work. Bypassing the legal/copyright message: The first time you load a game, at the legal message, press Left and Right on the D-pad to confirm (to \"type OK\"). You only need to do this once.","title":"MAME4All"},{"location":"Making-Games-DEPRECATED/","text":"This guide may be outdated! Since Version 2.0.0 Beta was pre-released the following guide will change or be updated and the current one may be only for the old version 1.3.3. Be careful! How to build your own games This is an small guide to start making games for Bittboy/PocketGo (not for beginners). Thanks to crait for this guide and gameblabla for his updates. SDL 1.2 keys (MiyooCFW 1.3.3) Physical button bindings for Miyoo 1'st gen consoles (Bittboy's in round brackets) Button SDLKey A (TA) SDLK_LALT B (A) SDLK_LCTRL X (TB) SDLK_LSHIFT Y (B) SDLK_SPACE L1 SDLK_TAB R1 SDLK_BACKSPACE L2 SDLK_PAGEUP R2 SDLK_PAGEDOWN RESET SDLK_RCTRL START SDLK_RETURN SELECT SDLK_ESCAPE UP/DOWN SDLK_UP/DOWN LEFT/RIGHT SDLK_LEFT/RIGHT To check correctness of this table use I/O tester on your handheld. Step 1 Since we're working with Linux-based devices, you're going to need to run a Linux distribution. So, if you're on Windows, you'll need to install a Virtual Machine, Cygwin, WSL or something like that. crait uses Virtualbox along with Xubuntu 18.04 but you can also use mostly any linux distribution as long as it's not too old and that GCC, make and bison are available on it. I'm using Void linux on my machine myself so most linux distributions should work. Step 2 The BittBoy uses a custom firmware based around buildroot and Linux. To compile programs for it, we'll need to get buildroot in order to cross-compile programs for the Bittboy/PocketGo. For downloadable pre-built packages/binaries of the toolchain/SDK see here . If you wish to compile the toolchain/SDK from source, be sure you have the following dependencies: bison , make , gcc . You will also need at least 10GB of free space before you can proceed. Run the following commands in the terminal : sudo mkdir /opt/miyoo cd /opt/miyoo sudo git clone https://github.com/MiyooCFW/toolchain.git cd toolchain sudo make sdk Warning : this can take a long time ! (a few hours depending on your machine) Step 3 Once compiling the toolchain is done, go to the \"output\" folder and then inside of that, go to the \"host\" folder. Now grab the content of that folder inside and put it in /opt/miyoo/. (Note that the contents of /opt are usually not writable by normal users, so you may need to become administrator/root.) The easiest way of doing this step is via the terminal: sudo mv /opt/miyoo/toolchain/output/host/* /opt/miyoo/ Step 4 Create a folder for your project with your game's source code and create a \"Makefile\" for it. Here's the one that crait used for the Midnight Wild game: CHAINPREFIX= /opt/miyoo/ CROSS_COMPILE=$(CHAINPREFIX)/bin/arm-buildroot-linux-musleabi- CC = $(CROSS_COMPILE)gcc CXX = $(CROSS_COMPILE)g++ STRIP = $(CROSS_COMPILE)strip SYSROOT := $(shell $(CC) --print-sysroot) SDL_CFLAGS := $(shell $(SYSROOT)/usr/bin/sdl-config --cflags) SDL_LIBS := $(shell $(SYSROOT)/usr/bin/sdl-config --libs) OUTPUTNAME = midnightwild/midnightwild.elf DEFINES = -DHAVE_STDINT_H -DVERSION_BITTBOY INCLUDES = -Iinclude $(SDL_CFLAGS) OPT_FLAGS = -Ofast -fdata-sections -fdata-sections -fno-common -fno-PIC -flto EXTRA_LDFLAGS = -lasound -lmikmod -lmodplug -Wl,--as-needed -Wl,--gc-sections -flto -s CFLAGS = $(DEFINES) $(INCLUDES) $(OPT_FLAGS) -std=gnu11 CXXFLAGS = $(DEFINES) $(INCLUDES) $(OPT_FLAGS) -std=gnu++11 LDFLAGS = -Wl,--start-group -lSDL -lSDL_image -lpng -ljpeg -lSDL_mixer -lfreetype -lSDL_ttf -logg -lvorbisidec -lmikmod -lmodplug -lm -pthread -lz -lstdc++ $(EXTRA_LDFLAGS) -Wl,--end-group # Redream (main engine) OBJS = \\ src/main.o .c.o: $(CC) $(CFLAGS) -c -o $@ $< .cpp.o: $(CXX) $(CXXFLAGS) -c -o $@ $< all: $(OBJS) $(CC) -o $(OUTPUTNAME) $(OBJS) $(CFLAGS) $(LDFLAGS) clean: rm -f $(OBJS) $(OUTPUTNAME) Step 5 Build your software with \"make\" in the terminal and you should be good to go! Do you want to find a good example of some source code for the BittBoy? Check out pingflood's IOTester: https://github.com/pingflood/iotester If you want more support or questions join our Discord chat server here","title":"Making-Games-DEPRECATED"},{"location":"Making-Games-DEPRECATED/#this-guide-may-be-outdated","text":"Since Version 2.0.0 Beta was pre-released the following guide will change or be updated and the current one may be only for the old version 1.3.3. Be careful!","title":"This guide may be outdated!"},{"location":"Making-Games-DEPRECATED/#how-to-build-your-own-games","text":"This is an small guide to start making games for Bittboy/PocketGo (not for beginners). Thanks to crait for this guide and gameblabla for his updates.","title":"How to build your own games"},{"location":"Making-Games-DEPRECATED/#sdl-12-keys-miyoocfw-133","text":"Physical button bindings for Miyoo 1'st gen consoles (Bittboy's in round brackets) Button SDLKey A (TA) SDLK_LALT B (A) SDLK_LCTRL X (TB) SDLK_LSHIFT Y (B) SDLK_SPACE L1 SDLK_TAB R1 SDLK_BACKSPACE L2 SDLK_PAGEUP R2 SDLK_PAGEDOWN RESET SDLK_RCTRL START SDLK_RETURN SELECT SDLK_ESCAPE UP/DOWN SDLK_UP/DOWN LEFT/RIGHT SDLK_LEFT/RIGHT To check correctness of this table use I/O tester on your handheld.","title":"SDL 1.2 keys (MiyooCFW 1.3.3)"},{"location":"Making-Games-DEPRECATED/#step-1","text":"Since we're working with Linux-based devices, you're going to need to run a Linux distribution. So, if you're on Windows, you'll need to install a Virtual Machine, Cygwin, WSL or something like that. crait uses Virtualbox along with Xubuntu 18.04 but you can also use mostly any linux distribution as long as it's not too old and that GCC, make and bison are available on it. I'm using Void linux on my machine myself so most linux distributions should work.","title":"Step 1"},{"location":"Making-Games-DEPRECATED/#step-2","text":"The BittBoy uses a custom firmware based around buildroot and Linux. To compile programs for it, we'll need to get buildroot in order to cross-compile programs for the Bittboy/PocketGo. For downloadable pre-built packages/binaries of the toolchain/SDK see here . If you wish to compile the toolchain/SDK from source, be sure you have the following dependencies: bison , make , gcc . You will also need at least 10GB of free space before you can proceed. Run the following commands in the terminal : sudo mkdir /opt/miyoo cd /opt/miyoo sudo git clone https://github.com/MiyooCFW/toolchain.git cd toolchain sudo make sdk Warning : this can take a long time ! (a few hours depending on your machine)","title":"Step 2"},{"location":"Making-Games-DEPRECATED/#step-3","text":"Once compiling the toolchain is done, go to the \"output\" folder and then inside of that, go to the \"host\" folder. Now grab the content of that folder inside and put it in /opt/miyoo/. (Note that the contents of /opt are usually not writable by normal users, so you may need to become administrator/root.) The easiest way of doing this step is via the terminal: sudo mv /opt/miyoo/toolchain/output/host/* /opt/miyoo/","title":"Step 3"},{"location":"Making-Games-DEPRECATED/#step-4","text":"Create a folder for your project with your game's source code and create a \"Makefile\" for it. Here's the one that crait used for the Midnight Wild game: CHAINPREFIX= /opt/miyoo/ CROSS_COMPILE=$(CHAINPREFIX)/bin/arm-buildroot-linux-musleabi- CC = $(CROSS_COMPILE)gcc CXX = $(CROSS_COMPILE)g++ STRIP = $(CROSS_COMPILE)strip SYSROOT := $(shell $(CC) --print-sysroot) SDL_CFLAGS := $(shell $(SYSROOT)/usr/bin/sdl-config --cflags) SDL_LIBS := $(shell $(SYSROOT)/usr/bin/sdl-config --libs) OUTPUTNAME = midnightwild/midnightwild.elf DEFINES = -DHAVE_STDINT_H -DVERSION_BITTBOY INCLUDES = -Iinclude $(SDL_CFLAGS) OPT_FLAGS = -Ofast -fdata-sections -fdata-sections -fno-common -fno-PIC -flto EXTRA_LDFLAGS = -lasound -lmikmod -lmodplug -Wl,--as-needed -Wl,--gc-sections -flto -s CFLAGS = $(DEFINES) $(INCLUDES) $(OPT_FLAGS) -std=gnu11 CXXFLAGS = $(DEFINES) $(INCLUDES) $(OPT_FLAGS) -std=gnu++11 LDFLAGS = -Wl,--start-group -lSDL -lSDL_image -lpng -ljpeg -lSDL_mixer -lfreetype -lSDL_ttf -logg -lvorbisidec -lmikmod -lmodplug -lm -pthread -lz -lstdc++ $(EXTRA_LDFLAGS) -Wl,--end-group # Redream (main engine) OBJS = \\ src/main.o .c.o: $(CC) $(CFLAGS) -c -o $@ $< .cpp.o: $(CXX) $(CXXFLAGS) -c -o $@ $< all: $(OBJS) $(CC) -o $(OUTPUTNAME) $(OBJS) $(CFLAGS) $(LDFLAGS) clean: rm -f $(OBJS) $(OUTPUTNAME)","title":"Step 4"},{"location":"Making-Games-DEPRECATED/#step-5","text":"Build your software with \"make\" in the terminal and you should be good to go! Do you want to find a good example of some source code for the BittBoy? Check out pingflood's IOTester: https://github.com/pingflood/iotester If you want more support or questions join our Discord chat server here","title":"Step 5"},{"location":"Making-Games/","text":"How to build your own games This is an small guide to start making games for Miyoo (not for beginners). Thanks to crait for this guide and gameblabla for his updates. SDL 1.2 keys (MiyooCFW 2.0.0 & above) Physical button bindings for Miyoo 1'st gen consoles (Bittboy's in round brackets) Button SDLKey A (A) SDLK_LALT B (B) SDLK_LCTRL X (TA) SDLK_LSHIFT Y (TB) SDLK_SPACE L1 SDLK_TAB R1 SDLK_BACKSPACE L2 SDLK_PAGEUP R2 SDLK_PAGEDOWN L3 SDLK_RALT R3 SDLK_RSHIFT RESET SDLK_RCTRL START SDLK_RETURN SELECT SDLK_ESCAPE UP/DOWN SDLK_UP/DOWN LEFT/RIGHT SDLK_LEFT/RIGHT To check correctness of this table use I/O tester on your handheld. Step 1 Since we're working with Linux-based devices, you're going to need to run a Linux distribution. So, if you're on Windows, you'll need to install a Virtual Machine, Cygwin, WSL or something like that. Recommended Linux distribution is Ubuntu 22.04 Step 2 The Miyoo uses a custom firmware based around buildroot and Linux. To compile programs for it, we'll need to get buildroot in order to cross-compile programs for the Miyoo. For downloadable pre-built packages/binaries of the toolchain/SDK see here . If you wish to compile the toolchain/SDK from source, see here Step 3 Create a folder for your project with your game's source code and create a \"Makefile\" for it. Here's the one that crait used for the Midnight Wild game: CHAINPREFIX= /opt/miyoo/ CROSS_COMPILE=$(CHAINPREFIX)/bin/arm-linux- CC = $(CROSS_COMPILE)gcc CXX = $(CROSS_COMPILE)g++ STRIP = $(CROSS_COMPILE)strip SYSROOT := $(shell $(CC) --print-sysroot) SDL_CFLAGS := $(shell $(SYSROOT)/usr/bin/sdl-config --cflags) SDL_LIBS := $(shell $(SYSROOT)/usr/bin/sdl-config --libs) OUTPUTNAME = midnightwild/midnightwild.elf DEFINES = -DHAVE_STDINT_H -DVERSION_BITTBOY INCLUDES = -Iinclude $(SDL_CFLAGS) OPT_FLAGS = -Ofast -fdata-sections -fdata-sections -fno-common -fno-PIC -flto EXTRA_LDFLAGS = -lasound -lmikmod -lmodplug -Wl,--as-needed -Wl,--gc-sections -flto -s CFLAGS = $(DEFINES) $(INCLUDES) $(OPT_FLAGS) -std=gnu11 CXXFLAGS = $(DEFINES) $(INCLUDES) $(OPT_FLAGS) -std=gnu++11 LDFLAGS = -Wl,--start-group -lSDL -lSDL_image -lpng -ljpeg -lSDL_mixer -lfreetype -lSDL_ttf -logg -lvorbisidec -lmikmod -lmodplug -lm -pthread -lz -lstdc++ $(EXTRA_LDFLAGS) -Wl,--end-group # Redream (main engine) OBJS = \\ src/main.o .c.o: $(CC) $(CFLAGS) -c -o $@ $< .cpp.o: $(CXX) $(CXXFLAGS) -c -o $@ $< all: $(OBJS) $(CC) -o $(OUTPUTNAME) $(OBJS) $(CFLAGS) $(LDFLAGS) clean: rm -f $(OBJS) $(OUTPUTNAME) Step 4 Build your software with \"make\" in the terminal and you should be good to go! Do you want to find a good example of some source code for the BittBoy? Check out pingflood's IOTester: https://github.com/pingflood/iotester If you want more support or questions join our Discord chat server here","title":"Making Games"},{"location":"Making-Games/#how-to-build-your-own-games","text":"This is an small guide to start making games for Miyoo (not for beginners). Thanks to crait for this guide and gameblabla for his updates.","title":"How to build your own games"},{"location":"Making-Games/#sdl-12-keys-miyoocfw-200-above","text":"Physical button bindings for Miyoo 1'st gen consoles (Bittboy's in round brackets) Button SDLKey A (A) SDLK_LALT B (B) SDLK_LCTRL X (TA) SDLK_LSHIFT Y (TB) SDLK_SPACE L1 SDLK_TAB R1 SDLK_BACKSPACE L2 SDLK_PAGEUP R2 SDLK_PAGEDOWN L3 SDLK_RALT R3 SDLK_RSHIFT RESET SDLK_RCTRL START SDLK_RETURN SELECT SDLK_ESCAPE UP/DOWN SDLK_UP/DOWN LEFT/RIGHT SDLK_LEFT/RIGHT To check correctness of this table use I/O tester on your handheld.","title":"SDL 1.2 keys (MiyooCFW 2.0.0 &amp; above)"},{"location":"Making-Games/#step-1","text":"Since we're working with Linux-based devices, you're going to need to run a Linux distribution. So, if you're on Windows, you'll need to install a Virtual Machine, Cygwin, WSL or something like that. Recommended Linux distribution is Ubuntu 22.04","title":"Step 1"},{"location":"Making-Games/#step-2","text":"The Miyoo uses a custom firmware based around buildroot and Linux. To compile programs for it, we'll need to get buildroot in order to cross-compile programs for the Miyoo. For downloadable pre-built packages/binaries of the toolchain/SDK see here . If you wish to compile the toolchain/SDK from source, see here","title":"Step 2"},{"location":"Making-Games/#step-3","text":"Create a folder for your project with your game's source code and create a \"Makefile\" for it. Here's the one that crait used for the Midnight Wild game: CHAINPREFIX= /opt/miyoo/ CROSS_COMPILE=$(CHAINPREFIX)/bin/arm-linux- CC = $(CROSS_COMPILE)gcc CXX = $(CROSS_COMPILE)g++ STRIP = $(CROSS_COMPILE)strip SYSROOT := $(shell $(CC) --print-sysroot) SDL_CFLAGS := $(shell $(SYSROOT)/usr/bin/sdl-config --cflags) SDL_LIBS := $(shell $(SYSROOT)/usr/bin/sdl-config --libs) OUTPUTNAME = midnightwild/midnightwild.elf DEFINES = -DHAVE_STDINT_H -DVERSION_BITTBOY INCLUDES = -Iinclude $(SDL_CFLAGS) OPT_FLAGS = -Ofast -fdata-sections -fdata-sections -fno-common -fno-PIC -flto EXTRA_LDFLAGS = -lasound -lmikmod -lmodplug -Wl,--as-needed -Wl,--gc-sections -flto -s CFLAGS = $(DEFINES) $(INCLUDES) $(OPT_FLAGS) -std=gnu11 CXXFLAGS = $(DEFINES) $(INCLUDES) $(OPT_FLAGS) -std=gnu++11 LDFLAGS = -Wl,--start-group -lSDL -lSDL_image -lpng -ljpeg -lSDL_mixer -lfreetype -lSDL_ttf -logg -lvorbisidec -lmikmod -lmodplug -lm -pthread -lz -lstdc++ $(EXTRA_LDFLAGS) -Wl,--end-group # Redream (main engine) OBJS = \\ src/main.o .c.o: $(CC) $(CFLAGS) -c -o $@ $< .cpp.o: $(CXX) $(CXXFLAGS) -c -o $@ $< all: $(OBJS) $(CC) -o $(OUTPUTNAME) $(OBJS) $(CFLAGS) $(LDFLAGS) clean: rm -f $(OBJS) $(OUTPUTNAME)","title":"Step 3"},{"location":"Making-Games/#step-4","text":"Build your software with \"make\" in the terminal and you should be good to go! Do you want to find a good example of some source code for the BittBoy? Check out pingflood's IOTester: https://github.com/pingflood/iotester If you want more support or questions join our Discord chat server here","title":"Step 4"},{"location":"NewComicBook/","text":"New Comic Book theme release v1.0 How to install (update) - Download NewComicBook.7z here - If upgrading remove previous versions from the apps/gmenu2x/skins/ folder - Copy 'NewComicBook' folder from NewComicBook.7z archive must be copied to apps/gmenu2x/skins/ folder - Go to the 'Skin' settings and use left/right to find and select 'NewComicBook' skin - Go to the 'Skin' > 'Wallpaper' section and select one of 10 wallpapers you like the most - Confirm your choice with 'Start' button Have fun with a super-duper 'NewComicBook' theme!\\ Thanks to Segich & SimplEasy for artwork Note: Apply these settings below in skin settings","title":"NewComicBook"},{"location":"OhBoy/","text":"About The next list are some features (pros/cons) of this emulator. Vivid/Bright Colors GBA Enhanced Mode Can change between system type Highly configurable controls (quick save/load) Lots of Scalers (more than Gambatte) Lots of Filters (more than Gambatte) Borders have to be converted to work Not that many Palettes (needs conversion) UI is a bit small and convoluted with settings Can't preview Save/Load States Can't preview Borders, Filters, Palettes Stereo is supported but broken, out of sync No Bilinear Filtering No Cheats Simulated Ghosting can't be set per device Unstable Framerate/Screen Tearing Needs Frameskip 1 to clear up Can't Boot Bios Thanks to da1writer for this list. Custom Palettes This tutorial will help you install custom palettes for the Bittboy emulator OhBoy . You can download here . Notes 1. OhBoy and GamBatte palettes arent interchangeable. You need the palettes for the correct emulator. 2. The .BMP Image Files are previews and can be added to the folder with out messing up the emulator. 3. If you dont have the said .ohboy or .gambatte folders you have to run the bittboy first so it creates the directory. 4. Alternatively on Windows you can open command prompt and type [mkdir .gambatte] This will create the folder in the C:\\Users\\myuser\\.ohboy How to install 1. Plug in your Micro SD card to your Computer with the Bittboy CFW already installed. 2. Open the Main drive of the Micro SD card. 3. Create or find the .ohboy folder in the main drive. 4. Create or find the palettes folder in the .ohboy folder 5. Drag and drop all the .pal files into this folder. Directory main/.ohboy/palettes/<.pal files> Developer Notes This set of 30 custom palettes was made by 2TMAU5 so you can pick and choose what you like since there are preview images. Thanks to Finnbro to convert them for OhBoy . It also is intended to have all the palettes so it will be fun to choose from. Also included in another folder is Hi-Ban Sample Palettes, these were for the GCW port so I made preview images so you can choose what to include from there as well. Requests If you have any personal requests we can make a second pack. Just message 2TMAU5#9723 on Discord.","title":"OhBoy"},{"location":"OhBoy/#about","text":"The next list are some features (pros/cons) of this emulator. Vivid/Bright Colors GBA Enhanced Mode Can change between system type Highly configurable controls (quick save/load) Lots of Scalers (more than Gambatte) Lots of Filters (more than Gambatte) Borders have to be converted to work Not that many Palettes (needs conversion) UI is a bit small and convoluted with settings Can't preview Save/Load States Can't preview Borders, Filters, Palettes Stereo is supported but broken, out of sync No Bilinear Filtering No Cheats Simulated Ghosting can't be set per device Unstable Framerate/Screen Tearing Needs Frameskip 1 to clear up Can't Boot Bios Thanks to da1writer for this list.","title":"About"},{"location":"OhBoy/#custom-palettes","text":"This tutorial will help you install custom palettes for the Bittboy emulator OhBoy . You can download here . Notes 1. OhBoy and GamBatte palettes arent interchangeable. You need the palettes for the correct emulator. 2. The .BMP Image Files are previews and can be added to the folder with out messing up the emulator. 3. If you dont have the said .ohboy or .gambatte folders you have to run the bittboy first so it creates the directory. 4. Alternatively on Windows you can open command prompt and type [mkdir .gambatte] This will create the folder in the C:\\Users\\myuser\\.ohboy How to install 1. Plug in your Micro SD card to your Computer with the Bittboy CFW already installed. 2. Open the Main drive of the Micro SD card. 3. Create or find the .ohboy folder in the main drive. 4. Create or find the palettes folder in the .ohboy folder 5. Drag and drop all the .pal files into this folder. Directory main/.ohboy/palettes/<.pal files> Developer Notes This set of 30 custom palettes was made by 2TMAU5 so you can pick and choose what you like since there are preview images. Thanks to Finnbro to convert them for OhBoy . It also is intended to have all the palettes so it will be fun to choose from. Also included in another folder is Hi-Ban Sample Palettes, these were for the GCW port so I made preview images so you can choose what to include from there as well. Requests If you have any personal requests we can make a second pack. Just message 2TMAU5#9723 on Discord.","title":"Custom Palettes"},{"location":"Overview/","text":"![miyoo-cfw](https://github.com/TriForceX/MiyooCFW/assets/16083854/51119d94-24a5-47b7-8bbd-f93b997c36c1) > The definitive custom firmware for **BittBoy**, **PocketGo**, **PowKiddy V90-Q90-Q20** allows you unlock the potential of the hardware and use software from a wide variety of consoles and computers thanks to the availability of numerous emulators and native ports of several games! --- Compatible Consoles BittBoy v1, v2, v2.5, v3, v3.5 Pocket Go PowKiddy Q90 PowKiddy V90 PowKiddy Q20 Mini General Information SD Card Is highly recommended to NOT use the SD card included in the package with the console or unbranded ones, it can be corrupted easily without reason due its bad quality. We recommend to use the common brands, 2GB minimum and class 10 for faster install process. Brightness workaround If the console hotkeys for brightness doesn't work for some reason, you can try to edit (with a text editor) and increase the number in the .backlight.conf file placed on the main partition of your SD card. Shutting down the console Not shutting down safely can cause micro SD corruption To safely shut down the console: Exit from the emulator or game you are playing to return to the main menu (gmenu) Hold the Start button to open the Power Menu Press A to shut down Alternatively you can go to the settings section and use the \"Shutdown\" icon or use the Quick Shutdown Hotkey When the screen turns black, flick the power switch Screen timeout/sleep mode This only applies while in the main menu: - Pressing the R/Reset button will put the device into sleep/suspend mode - Press R/Reset again to wake it up - The default screen timeout is 90 seconds, after this the screen will go black (the device will go to sleep) - The default power timeout is 10 minutes, after the console has been idle for 10 minutes it will perform a soft shutdown - Once this has occurred, you must flick the power switch off and back on to wake the device Alternative to access the \"main\" partition on Windows 7 or 8","title":"Overview"},{"location":"Overview/#compatible-consoles","text":"BittBoy v1, v2, v2.5, v3, v3.5 Pocket Go PowKiddy Q90 PowKiddy V90 PowKiddy Q20 Mini","title":"Compatible Consoles"},{"location":"Overview/#general-information","text":"","title":"General Information"},{"location":"Overview/#sd-card","text":"Is highly recommended to NOT use the SD card included in the package with the console or unbranded ones, it can be corrupted easily without reason due its bad quality. We recommend to use the common brands, 2GB minimum and class 10 for faster install process.","title":"SD Card"},{"location":"Overview/#brightness-workaround","text":"If the console hotkeys for brightness doesn't work for some reason, you can try to edit (with a text editor) and increase the number in the .backlight.conf file placed on the main partition of your SD card.","title":"Brightness workaround"},{"location":"Overview/#shutting-down-the-console","text":"Not shutting down safely can cause micro SD corruption To safely shut down the console: Exit from the emulator or game you are playing to return to the main menu (gmenu) Hold the Start button to open the Power Menu Press A to shut down Alternatively you can go to the settings section and use the \"Shutdown\" icon or use the Quick Shutdown Hotkey When the screen turns black, flick the power switch","title":"Shutting down the console"},{"location":"Overview/#screen-timeoutsleep-mode","text":"This only applies while in the main menu: - Pressing the R/Reset button will put the device into sleep/suspend mode - Press R/Reset again to wake it up - The default screen timeout is 90 seconds, after this the screen will go black (the device will go to sleep) - The default power timeout is 10 minutes, after the console has been idle for 10 minutes it will perform a soft shutdown - Once this has occurred, you must flick the power switch off and back on to wake the device","title":"Screen timeout/sleep mode"},{"location":"Overview/#alternative-to-access-the-main-partition-on-windows-7-or-8","text":"","title":"Alternative to access the \"main\" partition on Windows 7 or 8"},{"location":"PCSX-ReARMed/","text":"Configuration Pack HYJiNX187's PCSX-Rearmed Config Library v1.0 Download here v1.1 Release Notes - Added 25 PSX CFGs (Total 125) - Update Gmenu2x Entry to support *.cue files and hide *.bin v1.0 Release Notes - Added 100 PSX CFGs - Added Gmenu2x Custom Entry - Added pcsx.dge wrapper script for loading cfg Introduction This package was created to add PSX support on top of the guide that RetroGameCorps provided for the Powkiddy v90. The guide can be found at the following location: https://retrogamecorps.com/2021/02/01/review-powkiddy-v90/ It is recommended that you follow this guide, including the step to install the updated pcsx binary. NOTE: The updated pcsx should show \"October 2019\" under the \"Credits\" submenu inside of pcsx. To make 100% sure you have this updated version, I am including the link below: https://retrogamecorps.files.wordpress.com/2021/02/pcsx.zip YOU WILL NOT ACHIEVE 60FPS WITHOUT THE ABOVE PCSX VERSION! Though this was designed and tested on the Powkiddy v90, these configs should work fine on all devices running Miyoo 1.3.3. (example powkiddy q90 and the first pocketgo) Your mileage may vary on devices other than the one I have targetted with this release. Pre-Requisites Because I used many different BIOS to create these custom configs, it is recommended that you provide the following PSX BIOS. I cannot provide these to you, you will need to locate them and ensure that they are placed in \\emus\\pcsx_rearmed\\bios - PSXONPSP660.BIN - SCPH1001.BIN - scph5500.bin - scph5501.bin - scph5502.bin - scph7001.bin - scph7502.bin The 100 cfg files provided by this package expect NTSC PBP \"roms\" to be named the same and reside in /roms/PS1/*.PBP You will need to source your own PBP files and you should rename them to match the names of the cfg files located in \\emus\\pcsx_rearmed\\.pcsx\\cfg\\*.cfg If your PBP files are not named exactly like their corresponding CFG they will not load. Example: \\roms\\PS1\\Alien_Resurrection_(USA).PBP \\emus\\pcsx_rearmed\\.pcsx\\cfg\\Alien_Resurrection_(USA).cfg NOTE: The PBPs I used to test were official PBPs provided by PSN Servers. PSX ROMs available across the internet are of many different formats, regions and versions. I cannot help you find these and your mileage may vary if you use ROMs that are not official NTSC PBPs of the games supported in this release. Sharing of BIOS or PBPs is illegal and you should not ask for help in obtaining these. Officially, you should be purchasing these games and scraping them off of your devices. Installation Unzip the contents of the zip file into the \"Main\" partition of you Miyoo 1.3.3 CFW SD Card. Additional Information This package provides configs for the top 100 games as defined by the GameFAQs community and was created using the following thread https://gamefaqs.gamespot.com/boards/916392-playstation/73165050 Both my package and RetroGameCorps Powkiddy v90 Guide are based on Miyoo CFW 1.3.3 which can be found here: https://github.com/TriForceX/MiyooCFW PCSX-Rearmed was original ported by \"Sauce\" aka \"GameBlaBla\" https://github.com/gameblabla/pcsx_rearmed/ The pcsx.dge and accompanying Gmenu2x entry are a work around for the following known issue: https://github.com/notaz/pcsx_rearmed/issues/163 The -cfg flag does not allow you to directly pass a custom cfg to PCSX. My DGE script will copy and overwrite the global pcsx.cfg file for every game you launch under the Gmenu2x folder. When/if this bug is resolved, the cfg files should be able to be passed with a -cfg parameter file, but you will need to use my script until the bug is resolved. Don't you dare ask for PBPs or BIOS files! View Hash List here --- | Filename | MD5 | SHA1 | CRC32 | SHA-256 | SHA-512 | SHA-384 | Full Path | Modified Time | Created Time | Entry Modified Time | File Size | File Version | Product Version | Identical | Extension | File Attributes | |-------------------------------------------------------|----------------------------------|------------------------------------------|----------|------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------|-----------------------|---------------------|----------------------|-------------|---------------|------------------|------------|------------|------------------| | Chocobo_Racing_(USA).PBP | ff8d30c1cfb0f572032918b6903003fb | d0d77feabe5a56e317adf5926faf5af6c0d73fae | 05602c74 | 7cfc2d7192aa9a710b3a45c8e528a43ea37d90df86cf1218112322453ef3f2e6 | cd2a3653359efa8a384feff0c38469452261ba4ca11569d72533806330e0ac7126e231c7cca99f54b45bea6e35efaa782b8faea45ec1e70635599b96be4b9a97 | eeb141727b29b2089755e3709ef97471dbbf1ba9bfe3caffca5a1b70c3ebe9ec8a21da121fafdbd89cd3caea47d1f0c0 | C:\\Users\\Kyle\\Desktop\\psx2\\Chocobo_Racing_(USA).PBP | 2/18/2017 6:16:59 PM | 3/5/2021 9:22:26 PM | 3/6/2021 11:22:55 AM | 243,383,841 | | | | PBP | A | | Chocobos_Dungeon_2_(USA).PBP | bd812e532b3a1bc956720c2668fe5e09 | 0ed150e9795c93e07c9eb014f60ca9564e536206 | 2227e1ad | 2c2c240a28b984ea7ad62ca5480966dd9e4fccc8f84977b248e0f08226e2e37d | 27f177333ac7904b2b7c22be406212b65ffec70bc2e6882cb7d822962c7498d7ba85d581e5755fd80f37a57b545da29b3b40cade9069f51967af7add80de6972 | 4ea0954990cdb13c97c0a856d105a3e35a668329de3bad702130b49dbef0515932541d376dc1ce3874202c72cbc4002a | C:\\Users\\Kyle\\Desktop\\psx2\\Chocobos_Dungeon_2_(USA).PBP | 2/19/2017 8:47:43 AM | 3/5/2021 9:22:46 PM | 3/6/2021 11:23:09 AM | 329,151,025 | | | | PBP | A | | Civilization_II_(USA).PBP | ce6acbd20d82a73cdb672a30fa86864f | e985202bfa9e887c92b7bd633927b7519c72d9c5 | 3629f040 | 8f6422e6834f2cbce9e72ed5d3feca4f3e2d4893b449d7301bcb977449eb5e08 | c9aa061cb72fb25c6757cdcb0d0d15814fecd57814e8d9c0796a1e6cf97e64cc5039c19384fc7dbed3ec8ecef70059d53adc8424a0a4e1545cca1ac13cbcc66d | 406a18705507b9a4ec3124a2ae6096791003087fc8e1fe5b82f84591f215dc2ce83e2d033380833c4f361ae311fbc4ba | C:\\Users\\Kyle\\Desktop\\psx2\\Civilization_II_(USA).PBP | 2/15/2017 11:18:51 PM | 3/5/2021 9:23:02 PM | 3/6/2021 11:23:38 AM | 325,361,553 | | | | PBP | A | | Disney-Pixar_Toy_Story_Racer_(USA).PBP | becbd19d7123d9e8da2b2586486c05be | 419da99abbf2ae35043b0dc86569793905c852fa | 03fb4020 | 18253c9a74bbc6783cda578327a6e3eb0f950be0244e5ba7de228562b8ab42db | 82051526a7fba0c17f46567e39d0edf4741a5e62651cde68db0d556afba4b8f3bb1b4b2db518ba2f30516c3f73a3c68ed3f3143ad23f95118e95dbfe1d2f4ef3 | eb38a8bdb9e2c9a0732814b21fe378fb73b46f2e808a0b6197c1554211e4d20a014a8edd2dc7d912c4089ab15f53d2c8 | C:\\Users\\Kyle\\Desktop\\psx2\\Disney-Pixar_Toy_Story_Racer_(USA).PBP | 2/19/2017 2:20:24 AM | 3/5/2021 9:23:48 PM | 3/6/2021 11:23:52 AM | 141,900,865 | | | | PBP | A | | Duke_Nukem_Time_to_Kill_(USA).PBP | 5f34bdabea7afc3dfcceb0169788765a | 1ab20c931fac1fc2754c1110b67e4755d73af689 | 81af108a | 61cacbaa0e1ec874c558cbfd746fb66bb1670cf9dc0f727c4cab04f591c56977 | 26df6127668d24ad6b5c31404d117af0d38a16a90d9823c5edbbe05903c463d8dc436ea7174a8b0443e7625e01703b59fe43448afa96f0e7c555508b4930acc6 | c384b26309bc57372486a96bac9f176071cec83501380406e6565f9fd9f299146ed2c63d60e51aa1db67b5f19acdf014 | C:\\Users\\Kyle\\Desktop\\psx2\\Duke_Nukem_Time_to_Kill_(USA).PBP | 2/19/2017 1:31:11 AM | 3/5/2021 9:23:33 PM | 3/6/2021 11:24:36 AM | 230,698,721 | | | | PBP | A | | Frogger_(USA).PBP | c4b5240f2f43300af99959373ea1a948 | 734fb484f029b7117532872b8c45de684a4bb7f1 | ef4e82a8 | 974d42f1b5aab8ade09bcb94a487f834b9cfc256108f6b8388ab4f8255a8e54e | 382f9356e57503c705ab69912069396257d3345faeb1e3b0a40c0eccddcaafc9f2d7f4c8cbe0a88fbb9ac95d649ce3ba99b8d9fb705667200c368b8a0a7fdd9b | a9b827e3a977bd41fa1da43230ae0c5dade0eb0ea061e123b3e7227e6002d960f91270493d207e1432fd81b50ef1c279 | C:\\Users\\Kyle\\Desktop\\psx2\\Frogger_(USA).PBP | 2/19/2017 1:40:03 AM | 3/5/2021 9:24:00 PM | 3/6/2021 11:25:01 AM | 159,242,145 | | | | PBP | A | | Galaga_Destination_Earth_(USA).PBP | 1474b53fa9d9383daf188078395b0d46 | fcbe450be8511391c6d1f028138b021dc2593bb1 | ce5fac74 | f09a24ee18ee6a35e4906cc081f5f3a91ba05573ed6df349381b5d86e75dfe63 | 9000048e6d01c584759364f7fded63318eba2769b643d3b566f1667d617a1332288cd4e25d2d2684b02341ee2453ef12d4daa0288b0cc47339d64498c5c13e4b | 7c764f9a51ad94891625a2a85cf8e196289959b9c4d8f72d009d4d64543738fa04eaa53fda09a794a17d514bcc00d496 | C:\\Users\\Kyle\\Desktop\\psx2\\Galaga_Destination_Earth_(USA).PBP | 2/19/2017 12:28:50 AM | 3/5/2021 9:25:00 PM | 3/6/2021 11:25:20 AM | 347,023,665 | | | | PBP | A | | Kings_Field_(USA).PBP | 2afee2e98591434ad988b4e5b9ce8414 | 17a51af8a187e1de6922c2352b32dd2d23cc68f3 | 6187a6af | 628b358249e317549cb4356d7c6f686882ecce02f8cf8b1555a7203bba1d83ef | d5f4c946a1994a8ef491dac4f941442547bd963403c03f84e8cdff5931145ab4e8248e225cd1ae4903deda498d21ba6c9c27504725cf3072b546b68d21804951 | 506353625f3d72ad680b650d2b7615331f9d311a0f52b36c1ba5586f2fb5abcb1e49089868940a54b6ef3e727d00bd7e | C:\\Users\\Kyle\\Desktop\\psx2\\Kings_Field_(USA).PBP | 2/18/2017 9:47:55 AM | 3/5/2021 9:26:01 PM | 3/6/2021 11:25:42 AM | 154,985,761 | | | | PBP | A | | Micro_Machines_V3_(USA).PBP | e86fb48676ca6a6c85ba294acbafd281 | 626afdadc8754d1e88f80341bc3ee6a1c7eacb7e | 4840d220 | 6dcb77bb56ef51b4fe77dde8a41fcdf88eba727100afc852658fcad79266311e | 1f2d7ff5b2ded87cb1092ac130780653413ccbb748d3917ef725842591003fde82ef359b8c9c77dd7b77a7325a134973035e1e2d961e22ae2d056677efb19bb2 | 6d291f008ac72754df939d419e30cdef50d13b627a18bc0b803fba28b5c433cf1ea2324ce8419f2f48899b2b5edd962d | C:\\Users\\Kyle\\Desktop\\psx2\\Micro_Machines_V3_(USA).PBP | 2/19/2017 1:42:05 AM | 3/5/2021 9:26:41 PM | 3/6/2021 11:25:53 AM | 238,944,433 | | | | PBP | A | | Missile_Command_(USA).PBP | 43c9bd929ba6817e431a25531ee5fa8d | 948b4d071034cd674f1d093042d16731e3cacb7c | 90e9c50c | cecece99a600eeaf9bb3ec80bdc8f882c55ac2d5997e5b1077ba37685f4313cb | 8b0578fa5b55a5bf528d132ae4976afe37b6cd60de4552c024ac9be24709ccc3734f3920c3d3cbb7d2650ee0bec4baf5f9635d963e2c3c2bdd09445123e24561 | 5acc1198bdcdf1ecbe831d56ec2ba6021d41c5fb778f6a559b26673ae9b982ba4db7102a7e692ffdf190d7a479756da1 | C:\\Users\\Kyle\\Desktop\\psx2\\Missile_Command_(USA).PBP | 2/19/2017 5:09:18 AM | 3/5/2021 9:26:36 PM | 3/6/2021 11:26:01 AM | 211,668,353 | | | | PBP | A | | Q-bert_(USA).PBP | 614888349240ada6411a1c102e9ce7bf | 6ddb47d517825edf10245c8fc49378649eb8772b | bcb9ad3b | 845ddf4bd0dc0fb3643e066d7d472c89517397b648a295074d04679b45fc008d | 7ef3669d3cbdaf5c84ecfd05459bba32373d3f062e465a1bf6be66e51ed75c71bb15f95cd33419d21f93e2c051f17531ff65b4761675aef00e2dc4b574a396ab | 84bda6e2300d54d71cffa9e8ecd388f9e4a23ffdf7e6ef660cd3fd68239304b1813bd294b009e60d666a4aae6b6d9c7b | C:\\Users\\Kyle\\Desktop\\psx2\\Q-bert_(USA).PBP | 2/18/2017 11:21:23 PM | 3/5/2021 9:27:55 PM | 3/6/2021 11:26:06 AM | 142,300,385 | | | | PBP | A | | Qix_Neo_(USA).PBP | 879e02da0f9a1233583ef93e300fc343 | 1741db32b510b1e2f1913e113a7fd33df5d255e5 | 230b4497 | 4445236899a0581f015a0fa5a76d6c96cce88173727510f1b5adf376dc39758e | 90e66310374cb34b8ab5f2a9e947f168c0cc175e19c8f8b1c036d3f83a5a81a613b5e3b3bc4c80dfe6761f8f38340a46b95872e091963ab38304f4eb08261e84 | 9cc82f9f22feba1aee8a1832208ba256e6051c27143b7190470fe46a7de4cdfa5efb8bdffe3bc01ff377343c67c2fd82 | C:\\Users\\Kyle\\Desktop\\psx2\\Qix_Neo_(USA).PBP | 2/13/2017 1:24:15 AM | 3/5/2021 9:27:59 PM | 3/6/2021 11:26:14 AM | 32,544,337 | | | | PBP | A | | Rayman_(USA).PBP | 22cd1aa497319dd08bef44ca56dcd2fd | 7f9ef6bf87df81332b3c2286eb4809ce0e365957 | 68fe04f9 | bd0923ca4ad4e2f99f6b80ac05002e28d645fe66f086c7a5f0797702decd1099 | b7ed6580aa799fb919e6d1a2aa5a430c90d9efef22c36b380c4e80e5fbe5ebee5d3ae9e92961aaa2a2650fc05f00e117def8631bb6c9dfc2a8b653d4ac05b1cf | 2834dd0bf629463b98f568c8dcf91238bb398a40ad9c86a3094af4ce25e3bb280519b1a58e4938531e7a3e3032a50a0f | C:\\Users\\Kyle\\Desktop\\psx2\\Rayman_(USA).PBP | 2/16/2017 1:22:47 AM | 3/5/2021 9:28:31 PM | 3/6/2021 11:26:19 AM | 508,566,977 | | | | PBP | A | | Rayman_2_The Great_Escape_(USA).PBP | dcb046d8a70c254af2af4f78a775926b | 74dd09946f4758b6997b24ec5d33dbd58c91d79e | 40faea6b | 9d0aa155a02e00c68074b5bff851c56a57ef9810e2283a7ba96b61aac7a22abc | 392b9a7448d9fe72692e22406116feba6c358064f510ca6f59109b91177a6e000626dc93a9f483c911c4cc5ed5a6715ba7ad60bc487824b53bfc1fc54b57f216 | cf611fd0df716b4842982e0da6e8072609b183c42fb13a0b2308257c79e6c1eb0a8af4891f3dcb96d5a5f7d37a878847 | C:\\Users\\Kyle\\Desktop\\psx2\\Rayman_2_The Great_Escape_(USA).PBP | 2/16/2017 12:25:51 AM | 3/5/2021 9:28:43 PM | 3/6/2021 11:26:36 AM | 494,471,489 | | | | PBP | A | | Robotron_X_(USA).PBP | 9af6b13f345fb032a77c96bd4ce36f2e | 0d762d1c7eefe26c766f85bcab2afbf9a0df5986 | 88b4c5af | 213d888a30edc17a9a7d68978292919a29ee049dc078ff45f5e6747aef497101 | 9aceeecf1a484cc762daad364dba372f46af50117f4152ed0d6bee31fdd0068e7fa2caa291a730f0738c37c781fd8be6bf4d6ace7cd1ddf2eba7ae496b582709 | da769f26e68f05fd4c2a0e2e959eaaeea51b59d9388e4380f9c5b519f33b7020c09a4d2d1dc5aecdfd32c54176641354 | C:\\Users\\Kyle\\Desktop\\psx2\\Robotron_X_(USA).PBP | 2/19/2017 7:30:30 AM | 3/5/2021 9:28:43 PM | 3/6/2021 11:26:45 AM | 654,347,665 | | | | PBP | A | | SimCity_2000_(USA).PBP | 9b5f719aabdd82b337629c5f3f26930a | 88e853a682d2450d83cd19b98f467979054bd02d | b2bcc755 | 4e5ff9eda034dba1912b0acf3c9a5488d67bc934a22f5e76d1e2c0a3545d3f4e | da9e955652c51dbf148269900243b308b2e131ba47af3aecd599b2faa5c22bfc02fb25e9037d940f3c6160bf08568c8d33b4e6ce7a232fb60190c4ca6c886d82 | e56180af9ea75333f29e9de3b1384f9be743b316c58558b3104f7325a1f17983fa2c357d9fac421fbc8fce768d26a4f9 | C:\\Users\\Kyle\\Desktop\\psx2\\SimCity_2000_(USA).PBP | 2/15/2017 1:56:26 AM | 3/5/2021 9:29:48 PM | 3/6/2021 11:26:53 AM | 42,989,057 | | | | PBP | A | | Space_Invaders_(USA).PBP | 35aea34bebba0235336f2a792e12916a | fd86f451676d317e41b343b359e9e94f3d8a78b0 | 0c00da46 | 3b761f9ba859e5599b6b1e7f48bdf95b0fbb792674fbc0e3cb2cc66776281fc2 | 77180fc4d5e39865ac4812ce030d6d5680166dafeb6efdedc93f9259694357594301541d4f8e54761d26ee93a5058d2750c0a76d39126a5e2ec708b41354f5c1 | b8a2b430be4454936e216ded094d2923abbda5c513c5de3b089687f22329c826a262976ee36c3fdc5c7bc4328ec834c6 | C:\\Users\\Kyle\\Desktop\\psx2\\Space_Invaders_(USA).PBP | 2/19/2017 8:40:11 AM | 3/5/2021 9:29:23 PM | 3/6/2021 11:27:04 AM | 136,956,385 | | | | PBP | A | | Speed_Punks_(USA).PBP | 432a47a9e105fe3e651b48b07a0da8cd | 1094f02020823086681f20192e620c6b82d41d37 | 7a51d60b | d1115b2155d4a57025bf6ce54bab861249111c8d029892ae1f72eff52e2ef65b | 80a2bb64d24f797d1cbb0fe756f0ea6c63f4e6e033ac6bb33bdff4359925c99fcb7e7ade62dd3a1a9d6f0d17e9ce083416a406d8b7a5626a431d33088b124ff0 | 372c3299ba486f54ba571bf316af2318e4c1d4bc3d30e61115abc852c303856c837170b52ba2af668533a789697062fd | C:\\Users\\Kyle\\Desktop\\psx2\\Speed_Punks_(USA).PBP | 2/19/2017 7:41:49 AM | 3/5/2021 9:30:22 PM | 3/6/2021 11:27:13 AM | 478,377,937 | | | | PBP | A | | Spider-Man_(USA).PBP | 4cf220e38accc6a1d4f050c4a18529dc | 8134b74ec6fc13c2c47325775dba650d81efa62f | 95aa8c70 | 59e777cc1763bdd259e6915551c2b635077f19195ff0925534048c324f8e1d12 | 65e532f1f5351ceace8e56e60426c6424d199b58579b2dd717554f9d35d06d6ddc9110444e6d5a36da5a63e56c8ec58abcd11aab3fa84c18a5305f41c14220d9 | ae4698684bff431ad25e96c87dcde1fc0cfe2b867f2a9733f9a311043aea3ce64e5d1d93a521a0c666cf7328a0c16d1a | C:\\Users\\Kyle\\Desktop\\psx2\\Spider-Man_(USA).PBP | 2/19/2017 2:58:19 AM | 3/5/2021 9:31:01 PM | 3/6/2021 11:27:20 AM | 439,647,457 | | | | PBP | A | | Spider-Man_2_Enter_Electro_(USA).PBP | 4cc3969f5e147f9f6be2b507b1d9f132 | 37cfc23aa78a92b6f52024e783c62732134d6358 | dd9a4c4f | 8b5bb73af618cb8fceece387fb3980ea74f34027aaf373f52b172c4d5ba0a8c3 | 76c3ccba98dd51c5412a803b2bb21c843e17969fcba66a667c0a60e5054dba2e1cf03cd8affc7b37a4efaafbe27d09ecf82637f05fc65e6f0c638045eec5384e | 0d8d3bec3c4d87830855444cbaad8fa5832036e7962995aaa124aee37111dee0b7c0e2401a3993cae030f0deb2676d7d | C:\\Users\\Kyle\\Desktop\\psx2\\Spider-Man_2_Enter_Electro_(USA).PBP | 2/19/2017 8:44:32 AM | 3/5/2021 9:29:51 PM | 3/6/2021 11:27:36 AM | 378,939,169 | | | | PBP | A | | Tempest_X3_(USA).PBP | 88bd65b2ad498dcbb22214c1b2197c40 | f20ddf4f5622930f8f9451386b2246243e6d3be6 | b91e77cb | 037cdd2eebc7ffbfacc1f6e95a8829c6abb69c2991f38651824a9dddd62fc219 | 1d7e0d52d50c840f237e75db140f4c52983e4d1289aa598dad7129eb996aa0a9dcefb39e6699c2d99257f96a41ecb7ce8b93d807191f4b2640592c2891461e7d | 0318954807463c0e0098d5f082233b79d390779cae005923733d12b96b1f2fbdb303feb344e5f6ffba5d6d821dd5a162 | C:\\Users\\Kyle\\Desktop\\psx2\\Tempest_X3_(USA).PBP | 2/18/2017 4:05:42 PM | 3/5/2021 9:32:15 PM | 3/6/2021 11:27:45 AM | 248,803,841 | | | | PBP | A | | Test_Drive_Off-Road_2_(USA).PBP | 77f41385cdaeead01822ad13f22356c7 | 5700d69de9ade2aa924d1dc0db6390df6f99c627 | 525fe73c | d450c2d118fa30fe1d25221c3fa23aeea6592f06c1189479cfa8ce5f1069c1c8 | 3f02af8b82c77b10a74459fb58b2db776b70d854bf095953ad741b800aa394c59f760aa4ed1d3b1af4f5f58e7a7cc1182bf76816c0e5611de65228a06e3418e8 | 78e332a12cfa784e693636e0c2b747fa14fdc5fa3ab94632089826766123156c865f22de038a148ba0f71ebbd6fabcf8 | C:\\Users\\Kyle\\Desktop\\psx2\\Test_Drive_Off-Road_2_(USA).PBP | 2/17/2017 11:40:04 PM | 3/5/2021 9:32:35 PM | 3/6/2021 11:27:59 AM | 140,132,065 | | | | PBP | A | | Twisted_Metal_III_(USA).PBP | 1ab2035fdf6fec9bc5971e1c2e9f1de9 | 77fae3dd9b1082250a305e47a998139fdeb056da | 47bd2c48 | 43f1883f834b8faa65ed526470f4328dc3fa525d1130f8120c7533061e564f3f | f91098de37870f9ce0ba1a1b657d5e5dc6b145541cbf38beac5e412410d199939f4f817f20d738fd2c26fd601c13f0d348f177d06fcde4b63d1dcc7e24edba98 | ffa94f657d345e78441f7bfa0d3a713b6600d761b284b4b0790b45ba679f2abe7b2a1aec26ce1de50d6f2b2bbdf331b7 | C:\\Users\\Kyle\\Desktop\\psx2\\Twisted_Metal_III_(USA).PBP | 2/19/2017 7:16:31 AM | 3/5/2021 9:32:42 PM | 3/6/2021 11:28:10 AM | 564,892,817 | | | | PBP | A | | Um_Jammer_Lammy_(USA).PBP | 8b39018b89e8af9b6893e0970927f6a8 | 8e5d1daec95a28535ebb85e755386e79a9447308 | 21d3a6e3 | 07594a3213994e1afa6ddec8aff1028e984d4187f931e1cd4fc144e3b8e6817e | c8b18cb14e0f2cf5440d54bd9d477bb3afe6326d9bb37aa8f5eb566c458e6e29843bf413e92f56a871e182d7d717d64f887f4e6cdd4a1a4797fb1b33b8cb0f68 | b18838bddf8eff656a941ed7fd2d53088a404f88613a0d9268e4bee1ccdc3623bd0736fe4651d9078028fbe2f407c8da | C:\\Users\\Kyle\\Desktop\\psx2\\Um_Jammer_Lammy_(USA).PBP | 2/19/2017 6:47:52 AM | 3/5/2021 9:33:24 PM | 3/6/2021 11:28:20 AM | 576,296,993 | | | | PBP | A | | Walt_Disney_World_Quest_Magical_Racing_Tour_(USA).PBP | 69b19f033ae947385bafdf73b8a38021 | 1a77a1b78e9613730aa624513b5fc938604df294 | 450e774e | e214aed91f5a35bdd4b3f1e81ffe520f1ffb25e5b790791e53fe977abdd3b4c1 | c91a06f5a9df976d22136d8c251cc9466688883602aff4fd4124c734b459848d7b59c2c161954d210f99afd65ed9c3e11eca4fc6178cf2da67e02ee0b3f3eda7 | ae38a451c1054b3f9c1a94df1615473d0169a8beddf3e3f7faf6c4438ba0d68210dbd5d57510a9aa83e7f0c97fd20d9f | C:\\Users\\Kyle\\Desktop\\psx2\\Walt_Disney_World_Quest_Magical_Racing_Tour_(USA).PBP | 2/19/2017 4:55:12 AM | 3/5/2021 9:34:13 PM | 3/6/2021 11:28:43 AM | 206,896,129 | | | | PBP | A | --- Compatibility List Thanks to $Lud for this guide Warning! This compatibility list is for the optimized PCSX ReARMed version of the wiki, see more here. Game Title Region Compatibility Device Average FPS Comments Crash Bandicoot Europe (PAL) Graphical/Audio Issues Pocket Go 20-45 Some FPS drop down in some parts of levels, audio can be heard, with some issues. Driver - You Are the Wheelman USA (NTSC-U) Graphical/Audio Issues Pocket Go 28-35 Can be played, but with lag, audio is a bit choppy, but you can understand what the narrator says. Gran Turismo Europe (PAL) Playable Pocket Go 29-40 At start and in menu selector, screen is bigger than the console screen, in-game can be playable decently, you can hear the background music in mid quality. Gran Turismo 2 Europe (PAL) Graphical/Audio Issues Pocket Go 36-44 You can heard in-game audio in good quality very often. Klonoa - Door to Phantomile Europe (PAL) Graphical/Audio Issues Pocket Go 28-35 Choppy audio, uncomfortable. Rayman Europe (PAL) Playable Pocket Go 50-52 Audio can be heard in good quality (2D game). Resident Evil Europe (PAL) Playable Pocket Go 46-50 Choppy audio with lag spikes sometimes, fast when playing and moving the player. Spider-Man Europe (PAL) Graphical/Audio Issues Pocket Go 28-30 Choppy audio with uncomfortable noise in the background, but can be played at mid quality. Needs a tweak with configuration for L2-R2 triggers. Tekken 3 Europe (PAL) Graphical/Audio Issues Pocket Go 27-33 Very uncomfortable when playing, choppy audio. Tony Hawk's Pro Skater 3 Europe (PAL) Graphical/Audio Issues Pocket Go 28-37 Can be heard background music, in-game music is very choppy and uncomfortable. Compatibility List (Old) Thanks to Pifen for this guide Notice all of this testing is for anyone wondering if the game they want to play works. The emulator for pocketgo is still infant with what it can do. Don't expect things to run on first try and what i consider good frames may not be to your liking. I will not be testing out your liked games so don't ask me to download x or y game. All tests done with PocketGo CFW 1.1 - Bios 1001 - GPU UNAI - Default sound - EBOOT format is .PBP - PS1 format is .cue/.bin Some games choosen to use PSP EBOOT mostly for space reasons Great example is the 10+ files in PS1 Ace Combat Easier to use PSP format For control schemes to original games use PSX database. \ufeffFORMAT NAME STATUS FRAME SKIP FRAME STATUS NOTES PSP ALIEN TRILOGY WORKING AUTO FS SLIGHT FRAME DROP PSP ACE COMBAT WORKING FS 1 BARELY ANY DROP PS1 ACE COMBAT 2 WORKING FS 1 BARELY ANY DROP PS1 ACE COMBAT 3 WORKING FS 1 BARELY ANY DROP PS1 BATTLE TANX GLOBAL ASSAULT WORKING FS 1 HEAVY FRAME DROP NOTICEABLE NEAR TANK EXPLOSIONS PSP BLOOD OMEN LEGACY OF KAIN WORKING FS 1 MENU ISSUES BUT VERY PLAYABLE PS1 C&C RETALIATION WORKING AUTO FS SLIGHT FRAME DROP NORMALLY WHEN MOVING MANY UNITS PS1 C&C RED ALERT WORKING AUTO FS SLIGHT FRAME DROP NORMALLY WHEN MOVING MANY UNITS PS1 C&C WORKING FS 1 SLIGHT FRAME DROP NORMALLY WHEN MOVING MANY UNITS PSP CASTLEVANIA SYMPHONY NIGHT WORKING FS 1 BARELY ANY DROP PSP COLONY WARS WORKING FS 1 NOTICEABLE DROPS NEAR LARGE SHIPS DON'T DO THIRD PERSON PSP COLONY WARS VENGEANCE WORKING FS 1 NOTICEABLE DROPS NEAR LARGE SHIPS DON'T DO THIRD PERSON PSP COLONY WARS 3 RED SUN WORKING FS 1 NOTICEABLE DROPS NEAR LARGE SHIPS DON'T DO THIRD PERSON PSP DIGIMON WORLD 1 WORKING FS 1 SLIGHT FRAME DROP PSP DIGIMON WORLD 2 WORKING FS 1 SLIGHT FRAME DROP PS1 DIGIMON WORLD 3 WORKING FS 1 SLIGHT FRAME DROP PS1 DINO CRISIS WORKING FS 1 SLIGHT FRAME DROP PSP DINO CRISIS 2 WORKING FS 1 SLIGHT FRAME DROP SOME ISSUES WITH IN GAME CUTSCENES PS1 DINO CRISIS 2 WORKING FS 1 SLIGHT FRAME DROP SOME ISSUES WITH IN GAME CUTSCENES PSP DUNE 2000 WORKING FS 1 SLIGHT FRAME DROP PS1 DUNE 2000 WORKING FS 1 SLIGHT FRAME DROP PS1 MEGAMAN LEGENDS WORKING FS 1 SLIGHT FRAME DROP AIMING IS A PAIN BUT ALLIVIATED WITH AUTO AIM PSP MEGAMAN LEGENDS WORKING FS 1 SLIGHT FRAME DROP AIMING IS A PAIN BUT ALLIVIATED WITH AUTO AIM PS1 MEGAMAN LEGENDS 2 WORKING FS 1 SLIGHT FRAME DROP AIMING IS A PAIN BUT ALLIVIATED WITH AUTO AIM PSP MEGAMAN LEGENDS 2 WORKING FS 1 SLIGHT FRAME DROP AIMING IS A PAIN BUT ALLIVIATED WITH AUTO AIM PS1 FRONT MISSION 3 WORKING FS 1 BARELY ANY DROP MAIN MENU AT START IS BLACK BUT JUST CLICK X TO START GAME AND IT PLAYS PERFECTLY PS1 FINAL FANTASY 7 WORKING FS 1 SLIGHT FRAME DROP ON HEAVY DUTY SPELLS PS1 HYDRO THUNDER WORKING FS 1 ALMOST UNPLAYABLE NEEDS BETTER GPU SUPPORT PS1 GAMESHARK V2 SOUNDS ONLY PS1 GAMESHARK V4 (UNL) NOTHING PSP GEX WORKING FS 1 BARELY ANY DROP PSP GEX 2 WORKING FS 1 SLIGHT FRAME DROP PSP GEX 3 WORKING FS 2 SLIGHT FRAME DROP RECOMMEND FS 2 FOR THIS GAME THEY WENT ALL OUT WITH THE DETAIL PSP GRAN TURISMO WORKING FS 1 SLIGHT FRAME DROP MAIN MENU IS WIDE BUT DOESN'T AFFECT GAMEPLAY PSP GRAND THEFT AUTO WORKING FS 1 BARELY ANY DROP THE GAME IS TINY SO EXPECT TO DIE FROM GUNSHOTS YOU BARELY SEE PSP GTA LONDON WORKING FS 1 BARELY ANY DROP THE GAME IS TINY SO EXPECT TO DIE FROM GUNSHOTS YOU BARELY SEE PSP IN THE HUNT WORKING FS 1 SLIGHT FRAME DROP PSP INTELLIGENT QUBE WORKING FS 1 BARELY ANY DROP PSP LEGO ROCK RAIDERS WORKING FS 1 SLIGHT FRAME DROP NEAR MANY PLACED BUILDINGS PSP MARVEL VS STREET FIGHTER WORKING FS 1 BARELY ANY DROP PSP MDK WORKING FS 1 SLIGHT FRAME DROP PS1 METAL GEAR SOLID WORKING FS 1 SLIGHT FRAME DROP PS1 NEED FOR SPEED 3 WORKING FS 1 SLIGHT FRAME DROP DUE TO JUST OVERALL SPEED AND TRACKS PSP PANDEMONIUM! WORKING FS 1 SLIGHT FRAME DROP PSP PANDEMONIUM! 2 WORKING FS 1 SLIGHT FRAME DROP PS1 PANZER FRONT WORKING FS 1 BARELY ANY DROP PSP PARASITE EVE CRASH PSP PARASITE EVE 2 CRASH PS1 PARASITE EVE 1 WORKING FS 1 SLIGHT FRAME DROP GPU STRUGGLES WITH TEXT AND AYA MODEL BUT STILL PLAYABLE PS1 PARASITE EVE 2 INTRO GAME SHOWS INTRO BUT DOESN'T REACH MAIN MENU PSP RESIDENT EVIL 1 WORKING FS 1 BARELY ANY DROP PSP RESIDENT EVIL 2 WORKING FS 1 BARELY ANY DROP PSP RESIDENT EVIL 3 WORKING FS 1 BARELY ANY DROP PS1 SILENT HILL WORKING FS 1 VERY HEAVY FRAME DROPS NEEDS BETTER GPU SUPPORT PSP SILENT HILL CRASH PSP SPYRO 3 WORKING FS 1 SLIGHT FRAME DROP PSP STEEL REIGN WORKING FS 1 SLIGHT FRAME DROP PSP SUIKODEN CRASH ON START PS1 SUIKODEN WORKING FS 1 BARELY ANY DROP PS1 SUIKODEN 2 BUGFIXED PATCHED WORKING FS 1 BARELY ANY DROP PSP SYPHON FILTER WORKING FS 1 BAD FRAME DROPS ON SOME LEVELS WOULD SUGGEST PATIENCE WITH THIS ONE PSP TEKKEN 3 WORKING FS 1 HEAVY FRAME DROP STILL PLAYABLE BUT SOME MOVES GO INVISIBLE DUE TO FRAME DROP PSP TOMB RAIDER WORKING FS 1 BARELY ANY DROP PSP TOMB RAIDER 2 WORKING FS 1 BARELY ANY DROP PSP TONY HAWK WORKING FS 1 SLIGHT FRAME DROP PSP TONY HAWK 2 WORKING FS 1 BAD FRAMES GAME IS PLAYABLE BUT YOU WILL DESPAIR PSP VIGILANTE 8 WORKING FS 1 FRAME DROPS ON MANY TERRAIN OBJECTS BUT VERY PLAYABLE SUGGEST L2 AS TRIANGLE AND R2 AS CROSS FOR WEAPON FIRING, YOU MAY NEED TO PUT CROSS AS START BUTTON ALSO FOR MENU PSP VIGILANTE 8 2ND OFFENSE WORKING FS 1 FRAME DROPS ON MANY TERRAIN OBJECTS BUT VERY PLAYABLE SUGGEST L2 AS TRIANGLE AND R2 AS CROSS FOR WEAPON FIRING, YOU MAY NEED TO PUT CROSS AS START BUTTON ALSO FOR MENU PSP WARCRAFT 2 WORKING FS 1 BARELY ANY DROP NOTICE TEXT IS SMALL, IT'S ALL VOICED SO LISTEN TO GAME PS1 WILD ARMS WORKING FS 1 BARELY ANY DROP MAIN MENU FRAMES ARE BAD PS1 WILD ARMS 2 WORKING FS 1 BARELY ANY DROP PERFECT MAIN MENU PSP WIPEOUT 3 WORKING FS 1 BARELY ANY DROP PSP WORMS WORKING FS 1 BARELY ANY DROP WORMS ARE VERY TINY MEMORIZE WHO YOUR TOONS ARE PSP XENOGEARS 1.0 STUCK BOOTING PSP XENOGEARS 2.0 WORKING FS 1 BARELY ANY DROP MAIN MENU IS STRETCHED BUT EASY TO SELECT NEW GAME PS1 YU-GI-OH! FORBIDDEN WORKING FS 1 BARELY ANY DROP","title":"PCSX-ReARMed"},{"location":"PCSX-ReARMed/#configuration-pack","text":"HYJiNX187's PCSX-Rearmed Config Library v1.0 Download here v1.1 Release Notes - Added 25 PSX CFGs (Total 125) - Update Gmenu2x Entry to support *.cue files and hide *.bin v1.0 Release Notes - Added 100 PSX CFGs - Added Gmenu2x Custom Entry - Added pcsx.dge wrapper script for loading cfg","title":"Configuration Pack"},{"location":"PCSX-ReARMed/#introduction","text":"This package was created to add PSX support on top of the guide that RetroGameCorps provided for the Powkiddy v90. The guide can be found at the following location: https://retrogamecorps.com/2021/02/01/review-powkiddy-v90/ It is recommended that you follow this guide, including the step to install the updated pcsx binary. NOTE: The updated pcsx should show \"October 2019\" under the \"Credits\" submenu inside of pcsx. To make 100% sure you have this updated version, I am including the link below: https://retrogamecorps.files.wordpress.com/2021/02/pcsx.zip YOU WILL NOT ACHIEVE 60FPS WITHOUT THE ABOVE PCSX VERSION! Though this was designed and tested on the Powkiddy v90, these configs should work fine on all devices running Miyoo 1.3.3. (example powkiddy q90 and the first pocketgo) Your mileage may vary on devices other than the one I have targetted with this release.","title":"Introduction"},{"location":"PCSX-ReARMed/#pre-requisites","text":"Because I used many different BIOS to create these custom configs, it is recommended that you provide the following PSX BIOS. I cannot provide these to you, you will need to locate them and ensure that they are placed in \\emus\\pcsx_rearmed\\bios - PSXONPSP660.BIN - SCPH1001.BIN - scph5500.bin - scph5501.bin - scph5502.bin - scph7001.bin - scph7502.bin The 100 cfg files provided by this package expect NTSC PBP \"roms\" to be named the same and reside in /roms/PS1/*.PBP You will need to source your own PBP files and you should rename them to match the names of the cfg files located in \\emus\\pcsx_rearmed\\.pcsx\\cfg\\*.cfg If your PBP files are not named exactly like their corresponding CFG they will not load. Example: \\roms\\PS1\\Alien_Resurrection_(USA).PBP \\emus\\pcsx_rearmed\\.pcsx\\cfg\\Alien_Resurrection_(USA).cfg NOTE: The PBPs I used to test were official PBPs provided by PSN Servers. PSX ROMs available across the internet are of many different formats, regions and versions. I cannot help you find these and your mileage may vary if you use ROMs that are not official NTSC PBPs of the games supported in this release. Sharing of BIOS or PBPs is illegal and you should not ask for help in obtaining these. Officially, you should be purchasing these games and scraping them off of your devices.","title":"Pre-Requisites"},{"location":"PCSX-ReARMed/#installation","text":"Unzip the contents of the zip file into the \"Main\" partition of you Miyoo 1.3.3 CFW SD Card.","title":"Installation"},{"location":"PCSX-ReARMed/#additional-information","text":"This package provides configs for the top 100 games as defined by the GameFAQs community and was created using the following thread https://gamefaqs.gamespot.com/boards/916392-playstation/73165050 Both my package and RetroGameCorps Powkiddy v90 Guide are based on Miyoo CFW 1.3.3 which can be found here: https://github.com/TriForceX/MiyooCFW PCSX-Rearmed was original ported by \"Sauce\" aka \"GameBlaBla\" https://github.com/gameblabla/pcsx_rearmed/ The pcsx.dge and accompanying Gmenu2x entry are a work around for the following known issue: https://github.com/notaz/pcsx_rearmed/issues/163 The -cfg flag does not allow you to directly pass a custom cfg to PCSX. My DGE script will copy and overwrite the global pcsx.cfg file for every game you launch under the Gmenu2x folder. When/if this bug is resolved, the cfg files should be able to be passed with a -cfg parameter file, but you will need to use my script until the bug is resolved. Don't you dare ask for PBPs or BIOS files! View Hash List here --- | Filename | MD5 | SHA1 | CRC32 | SHA-256 | SHA-512 | SHA-384 | Full Path | Modified Time | Created Time | Entry Modified Time | File Size | File Version | Product Version | Identical | Extension | File Attributes | |-------------------------------------------------------|----------------------------------|------------------------------------------|----------|------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------|-----------------------|---------------------|----------------------|-------------|---------------|------------------|------------|------------|------------------| | Chocobo_Racing_(USA).PBP | ff8d30c1cfb0f572032918b6903003fb | d0d77feabe5a56e317adf5926faf5af6c0d73fae | 05602c74 | 7cfc2d7192aa9a710b3a45c8e528a43ea37d90df86cf1218112322453ef3f2e6 | cd2a3653359efa8a384feff0c38469452261ba4ca11569d72533806330e0ac7126e231c7cca99f54b45bea6e35efaa782b8faea45ec1e70635599b96be4b9a97 | eeb141727b29b2089755e3709ef97471dbbf1ba9bfe3caffca5a1b70c3ebe9ec8a21da121fafdbd89cd3caea47d1f0c0 | C:\\Users\\Kyle\\Desktop\\psx2\\Chocobo_Racing_(USA).PBP | 2/18/2017 6:16:59 PM | 3/5/2021 9:22:26 PM | 3/6/2021 11:22:55 AM | 243,383,841 | | | | PBP | A | | Chocobos_Dungeon_2_(USA).PBP | bd812e532b3a1bc956720c2668fe5e09 | 0ed150e9795c93e07c9eb014f60ca9564e536206 | 2227e1ad | 2c2c240a28b984ea7ad62ca5480966dd9e4fccc8f84977b248e0f08226e2e37d | 27f177333ac7904b2b7c22be406212b65ffec70bc2e6882cb7d822962c7498d7ba85d581e5755fd80f37a57b545da29b3b40cade9069f51967af7add80de6972 | 4ea0954990cdb13c97c0a856d105a3e35a668329de3bad702130b49dbef0515932541d376dc1ce3874202c72cbc4002a | C:\\Users\\Kyle\\Desktop\\psx2\\Chocobos_Dungeon_2_(USA).PBP | 2/19/2017 8:47:43 AM | 3/5/2021 9:22:46 PM | 3/6/2021 11:23:09 AM | 329,151,025 | | | | PBP | A | | Civilization_II_(USA).PBP | ce6acbd20d82a73cdb672a30fa86864f | e985202bfa9e887c92b7bd633927b7519c72d9c5 | 3629f040 | 8f6422e6834f2cbce9e72ed5d3feca4f3e2d4893b449d7301bcb977449eb5e08 | c9aa061cb72fb25c6757cdcb0d0d15814fecd57814e8d9c0796a1e6cf97e64cc5039c19384fc7dbed3ec8ecef70059d53adc8424a0a4e1545cca1ac13cbcc66d | 406a18705507b9a4ec3124a2ae6096791003087fc8e1fe5b82f84591f215dc2ce83e2d033380833c4f361ae311fbc4ba | C:\\Users\\Kyle\\Desktop\\psx2\\Civilization_II_(USA).PBP | 2/15/2017 11:18:51 PM | 3/5/2021 9:23:02 PM | 3/6/2021 11:23:38 AM | 325,361,553 | | | | PBP | A | | Disney-Pixar_Toy_Story_Racer_(USA).PBP | becbd19d7123d9e8da2b2586486c05be | 419da99abbf2ae35043b0dc86569793905c852fa | 03fb4020 | 18253c9a74bbc6783cda578327a6e3eb0f950be0244e5ba7de228562b8ab42db | 82051526a7fba0c17f46567e39d0edf4741a5e62651cde68db0d556afba4b8f3bb1b4b2db518ba2f30516c3f73a3c68ed3f3143ad23f95118e95dbfe1d2f4ef3 | eb38a8bdb9e2c9a0732814b21fe378fb73b46f2e808a0b6197c1554211e4d20a014a8edd2dc7d912c4089ab15f53d2c8 | C:\\Users\\Kyle\\Desktop\\psx2\\Disney-Pixar_Toy_Story_Racer_(USA).PBP | 2/19/2017 2:20:24 AM | 3/5/2021 9:23:48 PM | 3/6/2021 11:23:52 AM | 141,900,865 | | | | PBP | A | | Duke_Nukem_Time_to_Kill_(USA).PBP | 5f34bdabea7afc3dfcceb0169788765a | 1ab20c931fac1fc2754c1110b67e4755d73af689 | 81af108a | 61cacbaa0e1ec874c558cbfd746fb66bb1670cf9dc0f727c4cab04f591c56977 | 26df6127668d24ad6b5c31404d117af0d38a16a90d9823c5edbbe05903c463d8dc436ea7174a8b0443e7625e01703b59fe43448afa96f0e7c555508b4930acc6 | c384b26309bc57372486a96bac9f176071cec83501380406e6565f9fd9f299146ed2c63d60e51aa1db67b5f19acdf014 | C:\\Users\\Kyle\\Desktop\\psx2\\Duke_Nukem_Time_to_Kill_(USA).PBP | 2/19/2017 1:31:11 AM | 3/5/2021 9:23:33 PM | 3/6/2021 11:24:36 AM | 230,698,721 | | | | PBP | A | | Frogger_(USA).PBP | c4b5240f2f43300af99959373ea1a948 | 734fb484f029b7117532872b8c45de684a4bb7f1 | ef4e82a8 | 974d42f1b5aab8ade09bcb94a487f834b9cfc256108f6b8388ab4f8255a8e54e | 382f9356e57503c705ab69912069396257d3345faeb1e3b0a40c0eccddcaafc9f2d7f4c8cbe0a88fbb9ac95d649ce3ba99b8d9fb705667200c368b8a0a7fdd9b | a9b827e3a977bd41fa1da43230ae0c5dade0eb0ea061e123b3e7227e6002d960f91270493d207e1432fd81b50ef1c279 | C:\\Users\\Kyle\\Desktop\\psx2\\Frogger_(USA).PBP | 2/19/2017 1:40:03 AM | 3/5/2021 9:24:00 PM | 3/6/2021 11:25:01 AM | 159,242,145 | | | | PBP | A | | Galaga_Destination_Earth_(USA).PBP | 1474b53fa9d9383daf188078395b0d46 | fcbe450be8511391c6d1f028138b021dc2593bb1 | ce5fac74 | f09a24ee18ee6a35e4906cc081f5f3a91ba05573ed6df349381b5d86e75dfe63 | 9000048e6d01c584759364f7fded63318eba2769b643d3b566f1667d617a1332288cd4e25d2d2684b02341ee2453ef12d4daa0288b0cc47339d64498c5c13e4b | 7c764f9a51ad94891625a2a85cf8e196289959b9c4d8f72d009d4d64543738fa04eaa53fda09a794a17d514bcc00d496 | C:\\Users\\Kyle\\Desktop\\psx2\\Galaga_Destination_Earth_(USA).PBP | 2/19/2017 12:28:50 AM | 3/5/2021 9:25:00 PM | 3/6/2021 11:25:20 AM | 347,023,665 | | | | PBP | A | | Kings_Field_(USA).PBP | 2afee2e98591434ad988b4e5b9ce8414 | 17a51af8a187e1de6922c2352b32dd2d23cc68f3 | 6187a6af | 628b358249e317549cb4356d7c6f686882ecce02f8cf8b1555a7203bba1d83ef | d5f4c946a1994a8ef491dac4f941442547bd963403c03f84e8cdff5931145ab4e8248e225cd1ae4903deda498d21ba6c9c27504725cf3072b546b68d21804951 | 506353625f3d72ad680b650d2b7615331f9d311a0f52b36c1ba5586f2fb5abcb1e49089868940a54b6ef3e727d00bd7e | C:\\Users\\Kyle\\Desktop\\psx2\\Kings_Field_(USA).PBP | 2/18/2017 9:47:55 AM | 3/5/2021 9:26:01 PM | 3/6/2021 11:25:42 AM | 154,985,761 | | | | PBP | A | | Micro_Machines_V3_(USA).PBP | e86fb48676ca6a6c85ba294acbafd281 | 626afdadc8754d1e88f80341bc3ee6a1c7eacb7e | 4840d220 | 6dcb77bb56ef51b4fe77dde8a41fcdf88eba727100afc852658fcad79266311e | 1f2d7ff5b2ded87cb1092ac130780653413ccbb748d3917ef725842591003fde82ef359b8c9c77dd7b77a7325a134973035e1e2d961e22ae2d056677efb19bb2 | 6d291f008ac72754df939d419e30cdef50d13b627a18bc0b803fba28b5c433cf1ea2324ce8419f2f48899b2b5edd962d | C:\\Users\\Kyle\\Desktop\\psx2\\Micro_Machines_V3_(USA).PBP | 2/19/2017 1:42:05 AM | 3/5/2021 9:26:41 PM | 3/6/2021 11:25:53 AM | 238,944,433 | | | | PBP | A | | Missile_Command_(USA).PBP | 43c9bd929ba6817e431a25531ee5fa8d | 948b4d071034cd674f1d093042d16731e3cacb7c | 90e9c50c | cecece99a600eeaf9bb3ec80bdc8f882c55ac2d5997e5b1077ba37685f4313cb | 8b0578fa5b55a5bf528d132ae4976afe37b6cd60de4552c024ac9be24709ccc3734f3920c3d3cbb7d2650ee0bec4baf5f9635d963e2c3c2bdd09445123e24561 | 5acc1198bdcdf1ecbe831d56ec2ba6021d41c5fb778f6a559b26673ae9b982ba4db7102a7e692ffdf190d7a479756da1 | C:\\Users\\Kyle\\Desktop\\psx2\\Missile_Command_(USA).PBP | 2/19/2017 5:09:18 AM | 3/5/2021 9:26:36 PM | 3/6/2021 11:26:01 AM | 211,668,353 | | | | PBP | A | | Q-bert_(USA).PBP | 614888349240ada6411a1c102e9ce7bf | 6ddb47d517825edf10245c8fc49378649eb8772b | bcb9ad3b | 845ddf4bd0dc0fb3643e066d7d472c89517397b648a295074d04679b45fc008d | 7ef3669d3cbdaf5c84ecfd05459bba32373d3f062e465a1bf6be66e51ed75c71bb15f95cd33419d21f93e2c051f17531ff65b4761675aef00e2dc4b574a396ab | 84bda6e2300d54d71cffa9e8ecd388f9e4a23ffdf7e6ef660cd3fd68239304b1813bd294b009e60d666a4aae6b6d9c7b | C:\\Users\\Kyle\\Desktop\\psx2\\Q-bert_(USA).PBP | 2/18/2017 11:21:23 PM | 3/5/2021 9:27:55 PM | 3/6/2021 11:26:06 AM | 142,300,385 | | | | PBP | A | | Qix_Neo_(USA).PBP | 879e02da0f9a1233583ef93e300fc343 | 1741db32b510b1e2f1913e113a7fd33df5d255e5 | 230b4497 | 4445236899a0581f015a0fa5a76d6c96cce88173727510f1b5adf376dc39758e | 90e66310374cb34b8ab5f2a9e947f168c0cc175e19c8f8b1c036d3f83a5a81a613b5e3b3bc4c80dfe6761f8f38340a46b95872e091963ab38304f4eb08261e84 | 9cc82f9f22feba1aee8a1832208ba256e6051c27143b7190470fe46a7de4cdfa5efb8bdffe3bc01ff377343c67c2fd82 | C:\\Users\\Kyle\\Desktop\\psx2\\Qix_Neo_(USA).PBP | 2/13/2017 1:24:15 AM | 3/5/2021 9:27:59 PM | 3/6/2021 11:26:14 AM | 32,544,337 | | | | PBP | A | | Rayman_(USA).PBP | 22cd1aa497319dd08bef44ca56dcd2fd | 7f9ef6bf87df81332b3c2286eb4809ce0e365957 | 68fe04f9 | bd0923ca4ad4e2f99f6b80ac05002e28d645fe66f086c7a5f0797702decd1099 | b7ed6580aa799fb919e6d1a2aa5a430c90d9efef22c36b380c4e80e5fbe5ebee5d3ae9e92961aaa2a2650fc05f00e117def8631bb6c9dfc2a8b653d4ac05b1cf | 2834dd0bf629463b98f568c8dcf91238bb398a40ad9c86a3094af4ce25e3bb280519b1a58e4938531e7a3e3032a50a0f | C:\\Users\\Kyle\\Desktop\\psx2\\Rayman_(USA).PBP | 2/16/2017 1:22:47 AM | 3/5/2021 9:28:31 PM | 3/6/2021 11:26:19 AM | 508,566,977 | | | | PBP | A | | Rayman_2_The Great_Escape_(USA).PBP | dcb046d8a70c254af2af4f78a775926b | 74dd09946f4758b6997b24ec5d33dbd58c91d79e | 40faea6b | 9d0aa155a02e00c68074b5bff851c56a57ef9810e2283a7ba96b61aac7a22abc | 392b9a7448d9fe72692e22406116feba6c358064f510ca6f59109b91177a6e000626dc93a9f483c911c4cc5ed5a6715ba7ad60bc487824b53bfc1fc54b57f216 | cf611fd0df716b4842982e0da6e8072609b183c42fb13a0b2308257c79e6c1eb0a8af4891f3dcb96d5a5f7d37a878847 | C:\\Users\\Kyle\\Desktop\\psx2\\Rayman_2_The Great_Escape_(USA).PBP | 2/16/2017 12:25:51 AM | 3/5/2021 9:28:43 PM | 3/6/2021 11:26:36 AM | 494,471,489 | | | | PBP | A | | Robotron_X_(USA).PBP | 9af6b13f345fb032a77c96bd4ce36f2e | 0d762d1c7eefe26c766f85bcab2afbf9a0df5986 | 88b4c5af | 213d888a30edc17a9a7d68978292919a29ee049dc078ff45f5e6747aef497101 | 9aceeecf1a484cc762daad364dba372f46af50117f4152ed0d6bee31fdd0068e7fa2caa291a730f0738c37c781fd8be6bf4d6ace7cd1ddf2eba7ae496b582709 | da769f26e68f05fd4c2a0e2e959eaaeea51b59d9388e4380f9c5b519f33b7020c09a4d2d1dc5aecdfd32c54176641354 | C:\\Users\\Kyle\\Desktop\\psx2\\Robotron_X_(USA).PBP | 2/19/2017 7:30:30 AM | 3/5/2021 9:28:43 PM | 3/6/2021 11:26:45 AM | 654,347,665 | | | | PBP | A | | SimCity_2000_(USA).PBP | 9b5f719aabdd82b337629c5f3f26930a | 88e853a682d2450d83cd19b98f467979054bd02d | b2bcc755 | 4e5ff9eda034dba1912b0acf3c9a5488d67bc934a22f5e76d1e2c0a3545d3f4e | da9e955652c51dbf148269900243b308b2e131ba47af3aecd599b2faa5c22bfc02fb25e9037d940f3c6160bf08568c8d33b4e6ce7a232fb60190c4ca6c886d82 | e56180af9ea75333f29e9de3b1384f9be743b316c58558b3104f7325a1f17983fa2c357d9fac421fbc8fce768d26a4f9 | C:\\Users\\Kyle\\Desktop\\psx2\\SimCity_2000_(USA).PBP | 2/15/2017 1:56:26 AM | 3/5/2021 9:29:48 PM | 3/6/2021 11:26:53 AM | 42,989,057 | | | | PBP | A | | Space_Invaders_(USA).PBP | 35aea34bebba0235336f2a792e12916a | fd86f451676d317e41b343b359e9e94f3d8a78b0 | 0c00da46 | 3b761f9ba859e5599b6b1e7f48bdf95b0fbb792674fbc0e3cb2cc66776281fc2 | 77180fc4d5e39865ac4812ce030d6d5680166dafeb6efdedc93f9259694357594301541d4f8e54761d26ee93a5058d2750c0a76d39126a5e2ec708b41354f5c1 | b8a2b430be4454936e216ded094d2923abbda5c513c5de3b089687f22329c826a262976ee36c3fdc5c7bc4328ec834c6 | C:\\Users\\Kyle\\Desktop\\psx2\\Space_Invaders_(USA).PBP | 2/19/2017 8:40:11 AM | 3/5/2021 9:29:23 PM | 3/6/2021 11:27:04 AM | 136,956,385 | | | | PBP | A | | Speed_Punks_(USA).PBP | 432a47a9e105fe3e651b48b07a0da8cd | 1094f02020823086681f20192e620c6b82d41d37 | 7a51d60b | d1115b2155d4a57025bf6ce54bab861249111c8d029892ae1f72eff52e2ef65b | 80a2bb64d24f797d1cbb0fe756f0ea6c63f4e6e033ac6bb33bdff4359925c99fcb7e7ade62dd3a1a9d6f0d17e9ce083416a406d8b7a5626a431d33088b124ff0 | 372c3299ba486f54ba571bf316af2318e4c1d4bc3d30e61115abc852c303856c837170b52ba2af668533a789697062fd | C:\\Users\\Kyle\\Desktop\\psx2\\Speed_Punks_(USA).PBP | 2/19/2017 7:41:49 AM | 3/5/2021 9:30:22 PM | 3/6/2021 11:27:13 AM | 478,377,937 | | | | PBP | A | | Spider-Man_(USA).PBP | 4cf220e38accc6a1d4f050c4a18529dc | 8134b74ec6fc13c2c47325775dba650d81efa62f | 95aa8c70 | 59e777cc1763bdd259e6915551c2b635077f19195ff0925534048c324f8e1d12 | 65e532f1f5351ceace8e56e60426c6424d199b58579b2dd717554f9d35d06d6ddc9110444e6d5a36da5a63e56c8ec58abcd11aab3fa84c18a5305f41c14220d9 | ae4698684bff431ad25e96c87dcde1fc0cfe2b867f2a9733f9a311043aea3ce64e5d1d93a521a0c666cf7328a0c16d1a | C:\\Users\\Kyle\\Desktop\\psx2\\Spider-Man_(USA).PBP | 2/19/2017 2:58:19 AM | 3/5/2021 9:31:01 PM | 3/6/2021 11:27:20 AM | 439,647,457 | | | | PBP | A | | Spider-Man_2_Enter_Electro_(USA).PBP | 4cc3969f5e147f9f6be2b507b1d9f132 | 37cfc23aa78a92b6f52024e783c62732134d6358 | dd9a4c4f | 8b5bb73af618cb8fceece387fb3980ea74f34027aaf373f52b172c4d5ba0a8c3 | 76c3ccba98dd51c5412a803b2bb21c843e17969fcba66a667c0a60e5054dba2e1cf03cd8affc7b37a4efaafbe27d09ecf82637f05fc65e6f0c638045eec5384e | 0d8d3bec3c4d87830855444cbaad8fa5832036e7962995aaa124aee37111dee0b7c0e2401a3993cae030f0deb2676d7d | C:\\Users\\Kyle\\Desktop\\psx2\\Spider-Man_2_Enter_Electro_(USA).PBP | 2/19/2017 8:44:32 AM | 3/5/2021 9:29:51 PM | 3/6/2021 11:27:36 AM | 378,939,169 | | | | PBP | A | | Tempest_X3_(USA).PBP | 88bd65b2ad498dcbb22214c1b2197c40 | f20ddf4f5622930f8f9451386b2246243e6d3be6 | b91e77cb | 037cdd2eebc7ffbfacc1f6e95a8829c6abb69c2991f38651824a9dddd62fc219 | 1d7e0d52d50c840f237e75db140f4c52983e4d1289aa598dad7129eb996aa0a9dcefb39e6699c2d99257f96a41ecb7ce8b93d807191f4b2640592c2891461e7d | 0318954807463c0e0098d5f082233b79d390779cae005923733d12b96b1f2fbdb303feb344e5f6ffba5d6d821dd5a162 | C:\\Users\\Kyle\\Desktop\\psx2\\Tempest_X3_(USA).PBP | 2/18/2017 4:05:42 PM | 3/5/2021 9:32:15 PM | 3/6/2021 11:27:45 AM | 248,803,841 | | | | PBP | A | | Test_Drive_Off-Road_2_(USA).PBP | 77f41385cdaeead01822ad13f22356c7 | 5700d69de9ade2aa924d1dc0db6390df6f99c627 | 525fe73c | d450c2d118fa30fe1d25221c3fa23aeea6592f06c1189479cfa8ce5f1069c1c8 | 3f02af8b82c77b10a74459fb58b2db776b70d854bf095953ad741b800aa394c59f760aa4ed1d3b1af4f5f58e7a7cc1182bf76816c0e5611de65228a06e3418e8 | 78e332a12cfa784e693636e0c2b747fa14fdc5fa3ab94632089826766123156c865f22de038a148ba0f71ebbd6fabcf8 | C:\\Users\\Kyle\\Desktop\\psx2\\Test_Drive_Off-Road_2_(USA).PBP | 2/17/2017 11:40:04 PM | 3/5/2021 9:32:35 PM | 3/6/2021 11:27:59 AM | 140,132,065 | | | | PBP | A | | Twisted_Metal_III_(USA).PBP | 1ab2035fdf6fec9bc5971e1c2e9f1de9 | 77fae3dd9b1082250a305e47a998139fdeb056da | 47bd2c48 | 43f1883f834b8faa65ed526470f4328dc3fa525d1130f8120c7533061e564f3f | f91098de37870f9ce0ba1a1b657d5e5dc6b145541cbf38beac5e412410d199939f4f817f20d738fd2c26fd601c13f0d348f177d06fcde4b63d1dcc7e24edba98 | ffa94f657d345e78441f7bfa0d3a713b6600d761b284b4b0790b45ba679f2abe7b2a1aec26ce1de50d6f2b2bbdf331b7 | C:\\Users\\Kyle\\Desktop\\psx2\\Twisted_Metal_III_(USA).PBP | 2/19/2017 7:16:31 AM | 3/5/2021 9:32:42 PM | 3/6/2021 11:28:10 AM | 564,892,817 | | | | PBP | A | | Um_Jammer_Lammy_(USA).PBP | 8b39018b89e8af9b6893e0970927f6a8 | 8e5d1daec95a28535ebb85e755386e79a9447308 | 21d3a6e3 | 07594a3213994e1afa6ddec8aff1028e984d4187f931e1cd4fc144e3b8e6817e | c8b18cb14e0f2cf5440d54bd9d477bb3afe6326d9bb37aa8f5eb566c458e6e29843bf413e92f56a871e182d7d717d64f887f4e6cdd4a1a4797fb1b33b8cb0f68 | b18838bddf8eff656a941ed7fd2d53088a404f88613a0d9268e4bee1ccdc3623bd0736fe4651d9078028fbe2f407c8da | C:\\Users\\Kyle\\Desktop\\psx2\\Um_Jammer_Lammy_(USA).PBP | 2/19/2017 6:47:52 AM | 3/5/2021 9:33:24 PM | 3/6/2021 11:28:20 AM | 576,296,993 | | | | PBP | A | | Walt_Disney_World_Quest_Magical_Racing_Tour_(USA).PBP | 69b19f033ae947385bafdf73b8a38021 | 1a77a1b78e9613730aa624513b5fc938604df294 | 450e774e | e214aed91f5a35bdd4b3f1e81ffe520f1ffb25e5b790791e53fe977abdd3b4c1 | c91a06f5a9df976d22136d8c251cc9466688883602aff4fd4124c734b459848d7b59c2c161954d210f99afd65ed9c3e11eca4fc6178cf2da67e02ee0b3f3eda7 | ae38a451c1054b3f9c1a94df1615473d0169a8beddf3e3f7faf6c4438ba0d68210dbd5d57510a9aa83e7f0c97fd20d9f | C:\\Users\\Kyle\\Desktop\\psx2\\Walt_Disney_World_Quest_Magical_Racing_Tour_(USA).PBP | 2/19/2017 4:55:12 AM | 3/5/2021 9:34:13 PM | 3/6/2021 11:28:43 AM | 206,896,129 | | | | PBP | A | ---","title":"Additional Information"},{"location":"PCSX-ReARMed/#compatibility-list","text":"Thanks to $Lud for this guide Warning! This compatibility list is for the optimized PCSX ReARMed version of the wiki, see more here. Game Title Region Compatibility Device Average FPS Comments Crash Bandicoot Europe (PAL) Graphical/Audio Issues Pocket Go 20-45 Some FPS drop down in some parts of levels, audio can be heard, with some issues. Driver - You Are the Wheelman USA (NTSC-U) Graphical/Audio Issues Pocket Go 28-35 Can be played, but with lag, audio is a bit choppy, but you can understand what the narrator says. Gran Turismo Europe (PAL) Playable Pocket Go 29-40 At start and in menu selector, screen is bigger than the console screen, in-game can be playable decently, you can hear the background music in mid quality. Gran Turismo 2 Europe (PAL) Graphical/Audio Issues Pocket Go 36-44 You can heard in-game audio in good quality very often. Klonoa - Door to Phantomile Europe (PAL) Graphical/Audio Issues Pocket Go 28-35 Choppy audio, uncomfortable. Rayman Europe (PAL) Playable Pocket Go 50-52 Audio can be heard in good quality (2D game). Resident Evil Europe (PAL) Playable Pocket Go 46-50 Choppy audio with lag spikes sometimes, fast when playing and moving the player. Spider-Man Europe (PAL) Graphical/Audio Issues Pocket Go 28-30 Choppy audio with uncomfortable noise in the background, but can be played at mid quality. Needs a tweak with configuration for L2-R2 triggers. Tekken 3 Europe (PAL) Graphical/Audio Issues Pocket Go 27-33 Very uncomfortable when playing, choppy audio. Tony Hawk's Pro Skater 3 Europe (PAL) Graphical/Audio Issues Pocket Go 28-37 Can be heard background music, in-game music is very choppy and uncomfortable.","title":"Compatibility List"},{"location":"PCSX-ReARMed/#compatibility-list-old","text":"Thanks to Pifen for this guide Notice all of this testing is for anyone wondering if the game they want to play works. The emulator for pocketgo is still infant with what it can do. Don't expect things to run on first try and what i consider good frames may not be to your liking. I will not be testing out your liked games so don't ask me to download x or y game. All tests done with PocketGo CFW 1.1 - Bios 1001 - GPU UNAI - Default sound - EBOOT format is .PBP - PS1 format is .cue/.bin Some games choosen to use PSP EBOOT mostly for space reasons Great example is the 10+ files in PS1 Ace Combat Easier to use PSP format For control schemes to original games use PSX database. \ufeffFORMAT NAME STATUS FRAME SKIP FRAME STATUS NOTES PSP ALIEN TRILOGY WORKING AUTO FS SLIGHT FRAME DROP PSP ACE COMBAT WORKING FS 1 BARELY ANY DROP PS1 ACE COMBAT 2 WORKING FS 1 BARELY ANY DROP PS1 ACE COMBAT 3 WORKING FS 1 BARELY ANY DROP PS1 BATTLE TANX GLOBAL ASSAULT WORKING FS 1 HEAVY FRAME DROP NOTICEABLE NEAR TANK EXPLOSIONS PSP BLOOD OMEN LEGACY OF KAIN WORKING FS 1 MENU ISSUES BUT VERY PLAYABLE PS1 C&C RETALIATION WORKING AUTO FS SLIGHT FRAME DROP NORMALLY WHEN MOVING MANY UNITS PS1 C&C RED ALERT WORKING AUTO FS SLIGHT FRAME DROP NORMALLY WHEN MOVING MANY UNITS PS1 C&C WORKING FS 1 SLIGHT FRAME DROP NORMALLY WHEN MOVING MANY UNITS PSP CASTLEVANIA SYMPHONY NIGHT WORKING FS 1 BARELY ANY DROP PSP COLONY WARS WORKING FS 1 NOTICEABLE DROPS NEAR LARGE SHIPS DON'T DO THIRD PERSON PSP COLONY WARS VENGEANCE WORKING FS 1 NOTICEABLE DROPS NEAR LARGE SHIPS DON'T DO THIRD PERSON PSP COLONY WARS 3 RED SUN WORKING FS 1 NOTICEABLE DROPS NEAR LARGE SHIPS DON'T DO THIRD PERSON PSP DIGIMON WORLD 1 WORKING FS 1 SLIGHT FRAME DROP PSP DIGIMON WORLD 2 WORKING FS 1 SLIGHT FRAME DROP PS1 DIGIMON WORLD 3 WORKING FS 1 SLIGHT FRAME DROP PS1 DINO CRISIS WORKING FS 1 SLIGHT FRAME DROP PSP DINO CRISIS 2 WORKING FS 1 SLIGHT FRAME DROP SOME ISSUES WITH IN GAME CUTSCENES PS1 DINO CRISIS 2 WORKING FS 1 SLIGHT FRAME DROP SOME ISSUES WITH IN GAME CUTSCENES PSP DUNE 2000 WORKING FS 1 SLIGHT FRAME DROP PS1 DUNE 2000 WORKING FS 1 SLIGHT FRAME DROP PS1 MEGAMAN LEGENDS WORKING FS 1 SLIGHT FRAME DROP AIMING IS A PAIN BUT ALLIVIATED WITH AUTO AIM PSP MEGAMAN LEGENDS WORKING FS 1 SLIGHT FRAME DROP AIMING IS A PAIN BUT ALLIVIATED WITH AUTO AIM PS1 MEGAMAN LEGENDS 2 WORKING FS 1 SLIGHT FRAME DROP AIMING IS A PAIN BUT ALLIVIATED WITH AUTO AIM PSP MEGAMAN LEGENDS 2 WORKING FS 1 SLIGHT FRAME DROP AIMING IS A PAIN BUT ALLIVIATED WITH AUTO AIM PS1 FRONT MISSION 3 WORKING FS 1 BARELY ANY DROP MAIN MENU AT START IS BLACK BUT JUST CLICK X TO START GAME AND IT PLAYS PERFECTLY PS1 FINAL FANTASY 7 WORKING FS 1 SLIGHT FRAME DROP ON HEAVY DUTY SPELLS PS1 HYDRO THUNDER WORKING FS 1 ALMOST UNPLAYABLE NEEDS BETTER GPU SUPPORT PS1 GAMESHARK V2 SOUNDS ONLY PS1 GAMESHARK V4 (UNL) NOTHING PSP GEX WORKING FS 1 BARELY ANY DROP PSP GEX 2 WORKING FS 1 SLIGHT FRAME DROP PSP GEX 3 WORKING FS 2 SLIGHT FRAME DROP RECOMMEND FS 2 FOR THIS GAME THEY WENT ALL OUT WITH THE DETAIL PSP GRAN TURISMO WORKING FS 1 SLIGHT FRAME DROP MAIN MENU IS WIDE BUT DOESN'T AFFECT GAMEPLAY PSP GRAND THEFT AUTO WORKING FS 1 BARELY ANY DROP THE GAME IS TINY SO EXPECT TO DIE FROM GUNSHOTS YOU BARELY SEE PSP GTA LONDON WORKING FS 1 BARELY ANY DROP THE GAME IS TINY SO EXPECT TO DIE FROM GUNSHOTS YOU BARELY SEE PSP IN THE HUNT WORKING FS 1 SLIGHT FRAME DROP PSP INTELLIGENT QUBE WORKING FS 1 BARELY ANY DROP PSP LEGO ROCK RAIDERS WORKING FS 1 SLIGHT FRAME DROP NEAR MANY PLACED BUILDINGS PSP MARVEL VS STREET FIGHTER WORKING FS 1 BARELY ANY DROP PSP MDK WORKING FS 1 SLIGHT FRAME DROP PS1 METAL GEAR SOLID WORKING FS 1 SLIGHT FRAME DROP PS1 NEED FOR SPEED 3 WORKING FS 1 SLIGHT FRAME DROP DUE TO JUST OVERALL SPEED AND TRACKS PSP PANDEMONIUM! WORKING FS 1 SLIGHT FRAME DROP PSP PANDEMONIUM! 2 WORKING FS 1 SLIGHT FRAME DROP PS1 PANZER FRONT WORKING FS 1 BARELY ANY DROP PSP PARASITE EVE CRASH PSP PARASITE EVE 2 CRASH PS1 PARASITE EVE 1 WORKING FS 1 SLIGHT FRAME DROP GPU STRUGGLES WITH TEXT AND AYA MODEL BUT STILL PLAYABLE PS1 PARASITE EVE 2 INTRO GAME SHOWS INTRO BUT DOESN'T REACH MAIN MENU PSP RESIDENT EVIL 1 WORKING FS 1 BARELY ANY DROP PSP RESIDENT EVIL 2 WORKING FS 1 BARELY ANY DROP PSP RESIDENT EVIL 3 WORKING FS 1 BARELY ANY DROP PS1 SILENT HILL WORKING FS 1 VERY HEAVY FRAME DROPS NEEDS BETTER GPU SUPPORT PSP SILENT HILL CRASH PSP SPYRO 3 WORKING FS 1 SLIGHT FRAME DROP PSP STEEL REIGN WORKING FS 1 SLIGHT FRAME DROP PSP SUIKODEN CRASH ON START PS1 SUIKODEN WORKING FS 1 BARELY ANY DROP PS1 SUIKODEN 2 BUGFIXED PATCHED WORKING FS 1 BARELY ANY DROP PSP SYPHON FILTER WORKING FS 1 BAD FRAME DROPS ON SOME LEVELS WOULD SUGGEST PATIENCE WITH THIS ONE PSP TEKKEN 3 WORKING FS 1 HEAVY FRAME DROP STILL PLAYABLE BUT SOME MOVES GO INVISIBLE DUE TO FRAME DROP PSP TOMB RAIDER WORKING FS 1 BARELY ANY DROP PSP TOMB RAIDER 2 WORKING FS 1 BARELY ANY DROP PSP TONY HAWK WORKING FS 1 SLIGHT FRAME DROP PSP TONY HAWK 2 WORKING FS 1 BAD FRAMES GAME IS PLAYABLE BUT YOU WILL DESPAIR PSP VIGILANTE 8 WORKING FS 1 FRAME DROPS ON MANY TERRAIN OBJECTS BUT VERY PLAYABLE SUGGEST L2 AS TRIANGLE AND R2 AS CROSS FOR WEAPON FIRING, YOU MAY NEED TO PUT CROSS AS START BUTTON ALSO FOR MENU PSP VIGILANTE 8 2ND OFFENSE WORKING FS 1 FRAME DROPS ON MANY TERRAIN OBJECTS BUT VERY PLAYABLE SUGGEST L2 AS TRIANGLE AND R2 AS CROSS FOR WEAPON FIRING, YOU MAY NEED TO PUT CROSS AS START BUTTON ALSO FOR MENU PSP WARCRAFT 2 WORKING FS 1 BARELY ANY DROP NOTICE TEXT IS SMALL, IT'S ALL VOICED SO LISTEN TO GAME PS1 WILD ARMS WORKING FS 1 BARELY ANY DROP MAIN MENU FRAMES ARE BAD PS1 WILD ARMS 2 WORKING FS 1 BARELY ANY DROP PERFECT MAIN MENU PSP WIPEOUT 3 WORKING FS 1 BARELY ANY DROP PSP WORMS WORKING FS 1 BARELY ANY DROP WORMS ARE VERY TINY MEMORIZE WHO YOUR TOONS ARE PSP XENOGEARS 1.0 STUCK BOOTING PSP XENOGEARS 2.0 WORKING FS 1 BARELY ANY DROP MAIN MENU IS STRETCHED BUT EASY TO SELECT NEW GAME PS1 YU-GI-OH! FORBIDDEN WORKING FS 1 BARELY ANY DROP","title":"Compatibility List (Old)"},{"location":"Remote-debugging/","text":"How to run remote debugging on miyoo device using VS code and gdbserver Install the Native Debug extension for VS Code Add below launch configuration to Run configurations in VS Code (Run->Add Configuration..) { \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"gdb\", \"request\": \"attach\", \"name\": \"Attach to gdbserver\", \"executable\": \"<path to binary relative to workspace root>\", \"target\": \"192.168.137.1:9999\", \"remote\": true, \"cwd\": \"${workspaceRoot}\", \"gdbpath\": \"/opt/arm-miyoo-linux-uclibcgnueabi_sdk-buildroot/bin/arm-linux-gdb\" } ] } On miyoo device start gdbserver with application gdbserver 192.168.137.1:9999 ./<application> Start debugging in VS code (Run->Start Debugging)","title":"Remote debugging"},{"location":"Remote-debugging/#how-to-run-remote-debugging-on-miyoo-device-using-vs-code-and-gdbserver","text":"Install the Native Debug extension for VS Code Add below launch configuration to Run configurations in VS Code (Run->Add Configuration..) { \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"gdb\", \"request\": \"attach\", \"name\": \"Attach to gdbserver\", \"executable\": \"<path to binary relative to workspace root>\", \"target\": \"192.168.137.1:9999\", \"remote\": true, \"cwd\": \"${workspaceRoot}\", \"gdbpath\": \"/opt/arm-miyoo-linux-uclibcgnueabi_sdk-buildroot/bin/arm-linux-gdb\" } ] } On miyoo device start gdbserver with application gdbserver 192.168.137.1:9999 ./<application> Start debugging in VS code (Run->Start Debugging)","title":"How to run remote debugging on miyoo device using VS code and gdbserver"},{"location":"RetroArch-Setup/","text":"This guide may be outdated! Since Version 2.0.0 Beta was pre-released the following guide will change or be updated and the current one may be only for the old version 1.3.3. Be careful! Download files NOTE: RetroArch is now included in 2.0.0 beta so you can skip the download/unzip steps (1 ad 2)! Download the RetroArch.7z file from the Retroarch website https://www.retroarch.com/?page=platforms go down to the Miyoo section (Pocket Go, PowKiddy Q90 / V90, New BittBoy) to download the latest stable version Unzip the retroarch folder from the Retroach.7z file on the main partition. With this you can now use the Retroarch from the emulators section. The only thing missing is the icon and background of the theme being used. Some kernels need bios, which go in the .retroarch/system folder. You can use this repository https://github.com/Abdess/retroarch_system Configuration The recommended configuration is: - Main Menu - Settings - User Interface - Show Advanced Settings: Enabled with alsa audio output (by default): - Main Menu - Settings - Audio - Resampler - Audio Resampler: nearest / Resampler Quality: Minimum / Output speed (Hz): 32000 with sdl audio output: - Main Menu - Settings - Audio - Resampler - Audio Resampler: sync / Resampler Quality: Minimum / Output speed (Hz): 22000 for video output: - Main Menu - Settings - Video - Video Threading: Off - Main Menu - Settings - Video - Synchronization - Vertical Synchronization: On / VSync Swap: 1 / Frame Delay: 0 / Sync to Exact ...: On (for Scummvm turn Off) For Frameskip options to work (eg. PCSX, gpSP, MAME, snes9x cores), you must use default alsa audio driver. For QuickNES core add - Main Menu - Settings - Video - Scaling - Integer Scale: on - Main Menu - Settings - Video - Image Interpolation - Nearest Neighbor - Main Menu - Settings - Video - Video Filter - Upscale_256X-320 - Quick Menu - Options - Audio Mode - Linear For fullscreen scaling in QuikNES core, set: - Main Menu - Setting - Video - Scaling -Integar Scale: OFF / Keep Aspect: OFF / Crop Overscan: OFF - Quick Menu - Options - Aspect Ratio: 4:3 / Show Horizontal Overscan: ON/ Show Vertical Overscan: ON Show Vertical Overscan: ON (for correct pixels scaling) ; OFF (for accurate aspect ratio) with this setting ON most of games will look squashed and have black bar at the bottom on the other hand OFF will blurr some of pixelization For gpSP core add - Main Menu - Settings - Video - Video Filter - Upscale_240x160-320x240.filt (for bilinear effect) - Main Menu - Settings - Video - Video Filter - Upscale_240x160-320x240-mix.filt (for improved readability) To save the configuration of a core - Main Menu - Configuration File - Save New Configuration To save core's general settings to use with RetroArch app, while in-game: - Quick Menu -> Overrides -> Save Core Overrides-> ..... All core options from Quick Menu->Options will be saved automatically upon closing content. Recommended cores by systems mGBA core is not recommended to use for GBA games, but GB and GBC games run fine on that core. For GBA better use core gpsp. Gambatte core is faster for GB and GBC titles and offers more options for pallete change. GenesisPlusGX core is not recommended to use for MD games, but SMS and GG games run fine on that core. For MegaDrive better use Picodrive core Picodrive core is faster option for SMS games, especially if any of the video filters will be applied and if no emulated CPU overclocking is needed (for that use Genesis plus GX). Snes9x 2005 core has better performance with pal roms New cores You can use the nightly version for new updates that are not yet in the stable branch or for new cores that are coming out and are not included in the stable version. The cores are added in the .retroarch/cores folder They are at this link: https://buildbot.libretro.com/nightly/dingux/miyoo-arm32/latest/ Integrate with GMenu2X ROMs can be run by launching Retroarch or by running from GMenu2X, selecting the ROM and launching the RetroArch core as if it were a native emulator. To launch the Retroach cores from Gmenu2x you have to create a script and a link in gmenu2x to that script The structure of the script is retroarch_path -v -L core_path --config config_path [rom_to_load] For example, for the Game Boy Advanced system, the gba_ra.sh script is created with the content #!/bin/sh /mnt/emus/retroarch/retroarch -v -L /mnt/.retroarch/cores/gpsp_libretro.so --config /mnt/.retroarch/config/gpsp_libretro.cfg \"$1\" If you haven't created a configuration for core gpsp use global configuration, the script would be #!/bin/sh /mnt/emus/retroarch/retroarch -v -L /mnt/.retroarch/cores/gpsp_libretro.so --config /mnt/.retroarch/retroarch.cfg \"$1\" To save the configuration of a core * Main Menu - Configuration File - Save New Configuration This script is saved in the emulators folder with the name gba_ra.sh, remember the path /mnt/emus/gba_ra.sh You can use whatever name you want but with the .sh extension and save it in whatever folder you want on the main partition, but remember the name and the folder. A new link is created in gmenu2x, in the main partition in the folder gmenu2x/sections/emulators/gba_ra with the content title=GBA description=gba Retroarch exec=/mnt/emus/gba_ra.sh clock=702 selectordir=/mnt/roms/GBA selectorscreens=/mnt/roms/gba/.preview For more information on gmenu2x bindings https://mtorromeo.github.io/gmenu2x/documentation/ For Windows system's users to properly write shell scripts for these devices, you need to have End Of Line conversion se to Unix (LF) in your editing program. If you want to use a core that does not need to indicate a rom to initialize it, such as Scummvm, these would be the files to create. #!/bin/sh /mnt/emus/retroarch/retroarch -v -L /mnt/.retroarch/cores/scummvm_libretro.so --config /mnt/.retroarch/config/scummvm_libretro.cfg title=Scummvm description=Scummvm exec=/mnt/emus/scummvm_retroarch.sh clock=702 Scummvm can also be launched indicating a rom, if you want more information on how to do it you can read this page in Spanish http://apuntes.eduardofilo.es/2020-08-15-rg350_scummvm_launchers.html If you want to use a core that always uses the same rom to initialize it, such as NXEngine with Cave Story , these would be the files to create. #!/bin/sh /mnt/emus/retroarch/retroarch -v -L /mnt/.retroarch/cores/nxengine_libretro.so --config /mnt/.retroarch/retroarch.cfg /mnt/roms/cavestory/Doukutsu.exe title=Cave Story description=Cave Story exec=/mnt/emus/cavestory_ra.sh clock=702 For more information on how to integrate Retroarch in gmenu2x you can see this page in Spanish http://apuntes.eduardofilo.es/2021-01-16-rg350_ra_installer.html If you also add a key combination to close Retroarch, you can use not having the Retroarch cores without handling its interface. A key combination is assigned to close Retroarch on * Main Menu - Setting - Input - Hotkeys - Quit Controller Combo The only thing that you will not have the icon and the background (if the theme uses a background), you have to create the image of the icon and the background For example, for the Game Boy Advanced system. For the icon on the main partition in the folder gmenu2x/skins/{Theme_you_are_using}/icons/ create an image with the name gpsp_ra.png. The easiest is to duplicate the file gpsp_rumble.png and name it gba_ra.sh. For the background, not all themes use backgrounds. In the main partition in the folder gmenu2x/skins/{Theme_you_are_using}/backdrops/ create an image with the name gpsp_ra.png. The easiest is to duplicate the file gpsp_rumble.png and name it gba_ra.sh. Launch Retroarch with the last game played If you want to start from the last played game whenever you open RetroArch, these would be the files to create. retroarch_history.sh #!/bin/sh function start_retroarch { cd /mnt/emus/retroarch if ! read -n 1 -t 1 -s; then local history_path='/mnt/.retroarch/content_history.lpl' if test -f \"${history_path}\"; then local rom_path=\"$(head -n20 \"${history_path}\" | grep -Eo -m1 '/mnt/roms/[^\"]+')\" local core_path=\"$(head -n20 \"${history_path}\" | grep -Eo -m1 '/mnt/.retroarch/cores/.+\\.so')\" if test -f \"${core_path}\" -a -f \"${rom_path}\"; then clear echo -e \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\e[1;33m[ LOADING ]\\e[0m\" ./retroarch --load-menu-on-error --libretro \"${core_path}\" \"${rom_path}\" > /dev/null 2>&1 return fi fi fi ./retroarch --menu > /dev/null 2>&1 } start_retroarch A new link should be created in gmenu2x, in the main partition in the folder gmenu2x/sections/emulators/start_retroarch.sh with the content title=RA History description=Retroarch History exec=/mnt/emus/retroarch_history.sh clock=702 The above script is already provided with MiyooCFW 2.0.0 (function provided from https://github.com/jahed/powkiddy-v90)","title":"RetroArch Setup"},{"location":"RetroArch-Setup/#this-guide-may-be-outdated","text":"Since Version 2.0.0 Beta was pre-released the following guide will change or be updated and the current one may be only for the old version 1.3.3. Be careful!","title":"This guide may be outdated!"},{"location":"RetroArch-Setup/#download-files","text":"NOTE: RetroArch is now included in 2.0.0 beta so you can skip the download/unzip steps (1 ad 2)! Download the RetroArch.7z file from the Retroarch website https://www.retroarch.com/?page=platforms go down to the Miyoo section (Pocket Go, PowKiddy Q90 / V90, New BittBoy) to download the latest stable version Unzip the retroarch folder from the Retroach.7z file on the main partition. With this you can now use the Retroarch from the emulators section. The only thing missing is the icon and background of the theme being used. Some kernels need bios, which go in the .retroarch/system folder. You can use this repository https://github.com/Abdess/retroarch_system","title":"Download files"},{"location":"RetroArch-Setup/#configuration","text":"The recommended configuration is: - Main Menu - Settings - User Interface - Show Advanced Settings: Enabled with alsa audio output (by default): - Main Menu - Settings - Audio - Resampler - Audio Resampler: nearest / Resampler Quality: Minimum / Output speed (Hz): 32000 with sdl audio output: - Main Menu - Settings - Audio - Resampler - Audio Resampler: sync / Resampler Quality: Minimum / Output speed (Hz): 22000 for video output: - Main Menu - Settings - Video - Video Threading: Off - Main Menu - Settings - Video - Synchronization - Vertical Synchronization: On / VSync Swap: 1 / Frame Delay: 0 / Sync to Exact ...: On (for Scummvm turn Off) For Frameskip options to work (eg. PCSX, gpSP, MAME, snes9x cores), you must use default alsa audio driver. For QuickNES core add - Main Menu - Settings - Video - Scaling - Integer Scale: on - Main Menu - Settings - Video - Image Interpolation - Nearest Neighbor - Main Menu - Settings - Video - Video Filter - Upscale_256X-320 - Quick Menu - Options - Audio Mode - Linear For fullscreen scaling in QuikNES core, set: - Main Menu - Setting - Video - Scaling -Integar Scale: OFF / Keep Aspect: OFF / Crop Overscan: OFF - Quick Menu - Options - Aspect Ratio: 4:3 / Show Horizontal Overscan: ON/ Show Vertical Overscan: ON Show Vertical Overscan: ON (for correct pixels scaling) ; OFF (for accurate aspect ratio) with this setting ON most of games will look squashed and have black bar at the bottom on the other hand OFF will blurr some of pixelization For gpSP core add - Main Menu - Settings - Video - Video Filter - Upscale_240x160-320x240.filt (for bilinear effect) - Main Menu - Settings - Video - Video Filter - Upscale_240x160-320x240-mix.filt (for improved readability) To save the configuration of a core - Main Menu - Configuration File - Save New Configuration To save core's general settings to use with RetroArch app, while in-game: - Quick Menu -> Overrides -> Save Core Overrides-> ..... All core options from Quick Menu->Options will be saved automatically upon closing content.","title":"Configuration"},{"location":"RetroArch-Setup/#recommended-cores-by-systems","text":"mGBA core is not recommended to use for GBA games, but GB and GBC games run fine on that core. For GBA better use core gpsp. Gambatte core is faster for GB and GBC titles and offers more options for pallete change. GenesisPlusGX core is not recommended to use for MD games, but SMS and GG games run fine on that core. For MegaDrive better use Picodrive core Picodrive core is faster option for SMS games, especially if any of the video filters will be applied and if no emulated CPU overclocking is needed (for that use Genesis plus GX). Snes9x 2005 core has better performance with pal roms","title":"Recommended cores by systems"},{"location":"RetroArch-Setup/#new-cores","text":"You can use the nightly version for new updates that are not yet in the stable branch or for new cores that are coming out and are not included in the stable version. The cores are added in the .retroarch/cores folder They are at this link: https://buildbot.libretro.com/nightly/dingux/miyoo-arm32/latest/","title":"New cores"},{"location":"RetroArch-Setup/#integrate-with-gmenu2x","text":"ROMs can be run by launching Retroarch or by running from GMenu2X, selecting the ROM and launching the RetroArch core as if it were a native emulator. To launch the Retroach cores from Gmenu2x you have to create a script and a link in gmenu2x to that script The structure of the script is retroarch_path -v -L core_path --config config_path [rom_to_load] For example, for the Game Boy Advanced system, the gba_ra.sh script is created with the content #!/bin/sh /mnt/emus/retroarch/retroarch -v -L /mnt/.retroarch/cores/gpsp_libretro.so --config /mnt/.retroarch/config/gpsp_libretro.cfg \"$1\" If you haven't created a configuration for core gpsp use global configuration, the script would be #!/bin/sh /mnt/emus/retroarch/retroarch -v -L /mnt/.retroarch/cores/gpsp_libretro.so --config /mnt/.retroarch/retroarch.cfg \"$1\" To save the configuration of a core * Main Menu - Configuration File - Save New Configuration This script is saved in the emulators folder with the name gba_ra.sh, remember the path /mnt/emus/gba_ra.sh You can use whatever name you want but with the .sh extension and save it in whatever folder you want on the main partition, but remember the name and the folder. A new link is created in gmenu2x, in the main partition in the folder gmenu2x/sections/emulators/gba_ra with the content title=GBA description=gba Retroarch exec=/mnt/emus/gba_ra.sh clock=702 selectordir=/mnt/roms/GBA selectorscreens=/mnt/roms/gba/.preview For more information on gmenu2x bindings https://mtorromeo.github.io/gmenu2x/documentation/ For Windows system's users to properly write shell scripts for these devices, you need to have End Of Line conversion se to Unix (LF) in your editing program. If you want to use a core that does not need to indicate a rom to initialize it, such as Scummvm, these would be the files to create. #!/bin/sh /mnt/emus/retroarch/retroarch -v -L /mnt/.retroarch/cores/scummvm_libretro.so --config /mnt/.retroarch/config/scummvm_libretro.cfg title=Scummvm description=Scummvm exec=/mnt/emus/scummvm_retroarch.sh clock=702 Scummvm can also be launched indicating a rom, if you want more information on how to do it you can read this page in Spanish http://apuntes.eduardofilo.es/2020-08-15-rg350_scummvm_launchers.html If you want to use a core that always uses the same rom to initialize it, such as NXEngine with Cave Story , these would be the files to create. #!/bin/sh /mnt/emus/retroarch/retroarch -v -L /mnt/.retroarch/cores/nxengine_libretro.so --config /mnt/.retroarch/retroarch.cfg /mnt/roms/cavestory/Doukutsu.exe title=Cave Story description=Cave Story exec=/mnt/emus/cavestory_ra.sh clock=702 For more information on how to integrate Retroarch in gmenu2x you can see this page in Spanish http://apuntes.eduardofilo.es/2021-01-16-rg350_ra_installer.html If you also add a key combination to close Retroarch, you can use not having the Retroarch cores without handling its interface. A key combination is assigned to close Retroarch on * Main Menu - Setting - Input - Hotkeys - Quit Controller Combo The only thing that you will not have the icon and the background (if the theme uses a background), you have to create the image of the icon and the background For example, for the Game Boy Advanced system. For the icon on the main partition in the folder gmenu2x/skins/{Theme_you_are_using}/icons/ create an image with the name gpsp_ra.png. The easiest is to duplicate the file gpsp_rumble.png and name it gba_ra.sh. For the background, not all themes use backgrounds. In the main partition in the folder gmenu2x/skins/{Theme_you_are_using}/backdrops/ create an image with the name gpsp_ra.png. The easiest is to duplicate the file gpsp_rumble.png and name it gba_ra.sh.","title":"Integrate with GMenu2X"},{"location":"RetroArch-Setup/#launch-retroarch-with-the-last-game-played","text":"If you want to start from the last played game whenever you open RetroArch, these would be the files to create. retroarch_history.sh #!/bin/sh function start_retroarch { cd /mnt/emus/retroarch if ! read -n 1 -t 1 -s; then local history_path='/mnt/.retroarch/content_history.lpl' if test -f \"${history_path}\"; then local rom_path=\"$(head -n20 \"${history_path}\" | grep -Eo -m1 '/mnt/roms/[^\"]+')\" local core_path=\"$(head -n20 \"${history_path}\" | grep -Eo -m1 '/mnt/.retroarch/cores/.+\\.so')\" if test -f \"${core_path}\" -a -f \"${rom_path}\"; then clear echo -e \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\e[1;33m[ LOADING ]\\e[0m\" ./retroarch --load-menu-on-error --libretro \"${core_path}\" \"${rom_path}\" > /dev/null 2>&1 return fi fi fi ./retroarch --menu > /dev/null 2>&1 } start_retroarch A new link should be created in gmenu2x, in the main partition in the folder gmenu2x/sections/emulators/start_retroarch.sh with the content title=RA History description=Retroarch History exec=/mnt/emus/retroarch_history.sh clock=702 The above script is already provided with MiyooCFW 2.0.0 (function provided from https://github.com/jahed/powkiddy-v90)","title":"Launch Retroarch with the last game played"},{"location":"Shoulder-Buttons/","text":"The next pictures shows how to add L1, R1, L2 and R2 to the 2nd revisions of the Bittboy. Thanks to WenTao for this. Warning: \\ This guide is under development, in some console revisions the L2 and R2 button may not work with some CFW versions. 1) Placing the buttons 2) Identify the connectors 3) Trim the case 4) Final product","title":"Shoulder Buttons"},{"location":"Shoulder-Buttons/#1-placing-the-buttons","text":"","title":"1) Placing the buttons"},{"location":"Shoulder-Buttons/#2-identify-the-connectors","text":"","title":"2) Identify the connectors"},{"location":"Shoulder-Buttons/#3-trim-the-case","text":"","title":"3) Trim the case"},{"location":"Shoulder-Buttons/#4-final-product","text":"","title":"4) Final product"},{"location":"Sound-Noise-Fix/","text":"Modifying the Pocket-Go PWM frequency Thanks to BytePorter for this guide . This may work also for Bittboy v3/3.5 I recently picked up a Pocket-Go portable game console. It\u2019s a neat little device based on an Allwinner F1C100S SoC, an old chip with an ARM9 core at up to 900MHz and 32MB RAM built in. The device runs Linux off of an SD card so some more hacking might be in store for the future. One issue that seems to be common with it however is an annoying buzzing sound that comes out of the speaker. Another owner asked support about it and they said it could be mitigated by turning the brightness up (link). That immediately made it sound to me like the PWM circuit which controls the brighness of the backlight was introducing noise into the audio circuit. I had a look at the device tree file on the SD card and sure enough the PWM frequency was set to 1000 Hz, which is easily audible. I read up a bit on the device tree bindings for the pwm-backlight driver in the documentation for the Linux kernel and found that the third value of the \u201cpwms\u201d attribute of the \u201cbacklight\u201d section in the device tree specifies the period of the pwm in nanoseconds. Changing this to an inaudible frequency should help with the noise, so I tried a couple and found 17kHz to work well for me. If you go too fast, the backlight seems to loose some of its adjustment levels. 17kHz is inaudible for many adults, though younger people or people with great hearing may still hear it. It also doesn\u2019t remove all of the noise as the design most likely lacks proper isolation on the circuit level, but it definitely helps as far as my own ear is concerned. I created a generator to build the modified device tree and put it in a shell script that can be run on the Pocket-Go in order to change the PWM frequency. I generated a handful of values that I thought might be useful for people but an arbitrary frequency is easily generated too. Here you\u2019ll find instructions on how to get these scripts onto your Pocket-Go and add them to the launcher so that you can run them and try this fix for yourself! WARNING This will change the parameters of the driver for the PWM backlight. The way the backlight works is essentially by flicking the power switch for the LED on and off very quickly, faster than your eye can see. The amount of time the switch stays on each cycle determines the brightness of the backlight. This software will tell the driver to flick this LED on and off much faster. As far as I know, this shouldn\u2019t be able to damage the hardware and I personally have not had issues on mine. However, I studied computer science, not electrical engineering, so all of my solutions only work in theory ;). Use this at your own risk! I would feel awful if someone damaged their Pocket-Go using this, but I\u2019m only trying to be helpful and releasing this work for people to try for free. I can\u2019t assume responsibility for any damage that results. Instructions Ok, with the warning out of the way, let\u2019s get down to business. I whipped up a quick tool to generate device trees for whatever frequencies we want. It then compresses and encodes this device tree into a shell script that you can run from your Pocket-Go to change the tree used to boot the system, thus changing the PWM frequency. You can see the source code for this on my github. I used it to create scripts for 1000 (the stock value), 15000, 17000, 20000, and 25000 Hz settings for the PWM. Ideally we\u2019d just use the fastest but it seems to be unable to allow for as fine an adjustment the faster you go resulting in fewer brightness levels being available. 17000 Hz works well for me and most adults probably can\u2019t really hear that frequency either, so that\u2019s what I\u2019d recommend. I was under the impression that Windows only mounted the very last partition which is why I went through the trouble to package the device tree into scripts that could run on the Pocket-Go. However as you can see, at least on my tablet using the included USB card reader, all four show up. So I could have just provided the device trees for people to copy onto the boot partition I guess. Oh well, this is still a convenient way to easily switch between them in case not everyone wants to use 17000 Hz. Remove the SD card from your Pocket-Go and insert it into the USB reader that came with it. Plug this into your PC. DO NOT format the card when Windows asks. That will erase your firmware and you\u2019ll have to go download and install it all over again. Download the archive: switch-pwm-scripts.tgz Extract the archive to a new folder (mine is named switch-pwm-scripts). Extracting Copy the folder with the scripts to the last and largest partition on the SD card, which in my case was mounted to G:. Copying the folder Eject the SD card from your PC, remove it from the reader, and put it back in your Pocket-Go, and turn on the Pocket-Go. Once it boots, press \u2018select\u2019 and choose \u2018Add section\u2019. Add a new section This will be a new section in your launcher where we\u2019ll put links to run the PWM scripts so name it appropriately. I chose \u2018PWM\u2019 for mine. Name the section Use the shoulder buttons to navigate to the section you just created and press \u2018select\u2019 again. Choose \u2018Add link\u2019. Add a new link You will be asked to select an application with a file browser. It should start you in the root directory of the SD card\u2019s last partition. Navigate to the folder you copied over which in my case is \u2018switch-pwm-scripts\u2019. Select scripts folder In that folder, select the script for whichever frequency you want. I use 17000Hz, which is named switch-pwm-17000.sh. Select the script The default name is truncated from the script to \u2018script-pwm..\u2019 which you won\u2019t be able to tell apart from the other versions of the script if you choose to add more. Choose \u2018Title\u2019 from the Edit menu and press \u2018A\u2019 to edit the name. I named mine \u2018pwm-17k\u2019. Choose Title to edit the name Give it an appropriate name (Optional) Repeat the last four steps to add whichever versions of the script you\u2019d like to be able to run. Select the link to the script you\u2019d like to run and press \u2018A\u2019 to run it. Run the script The script should run and you\u2019ll see a message telling you it was successful and that you need to reboot for it to take effect. Wait for this message to disappear after 5 seconds and then reboot your Pocket-Go as you normally would. Script successfully completed That\u2019s it! Your Pocket-Go should reboot like normal and hopefully the buzzing noise from your speaker will be greatly reduced. Final Thoughts This fix greatly reduced the unwanted noise coming from the speaker on my Pocket-Go, but it didn\u2019t completely remove it. Particularly, I can still hear noise on mine when the volume is turned up and also some noise when the Pocket-Go is booting. I don\u2019t think this can be addressed with software, I\u2019d imagine the audio circuit is just not well isolated in general. However, this made mine much better and I can\u2019t hear excess noise unless I turn the volume up very loud. As the speaker can go much louder than I need anyway, I just don\u2019t turn it up all the way. Good luck! Hope this mitigates the issue for everyone else too.","title":"Sound Noise Fix"},{"location":"Sound-Noise-Fix/#modifying-the-pocket-go-pwm-frequency","text":"Thanks to BytePorter for this guide . This may work also for Bittboy v3/3.5 I recently picked up a Pocket-Go portable game console. It\u2019s a neat little device based on an Allwinner F1C100S SoC, an old chip with an ARM9 core at up to 900MHz and 32MB RAM built in. The device runs Linux off of an SD card so some more hacking might be in store for the future. One issue that seems to be common with it however is an annoying buzzing sound that comes out of the speaker. Another owner asked support about it and they said it could be mitigated by turning the brightness up (link). That immediately made it sound to me like the PWM circuit which controls the brighness of the backlight was introducing noise into the audio circuit. I had a look at the device tree file on the SD card and sure enough the PWM frequency was set to 1000 Hz, which is easily audible. I read up a bit on the device tree bindings for the pwm-backlight driver in the documentation for the Linux kernel and found that the third value of the \u201cpwms\u201d attribute of the \u201cbacklight\u201d section in the device tree specifies the period of the pwm in nanoseconds. Changing this to an inaudible frequency should help with the noise, so I tried a couple and found 17kHz to work well for me. If you go too fast, the backlight seems to loose some of its adjustment levels. 17kHz is inaudible for many adults, though younger people or people with great hearing may still hear it. It also doesn\u2019t remove all of the noise as the design most likely lacks proper isolation on the circuit level, but it definitely helps as far as my own ear is concerned. I created a generator to build the modified device tree and put it in a shell script that can be run on the Pocket-Go in order to change the PWM frequency. I generated a handful of values that I thought might be useful for people but an arbitrary frequency is easily generated too. Here you\u2019ll find instructions on how to get these scripts onto your Pocket-Go and add them to the launcher so that you can run them and try this fix for yourself!","title":"Modifying the Pocket-Go PWM frequency"},{"location":"Sound-Noise-Fix/#warning","text":"This will change the parameters of the driver for the PWM backlight. The way the backlight works is essentially by flicking the power switch for the LED on and off very quickly, faster than your eye can see. The amount of time the switch stays on each cycle determines the brightness of the backlight. This software will tell the driver to flick this LED on and off much faster. As far as I know, this shouldn\u2019t be able to damage the hardware and I personally have not had issues on mine. However, I studied computer science, not electrical engineering, so all of my solutions only work in theory ;). Use this at your own risk! I would feel awful if someone damaged their Pocket-Go using this, but I\u2019m only trying to be helpful and releasing this work for people to try for free. I can\u2019t assume responsibility for any damage that results.","title":"WARNING"},{"location":"Sound-Noise-Fix/#instructions","text":"Ok, with the warning out of the way, let\u2019s get down to business. I whipped up a quick tool to generate device trees for whatever frequencies we want. It then compresses and encodes this device tree into a shell script that you can run from your Pocket-Go to change the tree used to boot the system, thus changing the PWM frequency. You can see the source code for this on my github. I used it to create scripts for 1000 (the stock value), 15000, 17000, 20000, and 25000 Hz settings for the PWM. Ideally we\u2019d just use the fastest but it seems to be unable to allow for as fine an adjustment the faster you go resulting in fewer brightness levels being available. 17000 Hz works well for me and most adults probably can\u2019t really hear that frequency either, so that\u2019s what I\u2019d recommend. I was under the impression that Windows only mounted the very last partition which is why I went through the trouble to package the device tree into scripts that could run on the Pocket-Go. However as you can see, at least on my tablet using the included USB card reader, all four show up. So I could have just provided the device trees for people to copy onto the boot partition I guess. Oh well, this is still a convenient way to easily switch between them in case not everyone wants to use 17000 Hz. Remove the SD card from your Pocket-Go and insert it into the USB reader that came with it. Plug this into your PC. DO NOT format the card when Windows asks. That will erase your firmware and you\u2019ll have to go download and install it all over again. Download the archive: switch-pwm-scripts.tgz Extract the archive to a new folder (mine is named switch-pwm-scripts). Extracting Copy the folder with the scripts to the last and largest partition on the SD card, which in my case was mounted to G:. Copying the folder Eject the SD card from your PC, remove it from the reader, and put it back in your Pocket-Go, and turn on the Pocket-Go. Once it boots, press \u2018select\u2019 and choose \u2018Add section\u2019. Add a new section This will be a new section in your launcher where we\u2019ll put links to run the PWM scripts so name it appropriately. I chose \u2018PWM\u2019 for mine. Name the section Use the shoulder buttons to navigate to the section you just created and press \u2018select\u2019 again. Choose \u2018Add link\u2019. Add a new link You will be asked to select an application with a file browser. It should start you in the root directory of the SD card\u2019s last partition. Navigate to the folder you copied over which in my case is \u2018switch-pwm-scripts\u2019. Select scripts folder In that folder, select the script for whichever frequency you want. I use 17000Hz, which is named switch-pwm-17000.sh. Select the script The default name is truncated from the script to \u2018script-pwm..\u2019 which you won\u2019t be able to tell apart from the other versions of the script if you choose to add more. Choose \u2018Title\u2019 from the Edit menu and press \u2018A\u2019 to edit the name. I named mine \u2018pwm-17k\u2019. Choose Title to edit the name Give it an appropriate name (Optional) Repeat the last four steps to add whichever versions of the script you\u2019d like to be able to run. Select the link to the script you\u2019d like to run and press \u2018A\u2019 to run it. Run the script The script should run and you\u2019ll see a message telling you it was successful and that you need to reboot for it to take effect. Wait for this message to disappear after 5 seconds and then reboot your Pocket-Go as you normally would. Script successfully completed That\u2019s it! Your Pocket-Go should reboot like normal and hopefully the buzzing noise from your speaker will be greatly reduced.","title":"Instructions"},{"location":"Sound-Noise-Fix/#final-thoughts","text":"This fix greatly reduced the unwanted noise coming from the speaker on my Pocket-Go, but it didn\u2019t completely remove it. Particularly, I can still hear noise on mine when the volume is turned up and also some noise when the Pocket-Go is booting. I don\u2019t think this can be addressed with software, I\u2019d imagine the audio circuit is just not well isolated in general. However, this made mine much better and I can\u2019t hear excess noise unless I turn the volume up very loud. As the speaker can go much louder than I need anyway, I just don\u2019t turn it up all the way. Good luck! Hope this mitigates the issue for everyone else too.","title":"Final Thoughts"},{"location":"Tiny-LLM/","text":"Original post by Ordinary_Tension5730 Hello,\\ Today, I managed to get the llama2.c project running on my powkiddy v90 with the miyoo cfw. If anyone wants to give it a go, let's go. First of all, I wanted to thank Apaczer from the git MiyooCFW for providing me with some useful links. To start with, you need to be on a Linux distribution, personally, I'm on a debian bookworm. Then you need to download the external toolchain or compile it. For beginners I advise you to use the following link: https://github.com/MiyooCFW/toolchain/releases And download the already compiled tar.gz and decompress it in the /opt/miyoo folder with a tar -xvf Once the toolchain has been extracted, you need to download the git llama2.c using the following command in the /opt folder: git clone https://github.com/karpathy/llama2.c.git If you've succeeded, you now have a llama2.c folder in the /opt folder. Now you need to compile the run.c file using the external toolchain.\\ You should use a command like : ./arm-buildroot-linux-musleabi-gcc -Ofast -march=armv5te -o /opt/run /opt/llama2.c/run.c -lm -funroll-all-loops In order to find the gcc for arm you have to search in the toolchain in the bin folder (/opt/miyoo/arm-buildroot-linux-musleabi_sdk-buildroot/bin).\\ If you get this error: error: unknown type name 'int8_t'; did you mean 'intptr_t'? You need to add this line to the run.c file in llama2.c folder include <stdint.h> You should now have a file called run in the /opt folder. All that's left to do is add it to the rest of the llama2.c folder and add the whole llama2.c folder to your console. Personally, I put it in the script folder I created for the occasion. Final step to do is download one of the test models found on this page in the models section: https://github.com/karpathy/llama2.c Start by testing with the 260K which is mediocre in result but has good performance to see if everything is fine. You need to add the models to the llama2.c folder in the console and run the script. Here are some images of the two smallest models. Sources: - https://github.com/karpathy/llama2.c?tab=readme-ov-file thanks to Andrej Karpathy for that - https://github.com/MiyooCFW thanks to Apaczer and all contributors - https://www.reddit.com/r/LocalLLaMA/comments/1cpy0w0/tinystories_llm_in_cheap_lowmem_4_computer_from for the idea","title":"Tiny LLM"},{"location":"Using-Docker-to-Compile-Games/","text":"Before You Begin This guide assumes you are using Ubuntu or one of its derivatives. Some commands might be different if you aren't. Setting Up Docker Install Docker: sudo apt install docker.io Download the MiyooCFW Toolchain: sudo docker pull miyoocfw/toolchain-shared-uclibc sudo docker pull miyoocfw/toolchain-shared-musl sudo docker pull miyoocfw/toolchain-static-uclibc sudo docker pull miyoocfw/toolchain-static-musl Compiling apps using docker with MiyooCFW Toolchain: cd my_game_src_dir/ docker run --volume ./:/src/ -it miyoocfw/toolchain-shared-uclibc:latest cd /src make -f Makefile.miyoo Compiling apps by setting up Project for Docker Just outside the project directory, create an empty text file named \"make.sh\", and add the following text to it, replacing the values of the PROJECT_DIR and MAKE_CMD variables with your project's directory name and compile command: #! /bin/bash # Project directory (relative, without a trailing slash). PROJECT_DIR=\"IOTester\" # Compile command to be run in the container. MAKE_CMD=\"make -f Makefile.miyoo zip\" USER_GROUP=`id -gn` CYAN=\"\\033[1;36m\" NC=\"\\033[0m\" echolog () { echo -e \"\\n${CYAN}[INFO]: ${1}${NC}\\n\" } echolog \"Creating and starting container...\" CONTAINER_ID=`sudo docker run -v \"./${PROJECT_DIR}\":\"/${PROJECT_DIR}\" -itd docker.io/miyoocfw/toolchain-shared-uclibc:latest` echolog \"Compiling in container...\" sudo docker exec -it -w \"/${PROJECT_DIR}/\" \"${CONTAINER_ID}\" ${MAKE_CMD} echolog \"Taking ownership of compiled files...\" sudo chown \"${USER}\":\"${USER_GROUP}\" \"${PROJECT_DIR}\"/* echolog \"Stopping container...\" sudo docker stop \"${CONTAINER_ID}\" echolog \"Deleting container...\" sudo docker rm \"${CONTAINER_ID}\" Make the script executable with: chmod +x make.sh This script will create a container from the MiyooCFW image, mount your project directory to its filesystem, and leave it running in the background. It will then send the make command to it, fix the ownership of the resulting files, and finally stop and delete the container. Compiling Games ./make.sh The compiled files will be in your project directory.","title":"Using Docker to Compile Games"},{"location":"Using-Docker-to-Compile-Games/#before-you-begin","text":"This guide assumes you are using Ubuntu or one of its derivatives. Some commands might be different if you aren't.","title":"Before You Begin"},{"location":"Using-Docker-to-Compile-Games/#setting-up-docker","text":"Install Docker: sudo apt install docker.io Download the MiyooCFW Toolchain: sudo docker pull miyoocfw/toolchain-shared-uclibc sudo docker pull miyoocfw/toolchain-shared-musl sudo docker pull miyoocfw/toolchain-static-uclibc sudo docker pull miyoocfw/toolchain-static-musl","title":"Setting Up Docker"},{"location":"Using-Docker-to-Compile-Games/#compiling-apps-using-docker-with-miyoocfw-toolchain","text":"cd my_game_src_dir/ docker run --volume ./:/src/ -it miyoocfw/toolchain-shared-uclibc:latest cd /src make -f Makefile.miyoo","title":"Compiling apps using docker with MiyooCFW Toolchain:"},{"location":"Using-Docker-to-Compile-Games/#compiling-apps-by-setting-up-project-for-docker","text":"Just outside the project directory, create an empty text file named \"make.sh\", and add the following text to it, replacing the values of the PROJECT_DIR and MAKE_CMD variables with your project's directory name and compile command: #! /bin/bash # Project directory (relative, without a trailing slash). PROJECT_DIR=\"IOTester\" # Compile command to be run in the container. MAKE_CMD=\"make -f Makefile.miyoo zip\" USER_GROUP=`id -gn` CYAN=\"\\033[1;36m\" NC=\"\\033[0m\" echolog () { echo -e \"\\n${CYAN}[INFO]: ${1}${NC}\\n\" } echolog \"Creating and starting container...\" CONTAINER_ID=`sudo docker run -v \"./${PROJECT_DIR}\":\"/${PROJECT_DIR}\" -itd docker.io/miyoocfw/toolchain-shared-uclibc:latest` echolog \"Compiling in container...\" sudo docker exec -it -w \"/${PROJECT_DIR}/\" \"${CONTAINER_ID}\" ${MAKE_CMD} echolog \"Taking ownership of compiled files...\" sudo chown \"${USER}\":\"${USER_GROUP}\" \"${PROJECT_DIR}\"/* echolog \"Stopping container...\" sudo docker stop \"${CONTAINER_ID}\" echolog \"Deleting container...\" sudo docker rm \"${CONTAINER_ID}\" Make the script executable with: chmod +x make.sh This script will create a container from the MiyooCFW image, mount your project directory to its filesystem, and leave it running in the background. It will then send the make command to it, fix the ownership of the resulting files, and finally stop and delete the container. Compiling Games ./make.sh The compiled files will be in your project directory.","title":"Compiling apps by setting up Project for Docker"},{"location":"_Footer/","text":"This wiki was made for Miyoo Custom Firmware and its compatible consoles. Some info still may be missing, if you have any question or suggestion please send us a message in our Discord server here or our development chat at Matrix here","title":" Footer"},{"location":"_Sidebar/","text":"Miyoo CFW 2.0.0 Overview [[Console Hotkeys]] [[Build Image and SDK]] [[Build Kernel]] [[Build uBoot]] [[Get the prebuilt SDK from GH actions]] [[Making Games]] [[Using Docker to Compile Games]] [[Remote debugging]] Bug Reporting Discussions Topics Miyoo CFW 1.3.3 [[Overview]] [[Making-Games-DEPRECATED]] [[Build Source-DEPRECATED]] [[Custom Firmware Setup]] Applications [[Emulator Info]] [[Homebrew Info]] [[DosBox Setup]] [[RetroArch Setup]] GameBoy [[GamBatte]] [[OhBoy]] Gameboy Advance [[gpSP]] Arcade [[MAME4All]] [[GnGeo]] [[FBA-A320]] PlayStation [[PCSX-ReARMed]] Themes - GMenu2X - [[Fontixel]] - [[NewComicBook]] - Retro Pixel BR - SimpleMenu - SimUI Frontends - CoverFlow - SimpleMenu - GMenu2X Projects - [[Tiny LLM]] Modding - ALL - [[Improve Directional Pad]] - V90 - USB-C Fix - PocketGo - [[Sound Noise Fix]] - [[Light Bleed Fix]] - BittBoy - [[Ghost Key Fix]] - [[Shoulder Buttons]]","title":" Sidebar"},{"location":"_Sidebar/#miyoo-cfw-200","text":"Overview [[Console Hotkeys]] [[Build Image and SDK]] [[Build Kernel]] [[Build uBoot]] [[Get the prebuilt SDK from GH actions]] [[Making Games]] [[Using Docker to Compile Games]] [[Remote debugging]] Bug Reporting Discussions Topics","title":"Miyoo CFW 2.0.0"},{"location":"_Sidebar/#miyoo-cfw-133","text":"[[Overview]] [[Making-Games-DEPRECATED]] [[Build Source-DEPRECATED]] [[Custom Firmware Setup]]","title":"Miyoo CFW 1.3.3"},{"location":"_Sidebar/#applications","text":"[[Emulator Info]] [[Homebrew Info]] [[DosBox Setup]] [[RetroArch Setup]] GameBoy [[GamBatte]] [[OhBoy]] Gameboy Advance [[gpSP]] Arcade [[MAME4All]] [[GnGeo]] [[FBA-A320]] PlayStation [[PCSX-ReARMed]] Themes - GMenu2X - [[Fontixel]] - [[NewComicBook]] - Retro Pixel BR - SimpleMenu - SimUI Frontends - CoverFlow - SimpleMenu - GMenu2X Projects - [[Tiny LLM]] Modding - ALL - [[Improve Directional Pad]] - V90 - USB-C Fix - PocketGo - [[Sound Noise Fix]] - [[Light Bleed Fix]] - BittBoy - [[Ghost Key Fix]] - [[Shoulder Buttons]]","title":"Applications"}]}